# import User from "./generated/prisma.graphql"
# this is needed for upload to work
scalar Upload

type Query {
  articles: [Article!]!
  depts: [Dept!]!
  deptProds(deptId: ID!): [Prod!]!
  confirmEmail(token: String!): AuthPayload
  enquiries: [Enquiry!]!
  enquiry (id: ID!): Enquiry
  me: User
  model (id: ID!): Model
  models: [Model!]!
  modelProds(modelId: ID!): [Prod!]!
  order (id: ID!): Order
  orgs: [Org!]!
  orgEmployees (orgId: ID!): [Employee!]!
  payments: [Payment!]!
  statuses: [Status!]!
}

type Mutation {
  # auth
  signup(email: String!, password: String!, fName: String, lName: String, mName: String, regName: String, tel: String, country: String): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  # public
  signupAndCreateEnquiry(orgId: ID!, regName: String!, email: String!, tel: String!, country: String!, modelName: String!, qty: Int!, period: String!, deadlineDateLocal: String, htmlText: String, orgId: ID!, files: [FileLinkCreateInput!]!, hasAgreedToRules: Boolean!, hasAgreedToSearch3rdParty: Boolean): Enquiry
  # other
  createDrawings(modelId: ID!, files: [Upload!]!): [Drawing!]!
  createEnquiry(dateLocal: String!, orgId: ID!, modelId: ID!, qty: Int!): Enquiry
  createEnquiryEvent(enquiryId: ID!, htmlText: String, statusId: ID, doc: DocCreateInput): Event
  createOrg(inn: String!): Org
  deleteAllEnquiries: BatchPayload!
  deleteAllOrgs: BatchPayload!
  deleteDrawings(ids: [ID!]!): BatchPayload!
  deleteOrg(id: ID!): Org
  moveProds(to: ID!, prodIds: [ID!]!): MoveProdPayload!
  reserveProds(orderId: ID!, prodIds: [ID!]!): Order
  seedEnquiryStatuses: BatchPayload!
  setDrawingsSortOrder(ids: [ID!]!): BatchPayload!
  updateEnquiry(input: EnquiryInput!): Enquiry
  upsertEmployee(input: EmployeeInput!): Employee
  upsertModel(input: ModelInput!): Model
  upsertOrder(id: ID, enquiryId: ID, dateLocal: String!, qty: Int, amount: Float): Order
  upsertPayment(input: PaymentInput!): Payment
  upsertPerson(input: PersonInput!): Person
  upsertProd(input: ProdInput!): Prod
  upsertTel(input: TelInput!): Tel
  # file handling
  singleUpload (file: Upload!): File
  multipleUpload (files: [Upload!]!): [File!]!
  # db migration scripts:
  importModels: BatchPayload!
  connectEnquiriesToDocsAndStatus: BatchPayload!
  populateOrderFullnums: BatchPayload
  populatePaymentArticles: BatchPayload
}

type Subscription {
  enquirySubscription: EnquirySubscriptionPayload!
}

type AuthPayload {
  token: String!
  email: String
  person: Person
}

type MoveProdPayload {
  prods: [Prod!]!
  to: ID!
}

input EmployeeInput {
  id: ID
  orgId: ID
  position: String
  person: PersonInput
}

input EnquiryInput {
  id: ID
  orgId: ID
  modelId: ID
  dateLocal: String
  qty: Int
  htmlNote: String
}

input ModelInput {
  id: ID
  orgId: ID
  name: String
  article: String
}

input PaymentInput {
  id: ID
	articleId: ID
  dateLocal: String
	amount: Float
	purpose: String
}

input PersonInput {
  id: ID
	fName: String
	lName: String
	mName: String
	regName: String
	regNameChecked: Boolean
	htmlNote: String
	tels: [TelInput!]
}

input ProdInput {
  id: ID
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  deptId: ID
  modelId: ID
}

input TelInput {
  id: ID
  personId: ID
	number: String
	type: TelType
	country: String
	note: String
	default: Boolean
}