# import User from "./generated/prisma.graphql"

type Query {
  me: User
  confirmEmail(token: String!): AuthPayload
  enquiries: [Enquiry!]!
  enquiry (id: ID!): Enquiry
  order (id: ID!): Order
  orgs: [Org!]!
  orgEmployees (orgId: ID!): [Employee!]!
  depts: [Dept!]!
  statuses: [Status!]!
  models: [Model!]!
  modelProds(modelId: ID!): [Prod!]!
  deptProds(deptId: ID!): [Prod!]!
}

type Mutation {
  signup(email: String!, password: String!, fName: String, lName: String, mName: String, regName: String, tel: String, country: String): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createEnquiry(dateLocal: String!, orgId: ID!, modelId: ID!, qty: Int!): Enquiry
  signupAndCreateEnquiry(orgId: ID!, regName: String!, email: String!, tel: String!, country: String!, modelName: String!, qty: Int!, period: String!, deadlineDateLocal: String, htmlText: String, orgId: ID!, files: [FileLinkCreateInput!]!, hasAgreedToRules: Boolean!, hasAgreedToSearch3rdParty: Boolean): Enquiry
  updateEnquiry(input: EnquiryInput!): Enquiry
  deleteAllEnquiries: BatchPayload!
  createEnquiryEvent(enquiryId: ID!, htmlText: String, statusId: ID, doc: DocCreateInput): Event
  createOrg(inn: String!): Org
  deleteOrg(id: ID!): Org
  deleteAllOrgs: BatchPayload!
  upsertOrder(id: ID, enquiryId: ID, dateLocal: String!, qty: Int, amount: Float): Order
  reserveProds(orderId: ID!, prodIds: [ID!]!): Order
  upsertPerson(input: PersonCreateInput!): Person
  upsertProd(input: ProdInput!): Prod
  upsertEmployee(input: EmployeeInput!): Employee
  moveProds(to: ID!, prodIds: [ID!]!): MoveProdPayload!
  importModels: BatchPayload!
  seedEnquiryStatuses: BatchPayload!
  connectEnquiriesToDocsAndStatus: BatchPayload!
}

type Subscription {
  enquirySubscription: EnquirySubscriptionPayload!
}

type AuthPayload {
  token: String!
  email: String
  person: Person
}

type MoveProdPayload {
  prods: [Prod!]!
  to: ID!
}

input EnquiryInput {
  id: ID!
  dateLocal: String
  orgId: ID
  modelId: ID
  qty: Int
  htmlNote: String
}

input ProdInput {
  id: ID
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  deptId: ID
  modelId: ID
}

input EmployeeInput {
  id: ID
  orgId: ID
  position: String
  person: PersonCreateInput
}