# source: https://kolmech-heroku-server.herokuapp.com/prisma-heroku/dev
# timestamp: Thu Aug 23 2018 15:46:41 GMT+0300 (RTZ 2 (зима))

type AggregateComment {
  count: Int!
}

type AggregateEnquiry {
  count: Int!
}

type AggregateOrg {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Comment implements Node {
  id: ID!
  user(where: UserWhereInput): User
  enquiry(where: EnquiryWhereInput): Enquiry
  datetimeLocal: String!
  text: String
  htmlText: String
  type: CommentType
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  datetimeLocal: String!
  text: String
  htmlText: String
  type: CommentType
  user: UserCreateOneWithoutCommentsInput
  enquiry: EnquiryCreateOneWithoutCommentsInput
}

input CommentCreateManyWithoutEnquiryInput {
  create: [CommentCreateWithoutEnquiryInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutEnquiryInput {
  datetimeLocal: String!
  text: String
  htmlText: String
  type: CommentType
  user: UserCreateOneWithoutCommentsInput
}

input CommentCreateWithoutUserInput {
  datetimeLocal: String!
  text: String
  htmlText: String
  type: CommentType
  enquiry: EnquiryCreateOneWithoutCommentsInput
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  datetimeLocal_ASC
  datetimeLocal_DESC
  text_ASC
  text_DESC
  htmlText_ASC
  htmlText_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  id: ID!
  datetimeLocal: String!
  text: String
  htmlText: String
  type: CommentType
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

enum CommentType {
  CREATE
  UPDATE
}

input CommentUpdateInput {
  datetimeLocal: String
  text: String
  htmlText: String
  type: CommentType
  user: UserUpdateOneWithoutCommentsInput
  enquiry: EnquiryUpdateOneWithoutCommentsInput
}

input CommentUpdateManyWithoutEnquiryInput {
  create: [CommentCreateWithoutEnquiryInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutEnquiryInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutEnquiryInput!]
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
}

input CommentUpdateWithoutEnquiryDataInput {
  datetimeLocal: String
  text: String
  htmlText: String
  type: CommentType
  user: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateWithoutUserDataInput {
  datetimeLocal: String
  text: String
  htmlText: String
  type: CommentType
  enquiry: EnquiryUpdateOneWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutEnquiryInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutEnquiryDataInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpsertWithWhereUniqueWithoutEnquiryInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutEnquiryDataInput!
  create: CommentCreateWithoutEnquiryInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  datetimeLocal: String

  """All values that are not equal to given value."""
  datetimeLocal_not: String

  """All values that are contained in given list."""
  datetimeLocal_in: [String!]

  """All values that are not contained in given list."""
  datetimeLocal_not_in: [String!]

  """All values less than the given value."""
  datetimeLocal_lt: String

  """All values less than or equal the given value."""
  datetimeLocal_lte: String

  """All values greater than the given value."""
  datetimeLocal_gt: String

  """All values greater than or equal the given value."""
  datetimeLocal_gte: String

  """All values containing the given string."""
  datetimeLocal_contains: String

  """All values not containing the given string."""
  datetimeLocal_not_contains: String

  """All values starting with the given string."""
  datetimeLocal_starts_with: String

  """All values not starting with the given string."""
  datetimeLocal_not_starts_with: String

  """All values ending with the given string."""
  datetimeLocal_ends_with: String

  """All values not ending with the given string."""
  datetimeLocal_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  htmlText: String

  """All values that are not equal to given value."""
  htmlText_not: String

  """All values that are contained in given list."""
  htmlText_in: [String!]

  """All values that are not contained in given list."""
  htmlText_not_in: [String!]

  """All values less than the given value."""
  htmlText_lt: String

  """All values less than or equal the given value."""
  htmlText_lte: String

  """All values greater than the given value."""
  htmlText_gt: String

  """All values greater than or equal the given value."""
  htmlText_gte: String

  """All values containing the given string."""
  htmlText_contains: String

  """All values not containing the given string."""
  htmlText_not_contains: String

  """All values starting with the given string."""
  htmlText_starts_with: String

  """All values not starting with the given string."""
  htmlText_not_starts_with: String

  """All values ending with the given string."""
  htmlText_ends_with: String

  """All values not ending with the given string."""
  htmlText_not_ends_with: String
  type: CommentType

  """All values that are not equal to given value."""
  type_not: CommentType

  """All values that are contained in given list."""
  type_in: [CommentType!]

  """All values that are not contained in given list."""
  type_not_in: [CommentType!]
  user: UserWhereInput
  enquiry: EnquiryWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

type Enquiry implements Node {
  id: ID!
  num: Int!
  message: String
  dateLocal: String
  org(where: OrgWhereInput): Org
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

"""A connection to a list of items."""
type EnquiryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EnquiryEdge]!
  aggregate: AggregateEnquiry!
}

input EnquiryCreateInput {
  num: Int!
  message: String
  dateLocal: String
  org: OrgCreateOneWithoutEnquiriesInput
  comments: CommentCreateManyWithoutEnquiryInput
}

input EnquiryCreateManyWithoutOrgInput {
  create: [EnquiryCreateWithoutOrgInput!]
  connect: [EnquiryWhereUniqueInput!]
}

input EnquiryCreateOneWithoutCommentsInput {
  create: EnquiryCreateWithoutCommentsInput
  connect: EnquiryWhereUniqueInput
}

input EnquiryCreateWithoutCommentsInput {
  num: Int!
  message: String
  dateLocal: String
  org: OrgCreateOneWithoutEnquiriesInput
}

input EnquiryCreateWithoutOrgInput {
  num: Int!
  message: String
  dateLocal: String
  comments: CommentCreateManyWithoutEnquiryInput
}

"""An edge in a connection."""
type EnquiryEdge {
  """The item at the end of the edge."""
  node: Enquiry!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EnquiryOrderByInput {
  id_ASC
  id_DESC
  num_ASC
  num_DESC
  message_ASC
  message_DESC
  dateLocal_ASC
  dateLocal_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EnquiryPreviousValues {
  id: ID!
  num: Int!
  message: String
  dateLocal: String
}

type EnquirySubscriptionPayload {
  mutation: MutationType!
  node: Enquiry
  updatedFields: [String!]
  previousValues: EnquiryPreviousValues
}

input EnquirySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EnquirySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EnquirySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EnquirySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EnquiryWhereInput
}

input EnquiryUpdateInput {
  num: Int
  message: String
  dateLocal: String
  org: OrgUpdateOneWithoutEnquiriesInput
  comments: CommentUpdateManyWithoutEnquiryInput
}

input EnquiryUpdateManyWithoutOrgInput {
  create: [EnquiryCreateWithoutOrgInput!]
  connect: [EnquiryWhereUniqueInput!]
  disconnect: [EnquiryWhereUniqueInput!]
  delete: [EnquiryWhereUniqueInput!]
  update: [EnquiryUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [EnquiryUpsertWithWhereUniqueWithoutOrgInput!]
}

input EnquiryUpdateOneWithoutCommentsInput {
  create: EnquiryCreateWithoutCommentsInput
  connect: EnquiryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EnquiryUpdateWithoutCommentsDataInput
  upsert: EnquiryUpsertWithoutCommentsInput
}

input EnquiryUpdateWithoutCommentsDataInput {
  num: Int
  message: String
  dateLocal: String
  org: OrgUpdateOneWithoutEnquiriesInput
}

input EnquiryUpdateWithoutOrgDataInput {
  num: Int
  message: String
  dateLocal: String
  comments: CommentUpdateManyWithoutEnquiryInput
}

input EnquiryUpdateWithWhereUniqueWithoutOrgInput {
  where: EnquiryWhereUniqueInput!
  data: EnquiryUpdateWithoutOrgDataInput!
}

input EnquiryUpsertWithoutCommentsInput {
  update: EnquiryUpdateWithoutCommentsDataInput!
  create: EnquiryCreateWithoutCommentsInput!
}

input EnquiryUpsertWithWhereUniqueWithoutOrgInput {
  where: EnquiryWhereUniqueInput!
  update: EnquiryUpdateWithoutOrgDataInput!
  create: EnquiryCreateWithoutOrgInput!
}

input EnquiryWhereInput {
  """Logical AND on all given filters."""
  AND: [EnquiryWhereInput!]

  """Logical OR on all given filters."""
  OR: [EnquiryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EnquiryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  num: Int

  """All values that are not equal to given value."""
  num_not: Int

  """All values that are contained in given list."""
  num_in: [Int!]

  """All values that are not contained in given list."""
  num_not_in: [Int!]

  """All values less than the given value."""
  num_lt: Int

  """All values less than or equal the given value."""
  num_lte: Int

  """All values greater than the given value."""
  num_gt: Int

  """All values greater than or equal the given value."""
  num_gte: Int
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  dateLocal: String

  """All values that are not equal to given value."""
  dateLocal_not: String

  """All values that are contained in given list."""
  dateLocal_in: [String!]

  """All values that are not contained in given list."""
  dateLocal_not_in: [String!]

  """All values less than the given value."""
  dateLocal_lt: String

  """All values less than or equal the given value."""
  dateLocal_lte: String

  """All values greater than the given value."""
  dateLocal_gt: String

  """All values greater than or equal the given value."""
  dateLocal_gte: String

  """All values containing the given string."""
  dateLocal_contains: String

  """All values not containing the given string."""
  dateLocal_not_contains: String

  """All values starting with the given string."""
  dateLocal_starts_with: String

  """All values not starting with the given string."""
  dateLocal_not_starts_with: String

  """All values ending with the given string."""
  dateLocal_ends_with: String

  """All values not ending with the given string."""
  dateLocal_not_ends_with: String
  org: OrgWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input EnquiryWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPerson(data: PersonCreateInput!): Person!
  createOrg(data: OrgCreateInput!): Org!
  createEnquiry(data: EnquiryCreateInput!): Enquiry!
  createComment(data: CommentCreateInput!): Comment!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateOrg(data: OrgUpdateInput!, where: OrgWhereUniqueInput!): Org
  updateEnquiry(data: EnquiryUpdateInput!, where: EnquiryWhereUniqueInput!): Enquiry
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  deleteUser(where: UserWhereUniqueInput!): User
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteOrg(where: OrgWhereUniqueInput!): Org
  deleteEnquiry(where: EnquiryWhereUniqueInput!): Enquiry
  deleteComment(where: CommentWhereUniqueInput!): Comment
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  upsertOrg(where: OrgWhereUniqueInput!, create: OrgCreateInput!, update: OrgUpdateInput!): Org!
  upsertEnquiry(where: EnquiryWhereUniqueInput!, create: EnquiryCreateInput!, update: EnquiryUpdateInput!): Enquiry!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyPersons(data: PersonUpdateInput!, where: PersonWhereInput): BatchPayload!
  updateManyOrgs(data: OrgUpdateInput!, where: OrgWhereInput): BatchPayload!
  updateManyEnquiries(data: EnquiryUpdateInput!, where: EnquiryWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateInput!, where: CommentWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  deleteManyOrgs(where: OrgWhereInput): BatchPayload!
  deleteManyEnquiries(where: EnquiryWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Org implements Node {
  id: ID!
  name: String!
  enquiries(where: EnquiryWhereInput, orderBy: EnquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Enquiry!]
}

"""A connection to a list of items."""
type OrgConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrgEdge]!
  aggregate: AggregateOrg!
}

input OrgCreateInput {
  name: String!
  enquiries: EnquiryCreateManyWithoutOrgInput
}

input OrgCreateOneWithoutEnquiriesInput {
  create: OrgCreateWithoutEnquiriesInput
  connect: OrgWhereUniqueInput
}

input OrgCreateWithoutEnquiriesInput {
  name: String!
}

"""An edge in a connection."""
type OrgEdge {
  """The item at the end of the edge."""
  node: Org!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrgOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrgPreviousValues {
  id: ID!
  name: String!
}

type OrgSubscriptionPayload {
  mutation: MutationType!
  node: Org
  updatedFields: [String!]
  previousValues: OrgPreviousValues
}

input OrgSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrgSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrgSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrgSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrgWhereInput
}

input OrgUpdateInput {
  name: String
  enquiries: EnquiryUpdateManyWithoutOrgInput
}

input OrgUpdateOneWithoutEnquiriesInput {
  create: OrgCreateWithoutEnquiriesInput
  connect: OrgWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrgUpdateWithoutEnquiriesDataInput
  upsert: OrgUpsertWithoutEnquiriesInput
}

input OrgUpdateWithoutEnquiriesDataInput {
  name: String
}

input OrgUpsertWithoutEnquiriesInput {
  update: OrgUpdateWithoutEnquiriesDataInput!
  create: OrgCreateWithoutEnquiriesInput!
}

input OrgWhereInput {
  """Logical AND on all given filters."""
  AND: [OrgWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrgWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrgWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  enquiries_every: EnquiryWhereInput
  enquiries_some: EnquiryWhereInput
  enquiries_none: EnquiryWhereInput
}

input OrgWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Person implements Node {
  id: ID!
  fName: String!
  lName: String
  user(where: UserWhereInput): User
}

"""A connection to a list of items."""
type PersonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  fName: String!
  lName: String
  user: UserCreateOneWithoutPersonInput
}

input PersonCreateOneWithoutUserInput {
  create: PersonCreateWithoutUserInput
  connect: PersonWhereUniqueInput
}

input PersonCreateWithoutUserInput {
  fName: String!
  lName: String
}

"""An edge in a connection."""
type PersonEdge {
  """The item at the end of the edge."""
  node: Person!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  fName_ASC
  fName_DESC
  lName_ASC
  lName_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PersonPreviousValues {
  id: ID!
  fName: String!
  lName: String
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
}

input PersonUpdateInput {
  fName: String
  lName: String
  user: UserUpdateOneWithoutPersonInput
}

input PersonUpdateOneWithoutUserInput {
  create: PersonCreateWithoutUserInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PersonUpdateWithoutUserDataInput
  upsert: PersonUpsertWithoutUserInput
}

input PersonUpdateWithoutUserDataInput {
  fName: String
  lName: String
}

input PersonUpsertWithoutUserInput {
  update: PersonUpdateWithoutUserDataInput!
  create: PersonCreateWithoutUserInput!
}

input PersonWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  fName: String

  """All values that are not equal to given value."""
  fName_not: String

  """All values that are contained in given list."""
  fName_in: [String!]

  """All values that are not contained in given list."""
  fName_not_in: [String!]

  """All values less than the given value."""
  fName_lt: String

  """All values less than or equal the given value."""
  fName_lte: String

  """All values greater than the given value."""
  fName_gt: String

  """All values greater than or equal the given value."""
  fName_gte: String

  """All values containing the given string."""
  fName_contains: String

  """All values not containing the given string."""
  fName_not_contains: String

  """All values starting with the given string."""
  fName_starts_with: String

  """All values not starting with the given string."""
  fName_not_starts_with: String

  """All values ending with the given string."""
  fName_ends_with: String

  """All values not ending with the given string."""
  fName_not_ends_with: String
  lName: String

  """All values that are not equal to given value."""
  lName_not: String

  """All values that are contained in given list."""
  lName_in: [String!]

  """All values that are not contained in given list."""
  lName_not_in: [String!]

  """All values less than the given value."""
  lName_lt: String

  """All values less than or equal the given value."""
  lName_lte: String

  """All values greater than the given value."""
  lName_gt: String

  """All values greater than or equal the given value."""
  lName_gte: String

  """All values containing the given string."""
  lName_contains: String

  """All values not containing the given string."""
  lName_not_contains: String

  """All values starting with the given string."""
  lName_starts_with: String

  """All values not starting with the given string."""
  lName_not_starts_with: String

  """All values ending with the given string."""
  lName_ends_with: String

  """All values not ending with the given string."""
  lName_not_ends_with: String
  user: UserWhereInput
}

input PersonWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  orgs(where: OrgWhereInput, orderBy: OrgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Org]!
  enquiries(where: EnquiryWhereInput, orderBy: EnquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Enquiry]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  user(where: UserWhereUniqueInput!): User
  person(where: PersonWhereUniqueInput!): Person
  org(where: OrgWhereUniqueInput!): Org
  enquiry(where: EnquiryWhereUniqueInput!): Enquiry
  comment(where: CommentWhereUniqueInput!): Comment
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  orgsConnection(where: OrgWhereInput, orderBy: OrgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrgConnection!
  enquiriesConnection(where: EnquiryWhereInput, orderBy: EnquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EnquiryConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  org(where: OrgSubscriptionWhereInput): OrgSubscriptionPayload
  enquiry(where: EnquirySubscriptionWhereInput): EnquirySubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  person(where: PersonWhereInput): Person
  role: UserRole
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  role: UserRole
  person: PersonCreateOneWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPersonInput {
  create: UserCreateWithoutPersonInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  email: String!
  password: String!
  role: UserRole
  person: PersonCreateOneWithoutUserInput
}

input UserCreateWithoutPersonInput {
  email: String!
  password: String!
  role: UserRole
  comments: CommentCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  role: UserRole
}

enum UserRole {
  INACTIVE
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  role: UserRole
  person: PersonUpdateOneWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
}

input UserUpdateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutPersonInput {
  create: UserCreateWithoutPersonInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPersonDataInput
  upsert: UserUpsertWithoutPersonInput
}

input UserUpdateWithoutCommentsDataInput {
  email: String
  password: String
  role: UserRole
  person: PersonUpdateOneWithoutUserInput
}

input UserUpdateWithoutPersonDataInput {
  email: String
  password: String
  role: UserRole
  comments: CommentUpdateManyWithoutUserInput
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutPersonInput {
  update: UserUpdateWithoutPersonDataInput!
  create: UserCreateWithoutPersonInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  role: UserRole

  """All values that are not equal to given value."""
  role_not: UserRole

  """All values that are contained in given list."""
  role_in: [UserRole!]

  """All values that are not contained in given list."""
  role_not_in: [UserRole!]
  person: PersonWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
