# source: http://localhost:4466
# timestamp: Fri Nov 09 2018 20:51:55 GMT+0300 (RTZ 2 (зима))

type AggregateDept {
  count: Int!
}

type AggregateDoc {
  count: Int!
}

type AggregateEnquiry {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateFile1 {
  count: Int!
}

type AggregateModel {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrg {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregateProd {
  count: Int!
}

type AggregateStatus {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Dept implements Node {
  id: ID!
  type: DeptType!
  name: String!
  prods(where: ProdWhereInput, orderBy: ProdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prod!]
}

"""A connection to a list of items."""
type DeptConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeptEdge]!
  aggregate: AggregateDept!
}

input DeptCreateInput {
  type: DeptType!
  name: String!
  prods: ProdCreateManyWithoutDeptInput
}

input DeptCreateOneWithoutProdsInput {
  create: DeptCreateWithoutProdsInput
  connect: DeptWhereUniqueInput
}

input DeptCreateWithoutProdsInput {
  type: DeptType!
  name: String!
}

"""An edge in a connection."""
type DeptEdge {
  """The item at the end of the edge."""
  node: Dept!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DeptOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DeptPreviousValues {
  id: ID!
  type: DeptType!
  name: String!
}

type DeptSubscriptionPayload {
  mutation: MutationType!
  node: Dept
  updatedFields: [String!]
  previousValues: DeptPreviousValues
}

input DeptSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DeptSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeptSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeptSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DeptWhereInput
}

enum DeptType {
  OWNED
  CLIENT
  PARTNER
  TRANSPORT
}

input DeptUpdateInput {
  type: DeptType
  name: String
  prods: ProdUpdateManyWithoutDeptInput
}

input DeptUpdateManyMutationInput {
  type: DeptType
  name: String
}

input DeptUpdateOneRequiredWithoutProdsInput {
  create: DeptCreateWithoutProdsInput
  connect: DeptWhereUniqueInput
  update: DeptUpdateWithoutProdsDataInput
  upsert: DeptUpsertWithoutProdsInput
}

input DeptUpdateWithoutProdsDataInput {
  type: DeptType
  name: String
}

input DeptUpsertWithoutProdsInput {
  update: DeptUpdateWithoutProdsDataInput!
  create: DeptCreateWithoutProdsInput!
}

input DeptWhereInput {
  """Logical AND on all given filters."""
  AND: [DeptWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeptWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeptWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: DeptType

  """All values that are not equal to given value."""
  type_not: DeptType

  """All values that are contained in given list."""
  type_in: [DeptType!]

  """All values that are not contained in given list."""
  type_not_in: [DeptType!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  prods_every: ProdWhereInput
  prods_some: ProdWhereInput
  prods_none: ProdWhereInput
}

input DeptWhereUniqueInput {
  id: ID
}

type Doc implements Node {
  id: ID!
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
  enquiry: Enquiry
}

"""A connection to a list of items."""
type DocConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DocEdge]!
  aggregate: AggregateDoc!
}

input DocCreateInput {
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
  enquiry: EnquiryCreateOneWithoutDocsInput
}

input DocCreateManyWithoutEnquiryInput {
  create: [DocCreateWithoutEnquiryInput!]
  connect: [DocWhereUniqueInput!]
}

input DocCreateOneInput {
  create: DocCreateInput
  connect: DocWhereUniqueInput
}

input DocCreateWithoutEnquiryInput {
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
}

"""An edge in a connection."""
type DocEdge {
  """The item at the end of the edge."""
  node: Doc!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DocOrderByInput {
  id_ASC
  id_DESC
  dateLocal_ASC
  dateLocal_DESC
  amount_ASC
  amount_DESC
  nds_ASC
  nds_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DocPreviousValues {
  id: ID!
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
}

type DocSubscriptionPayload {
  mutation: MutationType!
  node: Doc
  updatedFields: [String!]
  previousValues: DocPreviousValues
}

input DocSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DocSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DocWhereInput
}

enum DocType {
  CO
}

input DocUpdateDataInput {
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
  enquiry: EnquiryUpdateOneWithoutDocsInput
}

input DocUpdateInput {
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
  enquiry: EnquiryUpdateOneWithoutDocsInput
}

input DocUpdateManyMutationInput {
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
}

input DocUpdateManyWithoutEnquiryInput {
  create: [DocCreateWithoutEnquiryInput!]
  connect: [DocWhereUniqueInput!]
  disconnect: [DocWhereUniqueInput!]
  delete: [DocWhereUniqueInput!]
  update: [DocUpdateWithWhereUniqueWithoutEnquiryInput!]
  upsert: [DocUpsertWithWhereUniqueWithoutEnquiryInput!]
}

input DocUpdateOneInput {
  create: DocCreateInput
  connect: DocWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DocUpdateDataInput
  upsert: DocUpsertNestedInput
}

input DocUpdateWithoutEnquiryDataInput {
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
}

input DocUpdateWithWhereUniqueWithoutEnquiryInput {
  where: DocWhereUniqueInput!
  data: DocUpdateWithoutEnquiryDataInput!
}

input DocUpsertNestedInput {
  update: DocUpdateDataInput!
  create: DocCreateInput!
}

input DocUpsertWithWhereUniqueWithoutEnquiryInput {
  where: DocWhereUniqueInput!
  update: DocUpdateWithoutEnquiryDataInput!
  create: DocCreateWithoutEnquiryInput!
}

input DocWhereInput {
  """Logical AND on all given filters."""
  AND: [DocWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  dateLocal: String

  """All values that are not equal to given value."""
  dateLocal_not: String

  """All values that are contained in given list."""
  dateLocal_in: [String!]

  """All values that are not contained in given list."""
  dateLocal_not_in: [String!]

  """All values less than the given value."""
  dateLocal_lt: String

  """All values less than or equal the given value."""
  dateLocal_lte: String

  """All values greater than the given value."""
  dateLocal_gt: String

  """All values greater than or equal the given value."""
  dateLocal_gte: String

  """All values containing the given string."""
  dateLocal_contains: String

  """All values not containing the given string."""
  dateLocal_not_contains: String

  """All values starting with the given string."""
  dateLocal_starts_with: String

  """All values not starting with the given string."""
  dateLocal_not_starts_with: String

  """All values ending with the given string."""
  dateLocal_ends_with: String

  """All values not ending with the given string."""
  dateLocal_not_ends_with: String
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  nds: Boolean

  """All values that are not equal to given value."""
  nds_not: Boolean
  type: DocType

  """All values that are not equal to given value."""
  type_not: DocType

  """All values that are contained in given list."""
  type_in: [DocType!]

  """All values that are not contained in given list."""
  type_not_in: [DocType!]
  enquiry: EnquiryWhereInput
}

input DocWhereUniqueInput {
  id: ID
}

type Enquiry implements Node {
  id: ID!
  num: Int!
  dateLocal: String
  org: Org
  model: Model
  qty: Int
  htmlNote: String
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  docs(where: DocWhereInput, orderBy: DocOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Doc!]
  status: Status
}

"""A connection to a list of items."""
type EnquiryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EnquiryEdge]!
  aggregate: AggregateEnquiry!
}

input EnquiryCreateInput {
  num: Int!
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgCreateOneWithoutEnquiriesInput
  model: ModelCreateOneWithoutEnquiriesInput
  events: EventCreateManyWithoutEnquiryInput
  orders: OrderCreateManyWithoutEnquiryInput
  docs: DocCreateManyWithoutEnquiryInput
  status: StatusCreateOneInput
}

input EnquiryCreateManyWithoutModelInput {
  create: [EnquiryCreateWithoutModelInput!]
  connect: [EnquiryWhereUniqueInput!]
}

input EnquiryCreateManyWithoutOrgInput {
  create: [EnquiryCreateWithoutOrgInput!]
  connect: [EnquiryWhereUniqueInput!]
}

input EnquiryCreateOneWithoutDocsInput {
  create: EnquiryCreateWithoutDocsInput
  connect: EnquiryWhereUniqueInput
}

input EnquiryCreateOneWithoutEventsInput {
  create: EnquiryCreateWithoutEventsInput
  connect: EnquiryWhereUniqueInput
}

input EnquiryCreateOneWithoutOrdersInput {
  create: EnquiryCreateWithoutOrdersInput
  connect: EnquiryWhereUniqueInput
}

input EnquiryCreateWithoutDocsInput {
  num: Int!
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgCreateOneWithoutEnquiriesInput
  model: ModelCreateOneWithoutEnquiriesInput
  events: EventCreateManyWithoutEnquiryInput
  orders: OrderCreateManyWithoutEnquiryInput
  status: StatusCreateOneInput
}

input EnquiryCreateWithoutEventsInput {
  num: Int!
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgCreateOneWithoutEnquiriesInput
  model: ModelCreateOneWithoutEnquiriesInput
  orders: OrderCreateManyWithoutEnquiryInput
  docs: DocCreateManyWithoutEnquiryInput
  status: StatusCreateOneInput
}

input EnquiryCreateWithoutModelInput {
  num: Int!
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgCreateOneWithoutEnquiriesInput
  events: EventCreateManyWithoutEnquiryInput
  orders: OrderCreateManyWithoutEnquiryInput
  docs: DocCreateManyWithoutEnquiryInput
  status: StatusCreateOneInput
}

input EnquiryCreateWithoutOrdersInput {
  num: Int!
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgCreateOneWithoutEnquiriesInput
  model: ModelCreateOneWithoutEnquiriesInput
  events: EventCreateManyWithoutEnquiryInput
  docs: DocCreateManyWithoutEnquiryInput
  status: StatusCreateOneInput
}

input EnquiryCreateWithoutOrgInput {
  num: Int!
  dateLocal: String
  qty: Int
  htmlNote: String
  model: ModelCreateOneWithoutEnquiriesInput
  events: EventCreateManyWithoutEnquiryInput
  orders: OrderCreateManyWithoutEnquiryInput
  docs: DocCreateManyWithoutEnquiryInput
  status: StatusCreateOneInput
}

"""An edge in a connection."""
type EnquiryEdge {
  """The item at the end of the edge."""
  node: Enquiry!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EnquiryOrderByInput {
  id_ASC
  id_DESC
  num_ASC
  num_DESC
  dateLocal_ASC
  dateLocal_DESC
  qty_ASC
  qty_DESC
  htmlNote_ASC
  htmlNote_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EnquiryPreviousValues {
  id: ID!
  num: Int!
  dateLocal: String
  qty: Int
  htmlNote: String
}

type EnquirySubscriptionPayload {
  mutation: MutationType!
  node: Enquiry
  updatedFields: [String!]
  previousValues: EnquiryPreviousValues
}

input EnquirySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EnquirySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EnquirySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EnquirySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EnquiryWhereInput
}

input EnquiryUpdateInput {
  num: Int
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgUpdateOneWithoutEnquiriesInput
  model: ModelUpdateOneWithoutEnquiriesInput
  events: EventUpdateManyWithoutEnquiryInput
  orders: OrderUpdateManyWithoutEnquiryInput
  docs: DocUpdateManyWithoutEnquiryInput
  status: StatusUpdateOneInput
}

input EnquiryUpdateManyMutationInput {
  num: Int
  dateLocal: String
  qty: Int
  htmlNote: String
}

input EnquiryUpdateManyWithoutModelInput {
  create: [EnquiryCreateWithoutModelInput!]
  connect: [EnquiryWhereUniqueInput!]
  disconnect: [EnquiryWhereUniqueInput!]
  delete: [EnquiryWhereUniqueInput!]
  update: [EnquiryUpdateWithWhereUniqueWithoutModelInput!]
  upsert: [EnquiryUpsertWithWhereUniqueWithoutModelInput!]
}

input EnquiryUpdateManyWithoutOrgInput {
  create: [EnquiryCreateWithoutOrgInput!]
  connect: [EnquiryWhereUniqueInput!]
  disconnect: [EnquiryWhereUniqueInput!]
  delete: [EnquiryWhereUniqueInput!]
  update: [EnquiryUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [EnquiryUpsertWithWhereUniqueWithoutOrgInput!]
}

input EnquiryUpdateOneWithoutDocsInput {
  create: EnquiryCreateWithoutDocsInput
  connect: EnquiryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EnquiryUpdateWithoutDocsDataInput
  upsert: EnquiryUpsertWithoutDocsInput
}

input EnquiryUpdateOneWithoutEventsInput {
  create: EnquiryCreateWithoutEventsInput
  connect: EnquiryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EnquiryUpdateWithoutEventsDataInput
  upsert: EnquiryUpsertWithoutEventsInput
}

input EnquiryUpdateOneWithoutOrdersInput {
  create: EnquiryCreateWithoutOrdersInput
  connect: EnquiryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EnquiryUpdateWithoutOrdersDataInput
  upsert: EnquiryUpsertWithoutOrdersInput
}

input EnquiryUpdateWithoutDocsDataInput {
  num: Int
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgUpdateOneWithoutEnquiriesInput
  model: ModelUpdateOneWithoutEnquiriesInput
  events: EventUpdateManyWithoutEnquiryInput
  orders: OrderUpdateManyWithoutEnquiryInput
  status: StatusUpdateOneInput
}

input EnquiryUpdateWithoutEventsDataInput {
  num: Int
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgUpdateOneWithoutEnquiriesInput
  model: ModelUpdateOneWithoutEnquiriesInput
  orders: OrderUpdateManyWithoutEnquiryInput
  docs: DocUpdateManyWithoutEnquiryInput
  status: StatusUpdateOneInput
}

input EnquiryUpdateWithoutModelDataInput {
  num: Int
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgUpdateOneWithoutEnquiriesInput
  events: EventUpdateManyWithoutEnquiryInput
  orders: OrderUpdateManyWithoutEnquiryInput
  docs: DocUpdateManyWithoutEnquiryInput
  status: StatusUpdateOneInput
}

input EnquiryUpdateWithoutOrdersDataInput {
  num: Int
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgUpdateOneWithoutEnquiriesInput
  model: ModelUpdateOneWithoutEnquiriesInput
  events: EventUpdateManyWithoutEnquiryInput
  docs: DocUpdateManyWithoutEnquiryInput
  status: StatusUpdateOneInput
}

input EnquiryUpdateWithoutOrgDataInput {
  num: Int
  dateLocal: String
  qty: Int
  htmlNote: String
  model: ModelUpdateOneWithoutEnquiriesInput
  events: EventUpdateManyWithoutEnquiryInput
  orders: OrderUpdateManyWithoutEnquiryInput
  docs: DocUpdateManyWithoutEnquiryInput
  status: StatusUpdateOneInput
}

input EnquiryUpdateWithWhereUniqueWithoutModelInput {
  where: EnquiryWhereUniqueInput!
  data: EnquiryUpdateWithoutModelDataInput!
}

input EnquiryUpdateWithWhereUniqueWithoutOrgInput {
  where: EnquiryWhereUniqueInput!
  data: EnquiryUpdateWithoutOrgDataInput!
}

input EnquiryUpsertWithoutDocsInput {
  update: EnquiryUpdateWithoutDocsDataInput!
  create: EnquiryCreateWithoutDocsInput!
}

input EnquiryUpsertWithoutEventsInput {
  update: EnquiryUpdateWithoutEventsDataInput!
  create: EnquiryCreateWithoutEventsInput!
}

input EnquiryUpsertWithoutOrdersInput {
  update: EnquiryUpdateWithoutOrdersDataInput!
  create: EnquiryCreateWithoutOrdersInput!
}

input EnquiryUpsertWithWhereUniqueWithoutModelInput {
  where: EnquiryWhereUniqueInput!
  update: EnquiryUpdateWithoutModelDataInput!
  create: EnquiryCreateWithoutModelInput!
}

input EnquiryUpsertWithWhereUniqueWithoutOrgInput {
  where: EnquiryWhereUniqueInput!
  update: EnquiryUpdateWithoutOrgDataInput!
  create: EnquiryCreateWithoutOrgInput!
}

input EnquiryWhereInput {
  """Logical AND on all given filters."""
  AND: [EnquiryWhereInput!]

  """Logical OR on all given filters."""
  OR: [EnquiryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EnquiryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  num: Int

  """All values that are not equal to given value."""
  num_not: Int

  """All values that are contained in given list."""
  num_in: [Int!]

  """All values that are not contained in given list."""
  num_not_in: [Int!]

  """All values less than the given value."""
  num_lt: Int

  """All values less than or equal the given value."""
  num_lte: Int

  """All values greater than the given value."""
  num_gt: Int

  """All values greater than or equal the given value."""
  num_gte: Int
  dateLocal: String

  """All values that are not equal to given value."""
  dateLocal_not: String

  """All values that are contained in given list."""
  dateLocal_in: [String!]

  """All values that are not contained in given list."""
  dateLocal_not_in: [String!]

  """All values less than the given value."""
  dateLocal_lt: String

  """All values less than or equal the given value."""
  dateLocal_lte: String

  """All values greater than the given value."""
  dateLocal_gt: String

  """All values greater than or equal the given value."""
  dateLocal_gte: String

  """All values containing the given string."""
  dateLocal_contains: String

  """All values not containing the given string."""
  dateLocal_not_contains: String

  """All values starting with the given string."""
  dateLocal_starts_with: String

  """All values not starting with the given string."""
  dateLocal_not_starts_with: String

  """All values ending with the given string."""
  dateLocal_ends_with: String

  """All values not ending with the given string."""
  dateLocal_not_ends_with: String
  qty: Int

  """All values that are not equal to given value."""
  qty_not: Int

  """All values that are contained in given list."""
  qty_in: [Int!]

  """All values that are not contained in given list."""
  qty_not_in: [Int!]

  """All values less than the given value."""
  qty_lt: Int

  """All values less than or equal the given value."""
  qty_lte: Int

  """All values greater than the given value."""
  qty_gt: Int

  """All values greater than or equal the given value."""
  qty_gte: Int
  htmlNote: String

  """All values that are not equal to given value."""
  htmlNote_not: String

  """All values that are contained in given list."""
  htmlNote_in: [String!]

  """All values that are not contained in given list."""
  htmlNote_not_in: [String!]

  """All values less than the given value."""
  htmlNote_lt: String

  """All values less than or equal the given value."""
  htmlNote_lte: String

  """All values greater than the given value."""
  htmlNote_gt: String

  """All values greater than or equal the given value."""
  htmlNote_gte: String

  """All values containing the given string."""
  htmlNote_contains: String

  """All values not containing the given string."""
  htmlNote_not_contains: String

  """All values starting with the given string."""
  htmlNote_starts_with: String

  """All values not starting with the given string."""
  htmlNote_not_starts_with: String

  """All values ending with the given string."""
  htmlNote_ends_with: String

  """All values not ending with the given string."""
  htmlNote_not_ends_with: String
  org: OrgWhereInput
  model: ModelWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  docs_every: DocWhereInput
  docs_some: DocWhereInput
  docs_none: DocWhereInput
  status: StatusWhereInput
}

input EnquiryWhereUniqueInput {
  id: ID
}

type Event implements Node {
  id: ID!
  user: User
  enquiry: Enquiry
  order: Order
  datetimeLocal: String!
  htmlText: String
  type: EventType
  status: Status
  doc: Doc
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  datetimeLocal: String!
  htmlText: String
  type: EventType
  user: UserCreateOneWithoutEventsInput
  enquiry: EnquiryCreateOneWithoutEventsInput
  order: OrderCreateOneWithoutEventsInput
  status: StatusCreateOneInput
  doc: DocCreateOneInput
}

input EventCreateManyWithoutEnquiryInput {
  create: [EventCreateWithoutEnquiryInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutOrderInput {
  create: [EventCreateWithoutOrderInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutUserInput {
  create: [EventCreateWithoutUserInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutEnquiryInput {
  datetimeLocal: String!
  htmlText: String
  type: EventType
  user: UserCreateOneWithoutEventsInput
  order: OrderCreateOneWithoutEventsInput
  status: StatusCreateOneInput
  doc: DocCreateOneInput
}

input EventCreateWithoutOrderInput {
  datetimeLocal: String!
  htmlText: String
  type: EventType
  user: UserCreateOneWithoutEventsInput
  enquiry: EnquiryCreateOneWithoutEventsInput
  status: StatusCreateOneInput
  doc: DocCreateOneInput
}

input EventCreateWithoutUserInput {
  datetimeLocal: String!
  htmlText: String
  type: EventType
  enquiry: EnquiryCreateOneWithoutEventsInput
  order: OrderCreateOneWithoutEventsInput
  status: StatusCreateOneInput
  doc: DocCreateOneInput
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  datetimeLocal_ASC
  datetimeLocal_DESC
  htmlText_ASC
  htmlText_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  datetimeLocal: String!
  htmlText: String
  type: EventType
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

enum EventType {
  CREATE
  UPDATE
  STATUS
  COMMENT
}

input EventUpdateInput {
  datetimeLocal: String
  htmlText: String
  type: EventType
  user: UserUpdateOneWithoutEventsInput
  enquiry: EnquiryUpdateOneWithoutEventsInput
  order: OrderUpdateOneWithoutEventsInput
  status: StatusUpdateOneInput
  doc: DocUpdateOneInput
}

input EventUpdateManyMutationInput {
  datetimeLocal: String
  htmlText: String
  type: EventType
}

input EventUpdateManyWithoutEnquiryInput {
  create: [EventCreateWithoutEnquiryInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutEnquiryInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutEnquiryInput!]
}

input EventUpdateManyWithoutOrderInput {
  create: [EventCreateWithoutOrderInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutOrderInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutOrderInput!]
}

input EventUpdateManyWithoutUserInput {
  create: [EventCreateWithoutUserInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutUserInput!]
}

input EventUpdateWithoutEnquiryDataInput {
  datetimeLocal: String
  htmlText: String
  type: EventType
  user: UserUpdateOneWithoutEventsInput
  order: OrderUpdateOneWithoutEventsInput
  status: StatusUpdateOneInput
  doc: DocUpdateOneInput
}

input EventUpdateWithoutOrderDataInput {
  datetimeLocal: String
  htmlText: String
  type: EventType
  user: UserUpdateOneWithoutEventsInput
  enquiry: EnquiryUpdateOneWithoutEventsInput
  status: StatusUpdateOneInput
  doc: DocUpdateOneInput
}

input EventUpdateWithoutUserDataInput {
  datetimeLocal: String
  htmlText: String
  type: EventType
  enquiry: EnquiryUpdateOneWithoutEventsInput
  order: OrderUpdateOneWithoutEventsInput
  status: StatusUpdateOneInput
  doc: DocUpdateOneInput
}

input EventUpdateWithWhereUniqueWithoutEnquiryInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutEnquiryDataInput!
}

input EventUpdateWithWhereUniqueWithoutOrderInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutOrderDataInput!
}

input EventUpdateWithWhereUniqueWithoutUserInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutUserDataInput!
}

input EventUpsertWithWhereUniqueWithoutEnquiryInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutEnquiryDataInput!
  create: EventCreateWithoutEnquiryInput!
}

input EventUpsertWithWhereUniqueWithoutOrderInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutOrderDataInput!
  create: EventCreateWithoutOrderInput!
}

input EventUpsertWithWhereUniqueWithoutUserInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutUserDataInput!
  create: EventCreateWithoutUserInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  datetimeLocal: String

  """All values that are not equal to given value."""
  datetimeLocal_not: String

  """All values that are contained in given list."""
  datetimeLocal_in: [String!]

  """All values that are not contained in given list."""
  datetimeLocal_not_in: [String!]

  """All values less than the given value."""
  datetimeLocal_lt: String

  """All values less than or equal the given value."""
  datetimeLocal_lte: String

  """All values greater than the given value."""
  datetimeLocal_gt: String

  """All values greater than or equal the given value."""
  datetimeLocal_gte: String

  """All values containing the given string."""
  datetimeLocal_contains: String

  """All values not containing the given string."""
  datetimeLocal_not_contains: String

  """All values starting with the given string."""
  datetimeLocal_starts_with: String

  """All values not starting with the given string."""
  datetimeLocal_not_starts_with: String

  """All values ending with the given string."""
  datetimeLocal_ends_with: String

  """All values not ending with the given string."""
  datetimeLocal_not_ends_with: String
  htmlText: String

  """All values that are not equal to given value."""
  htmlText_not: String

  """All values that are contained in given list."""
  htmlText_in: [String!]

  """All values that are not contained in given list."""
  htmlText_not_in: [String!]

  """All values less than the given value."""
  htmlText_lt: String

  """All values less than or equal the given value."""
  htmlText_lte: String

  """All values greater than the given value."""
  htmlText_gt: String

  """All values greater than or equal the given value."""
  htmlText_gte: String

  """All values containing the given string."""
  htmlText_contains: String

  """All values not containing the given string."""
  htmlText_not_contains: String

  """All values starting with the given string."""
  htmlText_starts_with: String

  """All values not starting with the given string."""
  htmlText_not_starts_with: String

  """All values ending with the given string."""
  htmlText_ends_with: String

  """All values not ending with the given string."""
  htmlText_not_ends_with: String
  type: EventType

  """All values that are not equal to given value."""
  type_not: EventType

  """All values that are contained in given list."""
  type_in: [EventType!]

  """All values that are not contained in given list."""
  type_not_in: [EventType!]
  user: UserWhereInput
  enquiry: EnquiryWhereInput
  order: OrderWhereInput
  status: StatusWhereInput
  doc: DocWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

type File1 implements Node {
  id: ID!
  name: String!
  storeId: ID
}

"""A connection to a list of items."""
type File1Connection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [File1Edge]!
  aggregate: AggregateFile1!
}

input File1CreateInput {
  name: String!
  storeId: ID
}

"""An edge in a connection."""
type File1Edge {
  """The item at the end of the edge."""
  node: File1!

  """A cursor for use in pagination."""
  cursor: String!
}

enum File1OrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  storeId_ASC
  storeId_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type File1PreviousValues {
  id: ID!
  name: String!
  storeId: ID
}

type File1SubscriptionPayload {
  mutation: MutationType!
  node: File1
  updatedFields: [String!]
  previousValues: File1PreviousValues
}

input File1SubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [File1SubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [File1SubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [File1SubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: File1WhereInput
}

input File1UpdateInput {
  name: String
  storeId: ID
}

input File1UpdateManyMutationInput {
  name: String
  storeId: ID
}

input File1WhereInput {
  """Logical AND on all given filters."""
  AND: [File1WhereInput!]

  """Logical OR on all given filters."""
  OR: [File1WhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [File1WhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  storeId: ID

  """All values that are not equal to given value."""
  storeId_not: ID

  """All values that are contained in given list."""
  storeId_in: [ID!]

  """All values that are not contained in given list."""
  storeId_not_in: [ID!]

  """All values less than the given value."""
  storeId_lt: ID

  """All values less than or equal the given value."""
  storeId_lte: ID

  """All values greater than the given value."""
  storeId_gt: ID

  """All values greater than or equal the given value."""
  storeId_gte: ID

  """All values containing the given string."""
  storeId_contains: ID

  """All values not containing the given string."""
  storeId_not_contains: ID

  """All values starting with the given string."""
  storeId_starts_with: ID

  """All values not starting with the given string."""
  storeId_not_starts_with: ID

  """All values ending with the given string."""
  storeId_ends_with: ID

  """All values not ending with the given string."""
  storeId_not_ends_with: ID
}

input File1WhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Model implements Node {
  id: ID!
  article: String
  name: String!
  enquiries(where: EnquiryWhereInput, orderBy: EnquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Enquiry!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  prods(where: ProdWhereInput, orderBy: ProdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prod!]
}

"""A connection to a list of items."""
type ModelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ModelEdge]!
  aggregate: AggregateModel!
}

input ModelCreateInput {
  article: String
  name: String!
  enquiries: EnquiryCreateManyWithoutModelInput
  orders: OrderCreateManyWithoutModelInput
  prods: ProdCreateManyWithoutModelInput
}

input ModelCreateOneWithoutEnquiriesInput {
  create: ModelCreateWithoutEnquiriesInput
  connect: ModelWhereUniqueInput
}

input ModelCreateOneWithoutOrdersInput {
  create: ModelCreateWithoutOrdersInput
  connect: ModelWhereUniqueInput
}

input ModelCreateOneWithoutProdsInput {
  create: ModelCreateWithoutProdsInput
  connect: ModelWhereUniqueInput
}

input ModelCreateWithoutEnquiriesInput {
  article: String
  name: String!
  orders: OrderCreateManyWithoutModelInput
  prods: ProdCreateManyWithoutModelInput
}

input ModelCreateWithoutOrdersInput {
  article: String
  name: String!
  enquiries: EnquiryCreateManyWithoutModelInput
  prods: ProdCreateManyWithoutModelInput
}

input ModelCreateWithoutProdsInput {
  article: String
  name: String!
  enquiries: EnquiryCreateManyWithoutModelInput
  orders: OrderCreateManyWithoutModelInput
}

"""An edge in a connection."""
type ModelEdge {
  """The item at the end of the edge."""
  node: Model!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ModelOrderByInput {
  id_ASC
  id_DESC
  article_ASC
  article_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ModelPreviousValues {
  id: ID!
  article: String
  name: String!
}

type ModelSubscriptionPayload {
  mutation: MutationType!
  node: Model
  updatedFields: [String!]
  previousValues: ModelPreviousValues
}

input ModelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ModelSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ModelSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ModelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ModelWhereInput
}

input ModelUpdateInput {
  article: String
  name: String
  enquiries: EnquiryUpdateManyWithoutModelInput
  orders: OrderUpdateManyWithoutModelInput
  prods: ProdUpdateManyWithoutModelInput
}

input ModelUpdateManyMutationInput {
  article: String
  name: String
}

input ModelUpdateOneRequiredWithoutProdsInput {
  create: ModelCreateWithoutProdsInput
  connect: ModelWhereUniqueInput
  update: ModelUpdateWithoutProdsDataInput
  upsert: ModelUpsertWithoutProdsInput
}

input ModelUpdateOneWithoutEnquiriesInput {
  create: ModelCreateWithoutEnquiriesInput
  connect: ModelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ModelUpdateWithoutEnquiriesDataInput
  upsert: ModelUpsertWithoutEnquiriesInput
}

input ModelUpdateOneWithoutOrdersInput {
  create: ModelCreateWithoutOrdersInput
  connect: ModelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ModelUpdateWithoutOrdersDataInput
  upsert: ModelUpsertWithoutOrdersInput
}

input ModelUpdateWithoutEnquiriesDataInput {
  article: String
  name: String
  orders: OrderUpdateManyWithoutModelInput
  prods: ProdUpdateManyWithoutModelInput
}

input ModelUpdateWithoutOrdersDataInput {
  article: String
  name: String
  enquiries: EnquiryUpdateManyWithoutModelInput
  prods: ProdUpdateManyWithoutModelInput
}

input ModelUpdateWithoutProdsDataInput {
  article: String
  name: String
  enquiries: EnquiryUpdateManyWithoutModelInput
  orders: OrderUpdateManyWithoutModelInput
}

input ModelUpsertWithoutEnquiriesInput {
  update: ModelUpdateWithoutEnquiriesDataInput!
  create: ModelCreateWithoutEnquiriesInput!
}

input ModelUpsertWithoutOrdersInput {
  update: ModelUpdateWithoutOrdersDataInput!
  create: ModelCreateWithoutOrdersInput!
}

input ModelUpsertWithoutProdsInput {
  update: ModelUpdateWithoutProdsDataInput!
  create: ModelCreateWithoutProdsInput!
}

input ModelWhereInput {
  """Logical AND on all given filters."""
  AND: [ModelWhereInput!]

  """Logical OR on all given filters."""
  OR: [ModelWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ModelWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  article: String

  """All values that are not equal to given value."""
  article_not: String

  """All values that are contained in given list."""
  article_in: [String!]

  """All values that are not contained in given list."""
  article_not_in: [String!]

  """All values less than the given value."""
  article_lt: String

  """All values less than or equal the given value."""
  article_lte: String

  """All values greater than the given value."""
  article_gt: String

  """All values greater than or equal the given value."""
  article_gte: String

  """All values containing the given string."""
  article_contains: String

  """All values not containing the given string."""
  article_not_contains: String

  """All values starting with the given string."""
  article_starts_with: String

  """All values not starting with the given string."""
  article_not_starts_with: String

  """All values ending with the given string."""
  article_ends_with: String

  """All values not ending with the given string."""
  article_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  enquiries_every: EnquiryWhereInput
  enquiries_some: EnquiryWhereInput
  enquiries_none: EnquiryWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  prods_every: ProdWhereInput
  prods_some: ProdWhereInput
  prods_none: ProdWhereInput
}

input ModelWhereUniqueInput {
  id: ID
  name: String
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPerson(data: PersonCreateInput!): Person!
  createOrg(data: OrgCreateInput!): Org!
  createDept(data: DeptCreateInput!): Dept!
  createEnquiry(data: EnquiryCreateInput!): Enquiry!
  createFile1(data: File1CreateInput!): File1!
  createEvent(data: EventCreateInput!): Event!
  createOrder(data: OrderCreateInput!): Order!
  createModel(data: ModelCreateInput!): Model!
  createProd(data: ProdCreateInput!): Prod!
  createStatus(data: StatusCreateInput!): Status!
  createDoc(data: DocCreateInput!): Doc!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateOrg(data: OrgUpdateInput!, where: OrgWhereUniqueInput!): Org
  updateDept(data: DeptUpdateInput!, where: DeptWhereUniqueInput!): Dept
  updateEnquiry(data: EnquiryUpdateInput!, where: EnquiryWhereUniqueInput!): Enquiry
  updateFile1(data: File1UpdateInput!, where: File1WhereUniqueInput!): File1
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateModel(data: ModelUpdateInput!, where: ModelWhereUniqueInput!): Model
  updateProd(data: ProdUpdateInput!, where: ProdWhereUniqueInput!): Prod
  updateStatus(data: StatusUpdateInput!, where: StatusWhereUniqueInput!): Status
  updateDoc(data: DocUpdateInput!, where: DocWhereUniqueInput!): Doc
  deleteUser(where: UserWhereUniqueInput!): User
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteOrg(where: OrgWhereUniqueInput!): Org
  deleteDept(where: DeptWhereUniqueInput!): Dept
  deleteEnquiry(where: EnquiryWhereUniqueInput!): Enquiry
  deleteFile1(where: File1WhereUniqueInput!): File1
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteModel(where: ModelWhereUniqueInput!): Model
  deleteProd(where: ProdWhereUniqueInput!): Prod
  deleteStatus(where: StatusWhereUniqueInput!): Status
  deleteDoc(where: DocWhereUniqueInput!): Doc
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  upsertOrg(where: OrgWhereUniqueInput!, create: OrgCreateInput!, update: OrgUpdateInput!): Org!
  upsertDept(where: DeptWhereUniqueInput!, create: DeptCreateInput!, update: DeptUpdateInput!): Dept!
  upsertEnquiry(where: EnquiryWhereUniqueInput!, create: EnquiryCreateInput!, update: EnquiryUpdateInput!): Enquiry!
  upsertFile1(where: File1WhereUniqueInput!, create: File1CreateInput!, update: File1UpdateInput!): File1!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  upsertModel(where: ModelWhereUniqueInput!, create: ModelCreateInput!, update: ModelUpdateInput!): Model!
  upsertProd(where: ProdWhereUniqueInput!, create: ProdCreateInput!, update: ProdUpdateInput!): Prod!
  upsertStatus(where: StatusWhereUniqueInput!, create: StatusCreateInput!, update: StatusUpdateInput!): Status!
  upsertDoc(where: DocWhereUniqueInput!, create: DocCreateInput!, update: DocUpdateInput!): Doc!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyPersons(data: PersonUpdateManyMutationInput!, where: PersonWhereInput): BatchPayload!
  updateManyOrgs(data: OrgUpdateManyMutationInput!, where: OrgWhereInput): BatchPayload!
  updateManyDepts(data: DeptUpdateManyMutationInput!, where: DeptWhereInput): BatchPayload!
  updateManyEnquiries(data: EnquiryUpdateManyMutationInput!, where: EnquiryWhereInput): BatchPayload!
  updateManyFile1s(data: File1UpdateManyMutationInput!, where: File1WhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  updateManyModels(data: ModelUpdateManyMutationInput!, where: ModelWhereInput): BatchPayload!
  updateManyProds(data: ProdUpdateManyMutationInput!, where: ProdWhereInput): BatchPayload!
  updateManyStatuses(data: StatusUpdateManyMutationInput!, where: StatusWhereInput): BatchPayload!
  updateManyDocs(data: DocUpdateManyMutationInput!, where: DocWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  deleteManyOrgs(where: OrgWhereInput): BatchPayload!
  deleteManyDepts(where: DeptWhereInput): BatchPayload!
  deleteManyEnquiries(where: EnquiryWhereInput): BatchPayload!
  deleteManyFile1s(where: File1WhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyModels(where: ModelWhereInput): BatchPayload!
  deleteManyProds(where: ProdWhereInput): BatchPayload!
  deleteManyStatuses(where: StatusWhereInput): BatchPayload!
  deleteManyDocs(where: DocWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Order implements Node {
  id: ID!
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: Enquiry
  org: Org
  model: Model
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  prods(where: ProdWhereInput, orderBy: ProdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prod!]
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryCreateOneWithoutOrdersInput
  org: OrgCreateOneWithoutOrdersInput
  model: ModelCreateOneWithoutOrdersInput
  events: EventCreateManyWithoutOrderInput
  prods: ProdCreateManyWithoutOrderInput
}

input OrderCreateManyWithoutEnquiryInput {
  create: [OrderCreateWithoutEnquiryInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateManyWithoutModelInput {
  create: [OrderCreateWithoutModelInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateManyWithoutOrgInput {
  create: [OrderCreateWithoutOrgInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateOneWithoutEventsInput {
  create: OrderCreateWithoutEventsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateOneWithoutProdsInput {
  create: OrderCreateWithoutProdsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutEnquiryInput {
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  org: OrgCreateOneWithoutOrdersInput
  model: ModelCreateOneWithoutOrdersInput
  events: EventCreateManyWithoutOrderInput
  prods: ProdCreateManyWithoutOrderInput
}

input OrderCreateWithoutEventsInput {
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryCreateOneWithoutOrdersInput
  org: OrgCreateOneWithoutOrdersInput
  model: ModelCreateOneWithoutOrdersInput
  prods: ProdCreateManyWithoutOrderInput
}

input OrderCreateWithoutModelInput {
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryCreateOneWithoutOrdersInput
  org: OrgCreateOneWithoutOrdersInput
  events: EventCreateManyWithoutOrderInput
  prods: ProdCreateManyWithoutOrderInput
}

input OrderCreateWithoutOrgInput {
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryCreateOneWithoutOrdersInput
  model: ModelCreateOneWithoutOrdersInput
  events: EventCreateManyWithoutOrderInput
  prods: ProdCreateManyWithoutOrderInput
}

input OrderCreateWithoutProdsInput {
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryCreateOneWithoutOrdersInput
  org: OrgCreateOneWithoutOrdersInput
  model: ModelCreateOneWithoutOrdersInput
  events: EventCreateManyWithoutOrderInput
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  num_ASC
  num_DESC
  dateLocal_ASC
  dateLocal_DESC
  qty_ASC
  qty_DESC
  amount_ASC
  amount_DESC
  htmlNote_ASC
  htmlNote_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderPreviousValues {
  id: ID!
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryUpdateOneWithoutOrdersInput
  org: OrgUpdateOneWithoutOrdersInput
  model: ModelUpdateOneWithoutOrdersInput
  events: EventUpdateManyWithoutOrderInput
  prods: ProdUpdateManyWithoutOrderInput
}

input OrderUpdateManyMutationInput {
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
}

input OrderUpdateManyWithoutEnquiryInput {
  create: [OrderCreateWithoutEnquiryInput!]
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutEnquiryInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutEnquiryInput!]
}

input OrderUpdateManyWithoutModelInput {
  create: [OrderCreateWithoutModelInput!]
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutModelInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutModelInput!]
}

input OrderUpdateManyWithoutOrgInput {
  create: [OrderCreateWithoutOrgInput!]
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutOrgInput!]
}

input OrderUpdateOneWithoutEventsInput {
  create: OrderCreateWithoutEventsInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrderUpdateWithoutEventsDataInput
  upsert: OrderUpsertWithoutEventsInput
}

input OrderUpdateOneWithoutProdsInput {
  create: OrderCreateWithoutProdsInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrderUpdateWithoutProdsDataInput
  upsert: OrderUpsertWithoutProdsInput
}

input OrderUpdateWithoutEnquiryDataInput {
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  org: OrgUpdateOneWithoutOrdersInput
  model: ModelUpdateOneWithoutOrdersInput
  events: EventUpdateManyWithoutOrderInput
  prods: ProdUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutEventsDataInput {
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryUpdateOneWithoutOrdersInput
  org: OrgUpdateOneWithoutOrdersInput
  model: ModelUpdateOneWithoutOrdersInput
  prods: ProdUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutModelDataInput {
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryUpdateOneWithoutOrdersInput
  org: OrgUpdateOneWithoutOrdersInput
  events: EventUpdateManyWithoutOrderInput
  prods: ProdUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutOrgDataInput {
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryUpdateOneWithoutOrdersInput
  model: ModelUpdateOneWithoutOrdersInput
  events: EventUpdateManyWithoutOrderInput
  prods: ProdUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutProdsDataInput {
  num: Int
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryUpdateOneWithoutOrdersInput
  org: OrgUpdateOneWithoutOrdersInput
  model: ModelUpdateOneWithoutOrdersInput
  events: EventUpdateManyWithoutOrderInput
}

input OrderUpdateWithWhereUniqueWithoutEnquiryInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutEnquiryDataInput!
}

input OrderUpdateWithWhereUniqueWithoutModelInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutModelDataInput!
}

input OrderUpdateWithWhereUniqueWithoutOrgInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutOrgDataInput!
}

input OrderUpsertWithoutEventsInput {
  update: OrderUpdateWithoutEventsDataInput!
  create: OrderCreateWithoutEventsInput!
}

input OrderUpsertWithoutProdsInput {
  update: OrderUpdateWithoutProdsDataInput!
  create: OrderCreateWithoutProdsInput!
}

input OrderUpsertWithWhereUniqueWithoutEnquiryInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutEnquiryDataInput!
  create: OrderCreateWithoutEnquiryInput!
}

input OrderUpsertWithWhereUniqueWithoutModelInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutModelDataInput!
  create: OrderCreateWithoutModelInput!
}

input OrderUpsertWithWhereUniqueWithoutOrgInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutOrgDataInput!
  create: OrderCreateWithoutOrgInput!
}

input OrderWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  num: Int

  """All values that are not equal to given value."""
  num_not: Int

  """All values that are contained in given list."""
  num_in: [Int!]

  """All values that are not contained in given list."""
  num_not_in: [Int!]

  """All values less than the given value."""
  num_lt: Int

  """All values less than or equal the given value."""
  num_lte: Int

  """All values greater than the given value."""
  num_gt: Int

  """All values greater than or equal the given value."""
  num_gte: Int
  dateLocal: String

  """All values that are not equal to given value."""
  dateLocal_not: String

  """All values that are contained in given list."""
  dateLocal_in: [String!]

  """All values that are not contained in given list."""
  dateLocal_not_in: [String!]

  """All values less than the given value."""
  dateLocal_lt: String

  """All values less than or equal the given value."""
  dateLocal_lte: String

  """All values greater than the given value."""
  dateLocal_gt: String

  """All values greater than or equal the given value."""
  dateLocal_gte: String

  """All values containing the given string."""
  dateLocal_contains: String

  """All values not containing the given string."""
  dateLocal_not_contains: String

  """All values starting with the given string."""
  dateLocal_starts_with: String

  """All values not starting with the given string."""
  dateLocal_not_starts_with: String

  """All values ending with the given string."""
  dateLocal_ends_with: String

  """All values not ending with the given string."""
  dateLocal_not_ends_with: String
  qty: Int

  """All values that are not equal to given value."""
  qty_not: Int

  """All values that are contained in given list."""
  qty_in: [Int!]

  """All values that are not contained in given list."""
  qty_not_in: [Int!]

  """All values less than the given value."""
  qty_lt: Int

  """All values less than or equal the given value."""
  qty_lte: Int

  """All values greater than the given value."""
  qty_gt: Int

  """All values greater than or equal the given value."""
  qty_gte: Int
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  htmlNote: String

  """All values that are not equal to given value."""
  htmlNote_not: String

  """All values that are contained in given list."""
  htmlNote_in: [String!]

  """All values that are not contained in given list."""
  htmlNote_not_in: [String!]

  """All values less than the given value."""
  htmlNote_lt: String

  """All values less than or equal the given value."""
  htmlNote_lte: String

  """All values greater than the given value."""
  htmlNote_gt: String

  """All values greater than or equal the given value."""
  htmlNote_gte: String

  """All values containing the given string."""
  htmlNote_contains: String

  """All values not containing the given string."""
  htmlNote_not_contains: String

  """All values starting with the given string."""
  htmlNote_starts_with: String

  """All values not starting with the given string."""
  htmlNote_not_starts_with: String

  """All values ending with the given string."""
  htmlNote_ends_with: String

  """All values not ending with the given string."""
  htmlNote_not_ends_with: String
  enquiry: EnquiryWhereInput
  org: OrgWhereInput
  model: ModelWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  prods_every: ProdWhereInput
  prods_some: ProdWhereInput
  prods_none: ProdWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

type Org implements Node {
  id: ID!
  inn: String
  moedeloId: String
  name: String!
  legalAddress: String
  enquiries(where: EnquiryWhereInput, orderBy: EnquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Enquiry!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
}

"""A connection to a list of items."""
type OrgConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrgEdge]!
  aggregate: AggregateOrg!
}

input OrgCreateInput {
  inn: String
  moedeloId: String
  name: String!
  legalAddress: String
  enquiries: EnquiryCreateManyWithoutOrgInput
  orders: OrderCreateManyWithoutOrgInput
}

input OrgCreateOneWithoutEnquiriesInput {
  create: OrgCreateWithoutEnquiriesInput
  connect: OrgWhereUniqueInput
}

input OrgCreateOneWithoutOrdersInput {
  create: OrgCreateWithoutOrdersInput
  connect: OrgWhereUniqueInput
}

input OrgCreateWithoutEnquiriesInput {
  inn: String
  moedeloId: String
  name: String!
  legalAddress: String
  orders: OrderCreateManyWithoutOrgInput
}

input OrgCreateWithoutOrdersInput {
  inn: String
  moedeloId: String
  name: String!
  legalAddress: String
  enquiries: EnquiryCreateManyWithoutOrgInput
}

"""An edge in a connection."""
type OrgEdge {
  """The item at the end of the edge."""
  node: Org!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrgOrderByInput {
  id_ASC
  id_DESC
  inn_ASC
  inn_DESC
  moedeloId_ASC
  moedeloId_DESC
  name_ASC
  name_DESC
  legalAddress_ASC
  legalAddress_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrgPreviousValues {
  id: ID!
  inn: String
  moedeloId: String
  name: String!
  legalAddress: String
}

type OrgSubscriptionPayload {
  mutation: MutationType!
  node: Org
  updatedFields: [String!]
  previousValues: OrgPreviousValues
}

input OrgSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrgSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrgSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrgSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrgWhereInput
}

input OrgUpdateInput {
  inn: String
  moedeloId: String
  name: String
  legalAddress: String
  enquiries: EnquiryUpdateManyWithoutOrgInput
  orders: OrderUpdateManyWithoutOrgInput
}

input OrgUpdateManyMutationInput {
  inn: String
  moedeloId: String
  name: String
  legalAddress: String
}

input OrgUpdateOneWithoutEnquiriesInput {
  create: OrgCreateWithoutEnquiriesInput
  connect: OrgWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrgUpdateWithoutEnquiriesDataInput
  upsert: OrgUpsertWithoutEnquiriesInput
}

input OrgUpdateOneWithoutOrdersInput {
  create: OrgCreateWithoutOrdersInput
  connect: OrgWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrgUpdateWithoutOrdersDataInput
  upsert: OrgUpsertWithoutOrdersInput
}

input OrgUpdateWithoutEnquiriesDataInput {
  inn: String
  moedeloId: String
  name: String
  legalAddress: String
  orders: OrderUpdateManyWithoutOrgInput
}

input OrgUpdateWithoutOrdersDataInput {
  inn: String
  moedeloId: String
  name: String
  legalAddress: String
  enquiries: EnquiryUpdateManyWithoutOrgInput
}

input OrgUpsertWithoutEnquiriesInput {
  update: OrgUpdateWithoutEnquiriesDataInput!
  create: OrgCreateWithoutEnquiriesInput!
}

input OrgUpsertWithoutOrdersInput {
  update: OrgUpdateWithoutOrdersDataInput!
  create: OrgCreateWithoutOrdersInput!
}

input OrgWhereInput {
  """Logical AND on all given filters."""
  AND: [OrgWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrgWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrgWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  inn: String

  """All values that are not equal to given value."""
  inn_not: String

  """All values that are contained in given list."""
  inn_in: [String!]

  """All values that are not contained in given list."""
  inn_not_in: [String!]

  """All values less than the given value."""
  inn_lt: String

  """All values less than or equal the given value."""
  inn_lte: String

  """All values greater than the given value."""
  inn_gt: String

  """All values greater than or equal the given value."""
  inn_gte: String

  """All values containing the given string."""
  inn_contains: String

  """All values not containing the given string."""
  inn_not_contains: String

  """All values starting with the given string."""
  inn_starts_with: String

  """All values not starting with the given string."""
  inn_not_starts_with: String

  """All values ending with the given string."""
  inn_ends_with: String

  """All values not ending with the given string."""
  inn_not_ends_with: String
  moedeloId: String

  """All values that are not equal to given value."""
  moedeloId_not: String

  """All values that are contained in given list."""
  moedeloId_in: [String!]

  """All values that are not contained in given list."""
  moedeloId_not_in: [String!]

  """All values less than the given value."""
  moedeloId_lt: String

  """All values less than or equal the given value."""
  moedeloId_lte: String

  """All values greater than the given value."""
  moedeloId_gt: String

  """All values greater than or equal the given value."""
  moedeloId_gte: String

  """All values containing the given string."""
  moedeloId_contains: String

  """All values not containing the given string."""
  moedeloId_not_contains: String

  """All values starting with the given string."""
  moedeloId_starts_with: String

  """All values not starting with the given string."""
  moedeloId_not_starts_with: String

  """All values ending with the given string."""
  moedeloId_ends_with: String

  """All values not ending with the given string."""
  moedeloId_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  legalAddress: String

  """All values that are not equal to given value."""
  legalAddress_not: String

  """All values that are contained in given list."""
  legalAddress_in: [String!]

  """All values that are not contained in given list."""
  legalAddress_not_in: [String!]

  """All values less than the given value."""
  legalAddress_lt: String

  """All values less than or equal the given value."""
  legalAddress_lte: String

  """All values greater than the given value."""
  legalAddress_gt: String

  """All values greater than or equal the given value."""
  legalAddress_gte: String

  """All values containing the given string."""
  legalAddress_contains: String

  """All values not containing the given string."""
  legalAddress_not_contains: String

  """All values starting with the given string."""
  legalAddress_starts_with: String

  """All values not starting with the given string."""
  legalAddress_not_starts_with: String

  """All values ending with the given string."""
  legalAddress_ends_with: String

  """All values not ending with the given string."""
  legalAddress_not_ends_with: String
  enquiries_every: EnquiryWhereInput
  enquiries_some: EnquiryWhereInput
  enquiries_none: EnquiryWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
}

input OrgWhereUniqueInput {
  id: ID
  inn: String
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Person implements Node {
  id: ID!
  fName: String!
  lName: String
  mName: String
  regName: String
  user: User
}

"""A connection to a list of items."""
type PersonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  fName: String!
  lName: String
  mName: String
  regName: String
  user: UserCreateOneWithoutPersonInput
}

input PersonCreateOneWithoutUserInput {
  create: PersonCreateWithoutUserInput
  connect: PersonWhereUniqueInput
}

input PersonCreateWithoutUserInput {
  fName: String!
  lName: String
  mName: String
  regName: String
}

"""An edge in a connection."""
type PersonEdge {
  """The item at the end of the edge."""
  node: Person!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  fName_ASC
  fName_DESC
  lName_ASC
  lName_DESC
  mName_ASC
  mName_DESC
  regName_ASC
  regName_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PersonPreviousValues {
  id: ID!
  fName: String!
  lName: String
  mName: String
  regName: String
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
}

input PersonUpdateInput {
  fName: String
  lName: String
  mName: String
  regName: String
  user: UserUpdateOneWithoutPersonInput
}

input PersonUpdateManyMutationInput {
  fName: String
  lName: String
  mName: String
  regName: String
}

input PersonUpdateOneWithoutUserInput {
  create: PersonCreateWithoutUserInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PersonUpdateWithoutUserDataInput
  upsert: PersonUpsertWithoutUserInput
}

input PersonUpdateWithoutUserDataInput {
  fName: String
  lName: String
  mName: String
  regName: String
}

input PersonUpsertWithoutUserInput {
  update: PersonUpdateWithoutUserDataInput!
  create: PersonCreateWithoutUserInput!
}

input PersonWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  fName: String

  """All values that are not equal to given value."""
  fName_not: String

  """All values that are contained in given list."""
  fName_in: [String!]

  """All values that are not contained in given list."""
  fName_not_in: [String!]

  """All values less than the given value."""
  fName_lt: String

  """All values less than or equal the given value."""
  fName_lte: String

  """All values greater than the given value."""
  fName_gt: String

  """All values greater than or equal the given value."""
  fName_gte: String

  """All values containing the given string."""
  fName_contains: String

  """All values not containing the given string."""
  fName_not_contains: String

  """All values starting with the given string."""
  fName_starts_with: String

  """All values not starting with the given string."""
  fName_not_starts_with: String

  """All values ending with the given string."""
  fName_ends_with: String

  """All values not ending with the given string."""
  fName_not_ends_with: String
  lName: String

  """All values that are not equal to given value."""
  lName_not: String

  """All values that are contained in given list."""
  lName_in: [String!]

  """All values that are not contained in given list."""
  lName_not_in: [String!]

  """All values less than the given value."""
  lName_lt: String

  """All values less than or equal the given value."""
  lName_lte: String

  """All values greater than the given value."""
  lName_gt: String

  """All values greater than or equal the given value."""
  lName_gte: String

  """All values containing the given string."""
  lName_contains: String

  """All values not containing the given string."""
  lName_not_contains: String

  """All values starting with the given string."""
  lName_starts_with: String

  """All values not starting with the given string."""
  lName_not_starts_with: String

  """All values ending with the given string."""
  lName_ends_with: String

  """All values not ending with the given string."""
  lName_not_ends_with: String
  mName: String

  """All values that are not equal to given value."""
  mName_not: String

  """All values that are contained in given list."""
  mName_in: [String!]

  """All values that are not contained in given list."""
  mName_not_in: [String!]

  """All values less than the given value."""
  mName_lt: String

  """All values less than or equal the given value."""
  mName_lte: String

  """All values greater than the given value."""
  mName_gt: String

  """All values greater than or equal the given value."""
  mName_gte: String

  """All values containing the given string."""
  mName_contains: String

  """All values not containing the given string."""
  mName_not_contains: String

  """All values starting with the given string."""
  mName_starts_with: String

  """All values not starting with the given string."""
  mName_not_starts_with: String

  """All values ending with the given string."""
  mName_ends_with: String

  """All values not ending with the given string."""
  mName_not_ends_with: String
  regName: String

  """All values that are not equal to given value."""
  regName_not: String

  """All values that are contained in given list."""
  regName_in: [String!]

  """All values that are not contained in given list."""
  regName_not_in: [String!]

  """All values less than the given value."""
  regName_lt: String

  """All values less than or equal the given value."""
  regName_lte: String

  """All values greater than the given value."""
  regName_gt: String

  """All values greater than or equal the given value."""
  regName_gte: String

  """All values containing the given string."""
  regName_contains: String

  """All values not containing the given string."""
  regName_not_contains: String

  """All values starting with the given string."""
  regName_starts_with: String

  """All values not starting with the given string."""
  regName_not_starts_with: String

  """All values ending with the given string."""
  regName_ends_with: String

  """All values not ending with the given string."""
  regName_not_ends_with: String
  user: UserWhereInput
}

input PersonWhereUniqueInput {
  id: ID
}

type Prod implements Node {
  id: ID!
  dept: Dept!
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  model: Model!
  order: Order
  htmlNote: String
  number: Int
  progress: Float
  year: Int
}

"""A connection to a list of items."""
type ProdConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProdEdge]!
  aggregate: AggregateProd!
}

input ProdCreateInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  dept: DeptCreateOneWithoutProdsInput!
  model: ModelCreateOneWithoutProdsInput!
  order: OrderCreateOneWithoutProdsInput
}

input ProdCreateManyWithoutDeptInput {
  create: [ProdCreateWithoutDeptInput!]
  connect: [ProdWhereUniqueInput!]
}

input ProdCreateManyWithoutModelInput {
  create: [ProdCreateWithoutModelInput!]
  connect: [ProdWhereUniqueInput!]
}

input ProdCreateManyWithoutOrderInput {
  create: [ProdCreateWithoutOrderInput!]
  connect: [ProdWhereUniqueInput!]
}

input ProdCreateWithoutDeptInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  model: ModelCreateOneWithoutProdsInput!
  order: OrderCreateOneWithoutProdsInput
}

input ProdCreateWithoutModelInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  dept: DeptCreateOneWithoutProdsInput!
  order: OrderCreateOneWithoutProdsInput
}

input ProdCreateWithoutOrderInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  dept: DeptCreateOneWithoutProdsInput!
  model: ModelCreateOneWithoutProdsInput!
}

"""An edge in a connection."""
type ProdEdge {
  """The item at the end of the edge."""
  node: Prod!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProdOrderByInput {
  id_ASC
  id_DESC
  fullnumber_ASC
  fullnumber_DESC
  hasDefect_ASC
  hasDefect_DESC
  isSpoiled_ASC
  isSpoiled_DESC
  melt_ASC
  melt_DESC
  meltShift_ASC
  meltShift_DESC
  htmlNote_ASC
  htmlNote_DESC
  number_ASC
  number_DESC
  progress_ASC
  progress_DESC
  year_ASC
  year_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProdPreviousValues {
  id: ID!
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
}

type ProdSubscriptionPayload {
  mutation: MutationType!
  node: Prod
  updatedFields: [String!]
  previousValues: ProdPreviousValues
}

input ProdSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProdSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProdSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProdSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProdWhereInput
}

input ProdUpdateInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  dept: DeptUpdateOneRequiredWithoutProdsInput
  model: ModelUpdateOneRequiredWithoutProdsInput
  order: OrderUpdateOneWithoutProdsInput
}

input ProdUpdateManyMutationInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
}

input ProdUpdateManyWithoutDeptInput {
  create: [ProdCreateWithoutDeptInput!]
  connect: [ProdWhereUniqueInput!]
  disconnect: [ProdWhereUniqueInput!]
  delete: [ProdWhereUniqueInput!]
  update: [ProdUpdateWithWhereUniqueWithoutDeptInput!]
  upsert: [ProdUpsertWithWhereUniqueWithoutDeptInput!]
}

input ProdUpdateManyWithoutModelInput {
  create: [ProdCreateWithoutModelInput!]
  connect: [ProdWhereUniqueInput!]
  disconnect: [ProdWhereUniqueInput!]
  delete: [ProdWhereUniqueInput!]
  update: [ProdUpdateWithWhereUniqueWithoutModelInput!]
  upsert: [ProdUpsertWithWhereUniqueWithoutModelInput!]
}

input ProdUpdateManyWithoutOrderInput {
  create: [ProdCreateWithoutOrderInput!]
  connect: [ProdWhereUniqueInput!]
  disconnect: [ProdWhereUniqueInput!]
  delete: [ProdWhereUniqueInput!]
  update: [ProdUpdateWithWhereUniqueWithoutOrderInput!]
  upsert: [ProdUpsertWithWhereUniqueWithoutOrderInput!]
}

input ProdUpdateWithoutDeptDataInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  model: ModelUpdateOneRequiredWithoutProdsInput
  order: OrderUpdateOneWithoutProdsInput
}

input ProdUpdateWithoutModelDataInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  dept: DeptUpdateOneRequiredWithoutProdsInput
  order: OrderUpdateOneWithoutProdsInput
}

input ProdUpdateWithoutOrderDataInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  dept: DeptUpdateOneRequiredWithoutProdsInput
  model: ModelUpdateOneRequiredWithoutProdsInput
}

input ProdUpdateWithWhereUniqueWithoutDeptInput {
  where: ProdWhereUniqueInput!
  data: ProdUpdateWithoutDeptDataInput!
}

input ProdUpdateWithWhereUniqueWithoutModelInput {
  where: ProdWhereUniqueInput!
  data: ProdUpdateWithoutModelDataInput!
}

input ProdUpdateWithWhereUniqueWithoutOrderInput {
  where: ProdWhereUniqueInput!
  data: ProdUpdateWithoutOrderDataInput!
}

input ProdUpsertWithWhereUniqueWithoutDeptInput {
  where: ProdWhereUniqueInput!
  update: ProdUpdateWithoutDeptDataInput!
  create: ProdCreateWithoutDeptInput!
}

input ProdUpsertWithWhereUniqueWithoutModelInput {
  where: ProdWhereUniqueInput!
  update: ProdUpdateWithoutModelDataInput!
  create: ProdCreateWithoutModelInput!
}

input ProdUpsertWithWhereUniqueWithoutOrderInput {
  where: ProdWhereUniqueInput!
  update: ProdUpdateWithoutOrderDataInput!
  create: ProdCreateWithoutOrderInput!
}

input ProdWhereInput {
  """Logical AND on all given filters."""
  AND: [ProdWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProdWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProdWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  fullnumber: String

  """All values that are not equal to given value."""
  fullnumber_not: String

  """All values that are contained in given list."""
  fullnumber_in: [String!]

  """All values that are not contained in given list."""
  fullnumber_not_in: [String!]

  """All values less than the given value."""
  fullnumber_lt: String

  """All values less than or equal the given value."""
  fullnumber_lte: String

  """All values greater than the given value."""
  fullnumber_gt: String

  """All values greater than or equal the given value."""
  fullnumber_gte: String

  """All values containing the given string."""
  fullnumber_contains: String

  """All values not containing the given string."""
  fullnumber_not_contains: String

  """All values starting with the given string."""
  fullnumber_starts_with: String

  """All values not starting with the given string."""
  fullnumber_not_starts_with: String

  """All values ending with the given string."""
  fullnumber_ends_with: String

  """All values not ending with the given string."""
  fullnumber_not_ends_with: String
  hasDefect: Boolean

  """All values that are not equal to given value."""
  hasDefect_not: Boolean
  isSpoiled: Boolean

  """All values that are not equal to given value."""
  isSpoiled_not: Boolean
  melt: Int

  """All values that are not equal to given value."""
  melt_not: Int

  """All values that are contained in given list."""
  melt_in: [Int!]

  """All values that are not contained in given list."""
  melt_not_in: [Int!]

  """All values less than the given value."""
  melt_lt: Int

  """All values less than or equal the given value."""
  melt_lte: Int

  """All values greater than the given value."""
  melt_gt: Int

  """All values greater than or equal the given value."""
  melt_gte: Int
  meltShift: Int

  """All values that are not equal to given value."""
  meltShift_not: Int

  """All values that are contained in given list."""
  meltShift_in: [Int!]

  """All values that are not contained in given list."""
  meltShift_not_in: [Int!]

  """All values less than the given value."""
  meltShift_lt: Int

  """All values less than or equal the given value."""
  meltShift_lte: Int

  """All values greater than the given value."""
  meltShift_gt: Int

  """All values greater than or equal the given value."""
  meltShift_gte: Int
  htmlNote: String

  """All values that are not equal to given value."""
  htmlNote_not: String

  """All values that are contained in given list."""
  htmlNote_in: [String!]

  """All values that are not contained in given list."""
  htmlNote_not_in: [String!]

  """All values less than the given value."""
  htmlNote_lt: String

  """All values less than or equal the given value."""
  htmlNote_lte: String

  """All values greater than the given value."""
  htmlNote_gt: String

  """All values greater than or equal the given value."""
  htmlNote_gte: String

  """All values containing the given string."""
  htmlNote_contains: String

  """All values not containing the given string."""
  htmlNote_not_contains: String

  """All values starting with the given string."""
  htmlNote_starts_with: String

  """All values not starting with the given string."""
  htmlNote_not_starts_with: String

  """All values ending with the given string."""
  htmlNote_ends_with: String

  """All values not ending with the given string."""
  htmlNote_not_ends_with: String
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  progress: Float

  """All values that are not equal to given value."""
  progress_not: Float

  """All values that are contained in given list."""
  progress_in: [Float!]

  """All values that are not contained in given list."""
  progress_not_in: [Float!]

  """All values less than the given value."""
  progress_lt: Float

  """All values less than or equal the given value."""
  progress_lte: Float

  """All values greater than the given value."""
  progress_gt: Float

  """All values greater than or equal the given value."""
  progress_gte: Float
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  dept: DeptWhereInput
  model: ModelWhereInput
  order: OrderWhereInput
}

input ProdWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  orgs(where: OrgWhereInput, orderBy: OrgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Org]!
  depts(where: DeptWhereInput, orderBy: DeptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dept]!
  enquiries(where: EnquiryWhereInput, orderBy: EnquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Enquiry]!
  file1s(where: File1WhereInput, orderBy: File1OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File1]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  models(where: ModelWhereInput, orderBy: ModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Model]!
  prods(where: ProdWhereInput, orderBy: ProdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prod]!
  statuses(where: StatusWhereInput, orderBy: StatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Status]!
  docs(where: DocWhereInput, orderBy: DocOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Doc]!
  user(where: UserWhereUniqueInput!): User
  person(where: PersonWhereUniqueInput!): Person
  org(where: OrgWhereUniqueInput!): Org
  dept(where: DeptWhereUniqueInput!): Dept
  enquiry(where: EnquiryWhereUniqueInput!): Enquiry
  file1(where: File1WhereUniqueInput!): File1
  event(where: EventWhereUniqueInput!): Event
  order(where: OrderWhereUniqueInput!): Order
  model(where: ModelWhereUniqueInput!): Model
  prod(where: ProdWhereUniqueInput!): Prod
  status(where: StatusWhereUniqueInput!): Status
  doc(where: DocWhereUniqueInput!): Doc
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  orgsConnection(where: OrgWhereInput, orderBy: OrgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrgConnection!
  deptsConnection(where: DeptWhereInput, orderBy: DeptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeptConnection!
  enquiriesConnection(where: EnquiryWhereInput, orderBy: EnquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EnquiryConnection!
  file1sConnection(where: File1WhereInput, orderBy: File1OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): File1Connection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  modelsConnection(where: ModelWhereInput, orderBy: ModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ModelConnection!
  prodsConnection(where: ProdWhereInput, orderBy: ProdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProdConnection!
  statusesConnection(where: StatusWhereInput, orderBy: StatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StatusConnection!
  docsConnection(where: DocWhereInput, orderBy: DocOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DocConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Status implements Node {
  id: ID!
  name: String!
  stage: Int
  prev(where: StatusWhereInput, orderBy: StatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Status!]
  next(where: StatusWhereInput, orderBy: StatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Status!]
}

"""A connection to a list of items."""
type StatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StatusEdge]!
  aggregate: AggregateStatus!
}

input StatusCreateInput {
  name: String!
  stage: Int
  prev: StatusCreateManyWithoutNextInput
  next: StatusCreateManyWithoutPrevInput
}

input StatusCreateManyWithoutNextInput {
  create: [StatusCreateWithoutNextInput!]
  connect: [StatusWhereUniqueInput!]
}

input StatusCreateManyWithoutPrevInput {
  create: [StatusCreateWithoutPrevInput!]
  connect: [StatusWhereUniqueInput!]
}

input StatusCreateOneInput {
  create: StatusCreateInput
  connect: StatusWhereUniqueInput
}

input StatusCreateWithoutNextInput {
  name: String!
  stage: Int
  prev: StatusCreateManyWithoutNextInput
}

input StatusCreateWithoutPrevInput {
  name: String!
  stage: Int
  next: StatusCreateManyWithoutPrevInput
}

"""An edge in a connection."""
type StatusEdge {
  """The item at the end of the edge."""
  node: Status!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StatusOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  stage_ASC
  stage_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StatusPreviousValues {
  id: ID!
  name: String!
  stage: Int
}

type StatusSubscriptionPayload {
  mutation: MutationType!
  node: Status
  updatedFields: [String!]
  previousValues: StatusPreviousValues
}

input StatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StatusWhereInput
}

input StatusUpdateDataInput {
  name: String
  stage: Int
  prev: StatusUpdateManyWithoutNextInput
  next: StatusUpdateManyWithoutPrevInput
}

input StatusUpdateInput {
  name: String
  stage: Int
  prev: StatusUpdateManyWithoutNextInput
  next: StatusUpdateManyWithoutPrevInput
}

input StatusUpdateManyMutationInput {
  name: String
  stage: Int
}

input StatusUpdateManyWithoutNextInput {
  create: [StatusCreateWithoutNextInput!]
  connect: [StatusWhereUniqueInput!]
  disconnect: [StatusWhereUniqueInput!]
  delete: [StatusWhereUniqueInput!]
  update: [StatusUpdateWithWhereUniqueWithoutNextInput!]
  upsert: [StatusUpsertWithWhereUniqueWithoutNextInput!]
}

input StatusUpdateManyWithoutPrevInput {
  create: [StatusCreateWithoutPrevInput!]
  connect: [StatusWhereUniqueInput!]
  disconnect: [StatusWhereUniqueInput!]
  delete: [StatusWhereUniqueInput!]
  update: [StatusUpdateWithWhereUniqueWithoutPrevInput!]
  upsert: [StatusUpsertWithWhereUniqueWithoutPrevInput!]
}

input StatusUpdateOneInput {
  create: StatusCreateInput
  connect: StatusWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StatusUpdateDataInput
  upsert: StatusUpsertNestedInput
}

input StatusUpdateWithoutNextDataInput {
  name: String
  stage: Int
  prev: StatusUpdateManyWithoutNextInput
}

input StatusUpdateWithoutPrevDataInput {
  name: String
  stage: Int
  next: StatusUpdateManyWithoutPrevInput
}

input StatusUpdateWithWhereUniqueWithoutNextInput {
  where: StatusWhereUniqueInput!
  data: StatusUpdateWithoutNextDataInput!
}

input StatusUpdateWithWhereUniqueWithoutPrevInput {
  where: StatusWhereUniqueInput!
  data: StatusUpdateWithoutPrevDataInput!
}

input StatusUpsertNestedInput {
  update: StatusUpdateDataInput!
  create: StatusCreateInput!
}

input StatusUpsertWithWhereUniqueWithoutNextInput {
  where: StatusWhereUniqueInput!
  update: StatusUpdateWithoutNextDataInput!
  create: StatusCreateWithoutNextInput!
}

input StatusUpsertWithWhereUniqueWithoutPrevInput {
  where: StatusWhereUniqueInput!
  update: StatusUpdateWithoutPrevDataInput!
  create: StatusCreateWithoutPrevInput!
}

input StatusWhereInput {
  """Logical AND on all given filters."""
  AND: [StatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  stage: Int

  """All values that are not equal to given value."""
  stage_not: Int

  """All values that are contained in given list."""
  stage_in: [Int!]

  """All values that are not contained in given list."""
  stage_not_in: [Int!]

  """All values less than the given value."""
  stage_lt: Int

  """All values less than or equal the given value."""
  stage_lte: Int

  """All values greater than the given value."""
  stage_gt: Int

  """All values greater than or equal the given value."""
  stage_gte: Int
  prev_every: StatusWhereInput
  prev_some: StatusWhereInput
  prev_none: StatusWhereInput
  next_every: StatusWhereInput
  next_some: StatusWhereInput
  next_none: StatusWhereInput
}

input StatusWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  org(where: OrgSubscriptionWhereInput): OrgSubscriptionPayload
  dept(where: DeptSubscriptionWhereInput): DeptSubscriptionPayload
  enquiry(where: EnquirySubscriptionWhereInput): EnquirySubscriptionPayload
  file1(where: File1SubscriptionWhereInput): File1SubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  model(where: ModelSubscriptionWhereInput): ModelSubscriptionPayload
  prod(where: ProdSubscriptionWhereInput): ProdSubscriptionPayload
  status(where: StatusSubscriptionWhereInput): StatusSubscriptionPayload
  doc(where: DocSubscriptionWhereInput): DocSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  person: Person
  role: UserRole
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  role: UserRole
  person: PersonCreateOneWithoutUserInput
  events: EventCreateManyWithoutUserInput
}

input UserCreateOneWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPersonInput {
  create: UserCreateWithoutPersonInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEventsInput {
  email: String!
  password: String!
  role: UserRole
  person: PersonCreateOneWithoutUserInput
}

input UserCreateWithoutPersonInput {
  email: String!
  password: String!
  role: UserRole
  events: EventCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  role: UserRole
}

enum UserRole {
  INACTIVE
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  role: UserRole
  person: PersonUpdateOneWithoutUserInput
  events: EventUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  role: UserRole
}

input UserUpdateOneWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutEventsDataInput
  upsert: UserUpsertWithoutEventsInput
}

input UserUpdateOneWithoutPersonInput {
  create: UserCreateWithoutPersonInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPersonDataInput
  upsert: UserUpsertWithoutPersonInput
}

input UserUpdateWithoutEventsDataInput {
  email: String
  password: String
  role: UserRole
  person: PersonUpdateOneWithoutUserInput
}

input UserUpdateWithoutPersonDataInput {
  email: String
  password: String
  role: UserRole
  events: EventUpdateManyWithoutUserInput
}

input UserUpsertWithoutEventsInput {
  update: UserUpdateWithoutEventsDataInput!
  create: UserCreateWithoutEventsInput!
}

input UserUpsertWithoutPersonInput {
  update: UserUpdateWithoutPersonDataInput!
  create: UserCreateWithoutPersonInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  role: UserRole

  """All values that are not equal to given value."""
  role_not: UserRole

  """All values that are contained in given list."""
  role_in: [UserRole!]

  """All values that are not contained in given list."""
  role_not_in: [UserRole!]
  person: PersonWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
