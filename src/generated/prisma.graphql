# source: http://prism-publi-13cngbwm0y9ic-2025920928.eu-west-1.elb.amazonaws.com/prisma-fargate/dev
# timestamp: Mon Aug 13 2018 23:17:19 GMT+0300 (RTZ 2 (зима))

type AggregateEnquiry {
  count: Int!
}

type AggregateOrg {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Enquiry implements Node {
  id: ID!
  num: Int
  message: String
  dateLocal: String
  org(where: OrgWhereInput): Org
}

"""A connection to a list of items."""
type EnquiryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EnquiryEdge]!
  aggregate: AggregateEnquiry!
}

input EnquiryCreateInput {
  num: Int
  message: String
  dateLocal: String
  org: OrgCreateOneWithoutEnquiriesInput
}

input EnquiryCreateManyWithoutOrgInput {
  create: [EnquiryCreateWithoutOrgInput!]
  connect: [EnquiryWhereUniqueInput!]
}

input EnquiryCreateWithoutOrgInput {
  num: Int
  message: String
  dateLocal: String
}

"""An edge in a connection."""
type EnquiryEdge {
  """The item at the end of the edge."""
  node: Enquiry!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EnquiryOrderByInput {
  id_ASC
  id_DESC
  num_ASC
  num_DESC
  message_ASC
  message_DESC
  dateLocal_ASC
  dateLocal_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EnquiryPreviousValues {
  id: ID!
  num: Int
  message: String
  dateLocal: String
}

type EnquirySubscriptionPayload {
  mutation: MutationType!
  node: Enquiry
  updatedFields: [String!]
  previousValues: EnquiryPreviousValues
}

input EnquirySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EnquirySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EnquirySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EnquirySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EnquiryWhereInput
}

input EnquiryUpdateInput {
  num: Int
  message: String
  dateLocal: String
  org: OrgUpdateOneWithoutEnquiriesInput
}

input EnquiryUpdateManyWithoutOrgInput {
  create: [EnquiryCreateWithoutOrgInput!]
  connect: [EnquiryWhereUniqueInput!]
  disconnect: [EnquiryWhereUniqueInput!]
  delete: [EnquiryWhereUniqueInput!]
  update: [EnquiryUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [EnquiryUpsertWithWhereUniqueWithoutOrgInput!]
}

input EnquiryUpdateWithoutOrgDataInput {
  num: Int
  message: String
  dateLocal: String
}

input EnquiryUpdateWithWhereUniqueWithoutOrgInput {
  where: EnquiryWhereUniqueInput!
  data: EnquiryUpdateWithoutOrgDataInput!
}

input EnquiryUpsertWithWhereUniqueWithoutOrgInput {
  where: EnquiryWhereUniqueInput!
  update: EnquiryUpdateWithoutOrgDataInput!
  create: EnquiryCreateWithoutOrgInput!
}

input EnquiryWhereInput {
  """Logical AND on all given filters."""
  AND: [EnquiryWhereInput!]

  """Logical OR on all given filters."""
  OR: [EnquiryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EnquiryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  num: Int

  """All values that are not equal to given value."""
  num_not: Int

  """All values that are contained in given list."""
  num_in: [Int!]

  """All values that are not contained in given list."""
  num_not_in: [Int!]

  """All values less than the given value."""
  num_lt: Int

  """All values less than or equal the given value."""
  num_lte: Int

  """All values greater than the given value."""
  num_gt: Int

  """All values greater than or equal the given value."""
  num_gte: Int
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  dateLocal: String

  """All values that are not equal to given value."""
  dateLocal_not: String

  """All values that are contained in given list."""
  dateLocal_in: [String!]

  """All values that are not contained in given list."""
  dateLocal_not_in: [String!]

  """All values less than the given value."""
  dateLocal_lt: String

  """All values less than or equal the given value."""
  dateLocal_lte: String

  """All values greater than the given value."""
  dateLocal_gt: String

  """All values greater than or equal the given value."""
  dateLocal_gte: String

  """All values containing the given string."""
  dateLocal_contains: String

  """All values not containing the given string."""
  dateLocal_not_contains: String

  """All values starting with the given string."""
  dateLocal_starts_with: String

  """All values not starting with the given string."""
  dateLocal_not_starts_with: String

  """All values ending with the given string."""
  dateLocal_ends_with: String

  """All values not ending with the given string."""
  dateLocal_not_ends_with: String
  org: OrgWhereInput
}

input EnquiryWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createOrg(data: OrgCreateInput!): Org!
  createEnquiry(data: EnquiryCreateInput!): Enquiry!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOrg(data: OrgUpdateInput!, where: OrgWhereUniqueInput!): Org
  updateEnquiry(data: EnquiryUpdateInput!, where: EnquiryWhereUniqueInput!): Enquiry
  deleteUser(where: UserWhereUniqueInput!): User
  deleteOrg(where: OrgWhereUniqueInput!): Org
  deleteEnquiry(where: EnquiryWhereUniqueInput!): Enquiry
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertOrg(where: OrgWhereUniqueInput!, create: OrgCreateInput!, update: OrgUpdateInput!): Org!
  upsertEnquiry(where: EnquiryWhereUniqueInput!, create: EnquiryCreateInput!, update: EnquiryUpdateInput!): Enquiry!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyOrgs(data: OrgUpdateInput!, where: OrgWhereInput): BatchPayload!
  updateManyEnquiries(data: EnquiryUpdateInput!, where: EnquiryWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyOrgs(where: OrgWhereInput): BatchPayload!
  deleteManyEnquiries(where: EnquiryWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Org implements Node {
  id: ID!
  name: String!
  enquiries(where: EnquiryWhereInput, orderBy: EnquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Enquiry!]
}

"""A connection to a list of items."""
type OrgConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrgEdge]!
  aggregate: AggregateOrg!
}

input OrgCreateInput {
  name: String!
  enquiries: EnquiryCreateManyWithoutOrgInput
}

input OrgCreateOneWithoutEnquiriesInput {
  create: OrgCreateWithoutEnquiriesInput
  connect: OrgWhereUniqueInput
}

input OrgCreateWithoutEnquiriesInput {
  name: String!
}

"""An edge in a connection."""
type OrgEdge {
  """The item at the end of the edge."""
  node: Org!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrgOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrgPreviousValues {
  id: ID!
  name: String!
}

type OrgSubscriptionPayload {
  mutation: MutationType!
  node: Org
  updatedFields: [String!]
  previousValues: OrgPreviousValues
}

input OrgSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrgSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrgSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrgSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrgWhereInput
}

input OrgUpdateInput {
  name: String
  enquiries: EnquiryUpdateManyWithoutOrgInput
}

input OrgUpdateOneWithoutEnquiriesInput {
  create: OrgCreateWithoutEnquiriesInput
  connect: OrgWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrgUpdateWithoutEnquiriesDataInput
  upsert: OrgUpsertWithoutEnquiriesInput
}

input OrgUpdateWithoutEnquiriesDataInput {
  name: String
}

input OrgUpsertWithoutEnquiriesInput {
  update: OrgUpdateWithoutEnquiriesDataInput!
  create: OrgCreateWithoutEnquiriesInput!
}

input OrgWhereInput {
  """Logical AND on all given filters."""
  AND: [OrgWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrgWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrgWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  enquiries_every: EnquiryWhereInput
  enquiries_some: EnquiryWhereInput
  enquiries_none: EnquiryWhereInput
}

input OrgWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  orgs(where: OrgWhereInput, orderBy: OrgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Org]!
  enquiries(where: EnquiryWhereInput, orderBy: EnquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Enquiry]!
  user(where: UserWhereUniqueInput!): User
  org(where: OrgWhereUniqueInput!): Org
  enquiry(where: EnquiryWhereUniqueInput!): Enquiry
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  orgsConnection(where: OrgWhereInput, orderBy: OrgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrgConnection!
  enquiriesConnection(where: EnquiryWhereInput, orderBy: EnquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EnquiryConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  org(where: OrgSubscriptionWhereInput): OrgSubscriptionPayload
  enquiry(where: EnquirySubscriptionWhereInput): EnquirySubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
