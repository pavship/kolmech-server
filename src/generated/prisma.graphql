# source: http://localhost:4466
# timestamp: Mon May 20 2019 01:38:06 GMT+0300 (GMT+03:00)

type Account implements Node {
  id: ID!
  name: String
  number: String
  payments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment!]
}

"""A connection to a list of items."""
type AccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccountEdge]!
  aggregate: AggregateAccount!
}

input AccountCreateInput {
  name: String
  number: String
  payments: PaymentCreateManyWithoutAccountInput
}

input AccountCreateOneInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
}

input AccountCreateOneWithoutPaymentsInput {
  create: AccountCreateWithoutPaymentsInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutPaymentsInput {
  name: String
  number: String
}

"""An edge in a connection."""
type AccountEdge {
  """The item at the end of the edge."""
  node: Account!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AccountOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  number_ASC
  number_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AccountPreviousValues {
  id: ID!
  name: String
  number: String
}

type AccountSubscriptionPayload {
  mutation: MutationType!
  node: Account
  updatedFields: [String!]
  previousValues: AccountPreviousValues
}

input AccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccountSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AccountWhereInput
}

input AccountUpdateDataInput {
  name: String
  number: String
  payments: PaymentUpdateManyWithoutAccountInput
}

input AccountUpdateInput {
  name: String
  number: String
  payments: PaymentUpdateManyWithoutAccountInput
}

input AccountUpdateManyMutationInput {
  name: String
  number: String
}

input AccountUpdateOneInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AccountUpdateDataInput
  upsert: AccountUpsertNestedInput
}

input AccountUpdateOneWithoutPaymentsInput {
  create: AccountCreateWithoutPaymentsInput
  connect: AccountWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AccountUpdateWithoutPaymentsDataInput
  upsert: AccountUpsertWithoutPaymentsInput
}

input AccountUpdateWithoutPaymentsDataInput {
  name: String
  number: String
}

input AccountUpsertNestedInput {
  update: AccountUpdateDataInput!
  create: AccountCreateInput!
}

input AccountUpsertWithoutPaymentsInput {
  update: AccountUpdateWithoutPaymentsDataInput!
  create: AccountCreateWithoutPaymentsInput!
}

input AccountWhereInput {
  """Logical AND on all given filters."""
  AND: [AccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  number: String

  """All values that are not equal to given value."""
  number_not: String

  """All values that are contained in given list."""
  number_in: [String!]

  """All values that are not contained in given list."""
  number_not_in: [String!]

  """All values less than the given value."""
  number_lt: String

  """All values less than or equal the given value."""
  number_lte: String

  """All values greater than the given value."""
  number_gt: String

  """All values greater than or equal the given value."""
  number_gte: String

  """All values containing the given string."""
  number_contains: String

  """All values not containing the given string."""
  number_not_contains: String

  """All values starting with the given string."""
  number_starts_with: String

  """All values not starting with the given string."""
  number_not_starts_with: String

  """All values ending with the given string."""
  number_ends_with: String

  """All values not ending with the given string."""
  number_not_ends_with: String
  payments_every: PaymentWhereInput
  payments_some: PaymentWhereInput
  payments_none: PaymentWhereInput
}

input AccountWhereUniqueInput {
  id: ID
}

type AggregateAccount {
  count: Int!
}

type AggregateArticle {
  count: Int!
}

type AggregateDeal {
  count: Int!
}

type AggregateDealStatus {
  count: Int!
}

type AggregateDept {
  count: Int!
}

type AggregateDoc {
  count: Int!
}

type AggregateDrawing {
  count: Int!
}

type AggregateEmployee {
  count: Int!
}

type AggregateEnquiry {
  count: Int!
}

type AggregateEquipment {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateFileLink {
  count: Int!
}

type AggregateModel {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrg {
  count: Int!
}

type AggregatePayment {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregateProd {
  count: Int!
}

type AggregateServerData {
  count: Int!
}

type AggregateStatus {
  count: Int!
}

type AggregateTel {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Article implements Node {
  id: ID!
  name: String
  rusName: String
  isIncome: Boolean
  isLoan: Boolean
  relations: [String!]!
}

"""A connection to a list of items."""
type ArticleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArticleEdge]!
  aggregate: AggregateArticle!
}

input ArticleCreateInput {
  name: String
  rusName: String
  isIncome: Boolean
  isLoan: Boolean
  relations: ArticleCreaterelationsInput
}

input ArticleCreateOneInput {
  create: ArticleCreateInput
  connect: ArticleWhereUniqueInput
}

input ArticleCreaterelationsInput {
  set: [String!]
}

"""An edge in a connection."""
type ArticleEdge {
  """The item at the end of the edge."""
  node: Article!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ArticleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  rusName_ASC
  rusName_DESC
  isIncome_ASC
  isIncome_DESC
  isLoan_ASC
  isLoan_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ArticlePreviousValues {
  id: ID!
  name: String
  rusName: String
  isIncome: Boolean
  isLoan: Boolean
  relations: [String!]!
}

type ArticleSubscriptionPayload {
  mutation: MutationType!
  node: Article
  updatedFields: [String!]
  previousValues: ArticlePreviousValues
}

input ArticleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ArticleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArticleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArticleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ArticleWhereInput
}

input ArticleUpdateDataInput {
  name: String
  rusName: String
  isIncome: Boolean
  isLoan: Boolean
  relations: ArticleUpdaterelationsInput
}

input ArticleUpdateInput {
  name: String
  rusName: String
  isIncome: Boolean
  isLoan: Boolean
  relations: ArticleUpdaterelationsInput
}

input ArticleUpdateManyMutationInput {
  name: String
  rusName: String
  isIncome: Boolean
  isLoan: Boolean
  relations: ArticleUpdaterelationsInput
}

input ArticleUpdateOneInput {
  create: ArticleCreateInput
  connect: ArticleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ArticleUpdateDataInput
  upsert: ArticleUpsertNestedInput
}

input ArticleUpdaterelationsInput {
  set: [String!]
}

input ArticleUpsertNestedInput {
  update: ArticleUpdateDataInput!
  create: ArticleCreateInput!
}

input ArticleWhereInput {
  """Logical AND on all given filters."""
  AND: [ArticleWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArticleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArticleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  rusName: String

  """All values that are not equal to given value."""
  rusName_not: String

  """All values that are contained in given list."""
  rusName_in: [String!]

  """All values that are not contained in given list."""
  rusName_not_in: [String!]

  """All values less than the given value."""
  rusName_lt: String

  """All values less than or equal the given value."""
  rusName_lte: String

  """All values greater than the given value."""
  rusName_gt: String

  """All values greater than or equal the given value."""
  rusName_gte: String

  """All values containing the given string."""
  rusName_contains: String

  """All values not containing the given string."""
  rusName_not_contains: String

  """All values starting with the given string."""
  rusName_starts_with: String

  """All values not starting with the given string."""
  rusName_not_starts_with: String

  """All values ending with the given string."""
  rusName_ends_with: String

  """All values not ending with the given string."""
  rusName_not_ends_with: String
  isIncome: Boolean

  """All values that are not equal to given value."""
  isIncome_not: Boolean
  isLoan: Boolean

  """All values that are not equal to given value."""
  isLoan_not: Boolean
}

input ArticleWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Deal implements Node {
  id: ID!
  amoId: Int
  date: DateTime
  name: String
  models(where: ModelWhereInput, orderBy: ModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Model!]
  org: Org
  status: DealStatus
}

"""A connection to a list of items."""
type DealConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DealEdge]!
  aggregate: AggregateDeal!
}

input DealCreateInput {
  amoId: Int
  date: DateTime
  name: String
  models: ModelCreateManyWithoutDealsInput
  org: OrgCreateOneWithoutDealsInput
  status: DealStatusCreateOneInput
}

input DealCreateManyWithoutModelsInput {
  create: [DealCreateWithoutModelsInput!]
  connect: [DealWhereUniqueInput!]
}

input DealCreateManyWithoutOrgInput {
  create: [DealCreateWithoutOrgInput!]
  connect: [DealWhereUniqueInput!]
}

input DealCreateWithoutModelsInput {
  amoId: Int
  date: DateTime
  name: String
  org: OrgCreateOneWithoutDealsInput
  status: DealStatusCreateOneInput
}

input DealCreateWithoutOrgInput {
  amoId: Int
  date: DateTime
  name: String
  models: ModelCreateManyWithoutDealsInput
  status: DealStatusCreateOneInput
}

"""An edge in a connection."""
type DealEdge {
  """The item at the end of the edge."""
  node: Deal!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DealOrderByInput {
  id_ASC
  id_DESC
  amoId_ASC
  amoId_DESC
  date_ASC
  date_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DealPreviousValues {
  id: ID!
  amoId: Int
  date: DateTime
  name: String
}

type DealStatus implements Node {
  id: ID!
  amoId: Int
  name: String
  color: String
  sort: Int
}

"""A connection to a list of items."""
type DealStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DealStatusEdge]!
  aggregate: AggregateDealStatus!
}

input DealStatusCreateInput {
  amoId: Int
  name: String
  color: String
  sort: Int
}

input DealStatusCreateOneInput {
  create: DealStatusCreateInput
  connect: DealStatusWhereUniqueInput
}

"""An edge in a connection."""
type DealStatusEdge {
  """The item at the end of the edge."""
  node: DealStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DealStatusOrderByInput {
  id_ASC
  id_DESC
  amoId_ASC
  amoId_DESC
  name_ASC
  name_DESC
  color_ASC
  color_DESC
  sort_ASC
  sort_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DealStatusPreviousValues {
  id: ID!
  amoId: Int
  name: String
  color: String
  sort: Int
}

type DealStatusSubscriptionPayload {
  mutation: MutationType!
  node: DealStatus
  updatedFields: [String!]
  previousValues: DealStatusPreviousValues
}

input DealStatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DealStatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DealStatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DealStatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DealStatusWhereInput
}

input DealStatusUpdateDataInput {
  amoId: Int
  name: String
  color: String
  sort: Int
}

input DealStatusUpdateInput {
  amoId: Int
  name: String
  color: String
  sort: Int
}

input DealStatusUpdateManyMutationInput {
  amoId: Int
  name: String
  color: String
  sort: Int
}

input DealStatusUpdateOneInput {
  create: DealStatusCreateInput
  connect: DealStatusWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DealStatusUpdateDataInput
  upsert: DealStatusUpsertNestedInput
}

input DealStatusUpsertNestedInput {
  update: DealStatusUpdateDataInput!
  create: DealStatusCreateInput!
}

input DealStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [DealStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [DealStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DealStatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amoId: Int

  """All values that are not equal to given value."""
  amoId_not: Int

  """All values that are contained in given list."""
  amoId_in: [Int!]

  """All values that are not contained in given list."""
  amoId_not_in: [Int!]

  """All values less than the given value."""
  amoId_lt: Int

  """All values less than or equal the given value."""
  amoId_lte: Int

  """All values greater than the given value."""
  amoId_gt: Int

  """All values greater than or equal the given value."""
  amoId_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  sort: Int

  """All values that are not equal to given value."""
  sort_not: Int

  """All values that are contained in given list."""
  sort_in: [Int!]

  """All values that are not contained in given list."""
  sort_not_in: [Int!]

  """All values less than the given value."""
  sort_lt: Int

  """All values less than or equal the given value."""
  sort_lte: Int

  """All values greater than the given value."""
  sort_gt: Int

  """All values greater than or equal the given value."""
  sort_gte: Int
}

input DealStatusWhereUniqueInput {
  id: ID
  amoId: Int
}

type DealSubscriptionPayload {
  mutation: MutationType!
  node: Deal
  updatedFields: [String!]
  previousValues: DealPreviousValues
}

input DealSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DealSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DealSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DealSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DealWhereInput
}

input DealUpdateInput {
  amoId: Int
  date: DateTime
  name: String
  models: ModelUpdateManyWithoutDealsInput
  org: OrgUpdateOneWithoutDealsInput
  status: DealStatusUpdateOneInput
}

input DealUpdateManyMutationInput {
  amoId: Int
  date: DateTime
  name: String
}

input DealUpdateManyWithoutModelsInput {
  create: [DealCreateWithoutModelsInput!]
  connect: [DealWhereUniqueInput!]
  disconnect: [DealWhereUniqueInput!]
  delete: [DealWhereUniqueInput!]
  update: [DealUpdateWithWhereUniqueWithoutModelsInput!]
  upsert: [DealUpsertWithWhereUniqueWithoutModelsInput!]
}

input DealUpdateManyWithoutOrgInput {
  create: [DealCreateWithoutOrgInput!]
  connect: [DealWhereUniqueInput!]
  disconnect: [DealWhereUniqueInput!]
  delete: [DealWhereUniqueInput!]
  update: [DealUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [DealUpsertWithWhereUniqueWithoutOrgInput!]
}

input DealUpdateWithoutModelsDataInput {
  amoId: Int
  date: DateTime
  name: String
  org: OrgUpdateOneWithoutDealsInput
  status: DealStatusUpdateOneInput
}

input DealUpdateWithoutOrgDataInput {
  amoId: Int
  date: DateTime
  name: String
  models: ModelUpdateManyWithoutDealsInput
  status: DealStatusUpdateOneInput
}

input DealUpdateWithWhereUniqueWithoutModelsInput {
  where: DealWhereUniqueInput!
  data: DealUpdateWithoutModelsDataInput!
}

input DealUpdateWithWhereUniqueWithoutOrgInput {
  where: DealWhereUniqueInput!
  data: DealUpdateWithoutOrgDataInput!
}

input DealUpsertWithWhereUniqueWithoutModelsInput {
  where: DealWhereUniqueInput!
  update: DealUpdateWithoutModelsDataInput!
  create: DealCreateWithoutModelsInput!
}

input DealUpsertWithWhereUniqueWithoutOrgInput {
  where: DealWhereUniqueInput!
  update: DealUpdateWithoutOrgDataInput!
  create: DealCreateWithoutOrgInput!
}

input DealWhereInput {
  """Logical AND on all given filters."""
  AND: [DealWhereInput!]

  """Logical OR on all given filters."""
  OR: [DealWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DealWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amoId: Int

  """All values that are not equal to given value."""
  amoId_not: Int

  """All values that are contained in given list."""
  amoId_in: [Int!]

  """All values that are not contained in given list."""
  amoId_not_in: [Int!]

  """All values less than the given value."""
  amoId_lt: Int

  """All values less than or equal the given value."""
  amoId_lte: Int

  """All values greater than the given value."""
  amoId_gt: Int

  """All values greater than or equal the given value."""
  amoId_gte: Int
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  models_every: ModelWhereInput
  models_some: ModelWhereInput
  models_none: ModelWhereInput
  org: OrgWhereInput
  status: DealStatusWhereInput
}

input DealWhereUniqueInput {
  id: ID
  amoId: Int
}

type Dept implements Node {
  id: ID!
  type: DeptType!
  name: String!
  prods(where: ProdWhereInput, orderBy: ProdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prod!]
}

"""A connection to a list of items."""
type DeptConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeptEdge]!
  aggregate: AggregateDept!
}

input DeptCreateInput {
  type: DeptType!
  name: String!
  prods: ProdCreateManyWithoutDeptInput
}

input DeptCreateOneWithoutProdsInput {
  create: DeptCreateWithoutProdsInput
  connect: DeptWhereUniqueInput
}

input DeptCreateWithoutProdsInput {
  type: DeptType!
  name: String!
}

"""An edge in a connection."""
type DeptEdge {
  """The item at the end of the edge."""
  node: Dept!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DeptOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DeptPreviousValues {
  id: ID!
  type: DeptType!
  name: String!
}

type DeptSubscriptionPayload {
  mutation: MutationType!
  node: Dept
  updatedFields: [String!]
  previousValues: DeptPreviousValues
}

input DeptSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DeptSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeptSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeptSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DeptWhereInput
}

enum DeptType {
  OWNED
  CLIENT
  PARTNER
  TRANSPORT
}

input DeptUpdateInput {
  type: DeptType
  name: String
  prods: ProdUpdateManyWithoutDeptInput
}

input DeptUpdateManyMutationInput {
  type: DeptType
  name: String
}

input DeptUpdateOneRequiredWithoutProdsInput {
  create: DeptCreateWithoutProdsInput
  connect: DeptWhereUniqueInput
  update: DeptUpdateWithoutProdsDataInput
  upsert: DeptUpsertWithoutProdsInput
}

input DeptUpdateWithoutProdsDataInput {
  type: DeptType
  name: String
}

input DeptUpsertWithoutProdsInput {
  update: DeptUpdateWithoutProdsDataInput!
  create: DeptCreateWithoutProdsInput!
}

input DeptWhereInput {
  """Logical AND on all given filters."""
  AND: [DeptWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeptWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeptWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: DeptType

  """All values that are not equal to given value."""
  type_not: DeptType

  """All values that are contained in given list."""
  type_in: [DeptType!]

  """All values that are not contained in given list."""
  type_not_in: [DeptType!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  prods_every: ProdWhereInput
  prods_some: ProdWhereInput
  prods_none: ProdWhereInput
}

input DeptWhereUniqueInput {
  id: ID
}

type Doc implements Node {
  id: ID!
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
  enquiry: Enquiry
}

"""A connection to a list of items."""
type DocConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DocEdge]!
  aggregate: AggregateDoc!
}

input DocCreateInput {
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
  enquiry: EnquiryCreateOneWithoutDocsInput
}

input DocCreateManyWithoutEnquiryInput {
  create: [DocCreateWithoutEnquiryInput!]
  connect: [DocWhereUniqueInput!]
}

input DocCreateOneInput {
  create: DocCreateInput
  connect: DocWhereUniqueInput
}

input DocCreateWithoutEnquiryInput {
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
}

"""An edge in a connection."""
type DocEdge {
  """The item at the end of the edge."""
  node: Doc!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DocOrderByInput {
  id_ASC
  id_DESC
  dateLocal_ASC
  dateLocal_DESC
  amount_ASC
  amount_DESC
  nds_ASC
  nds_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DocPreviousValues {
  id: ID!
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
}

type DocSubscriptionPayload {
  mutation: MutationType!
  node: Doc
  updatedFields: [String!]
  previousValues: DocPreviousValues
}

input DocSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DocSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DocWhereInput
}

enum DocType {
  CO
}

input DocUpdateDataInput {
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
  enquiry: EnquiryUpdateOneWithoutDocsInput
}

input DocUpdateInput {
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
  enquiry: EnquiryUpdateOneWithoutDocsInput
}

input DocUpdateManyMutationInput {
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
}

input DocUpdateManyWithoutEnquiryInput {
  create: [DocCreateWithoutEnquiryInput!]
  connect: [DocWhereUniqueInput!]
  disconnect: [DocWhereUniqueInput!]
  delete: [DocWhereUniqueInput!]
  update: [DocUpdateWithWhereUniqueWithoutEnquiryInput!]
  upsert: [DocUpsertWithWhereUniqueWithoutEnquiryInput!]
}

input DocUpdateOneInput {
  create: DocCreateInput
  connect: DocWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DocUpdateDataInput
  upsert: DocUpsertNestedInput
}

input DocUpdateWithoutEnquiryDataInput {
  dateLocal: String
  amount: Float
  nds: Boolean
  type: DocType
}

input DocUpdateWithWhereUniqueWithoutEnquiryInput {
  where: DocWhereUniqueInput!
  data: DocUpdateWithoutEnquiryDataInput!
}

input DocUpsertNestedInput {
  update: DocUpdateDataInput!
  create: DocCreateInput!
}

input DocUpsertWithWhereUniqueWithoutEnquiryInput {
  where: DocWhereUniqueInput!
  update: DocUpdateWithoutEnquiryDataInput!
  create: DocCreateWithoutEnquiryInput!
}

input DocWhereInput {
  """Logical AND on all given filters."""
  AND: [DocWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  dateLocal: String

  """All values that are not equal to given value."""
  dateLocal_not: String

  """All values that are contained in given list."""
  dateLocal_in: [String!]

  """All values that are not contained in given list."""
  dateLocal_not_in: [String!]

  """All values less than the given value."""
  dateLocal_lt: String

  """All values less than or equal the given value."""
  dateLocal_lte: String

  """All values greater than the given value."""
  dateLocal_gt: String

  """All values greater than or equal the given value."""
  dateLocal_gte: String

  """All values containing the given string."""
  dateLocal_contains: String

  """All values not containing the given string."""
  dateLocal_not_contains: String

  """All values starting with the given string."""
  dateLocal_starts_with: String

  """All values not starting with the given string."""
  dateLocal_not_starts_with: String

  """All values ending with the given string."""
  dateLocal_ends_with: String

  """All values not ending with the given string."""
  dateLocal_not_ends_with: String
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  nds: Boolean

  """All values that are not equal to given value."""
  nds_not: Boolean
  type: DocType

  """All values that are not equal to given value."""
  type_not: DocType

  """All values that are contained in given list."""
  type_in: [DocType!]

  """All values that are not contained in given list."""
  type_not_in: [DocType!]
  enquiry: EnquiryWhereInput
}

input DocWhereUniqueInput {
  id: ID
}

type Drawing implements Node {
  id: ID!
  sortOrder: Int
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  model: Model
}

"""A connection to a list of items."""
type DrawingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DrawingEdge]!
  aggregate: AggregateDrawing!
}

input DrawingCreateInput {
  sortOrder: Int
  files: FileCreateManyWithoutDrawingInput
  model: ModelCreateOneWithoutDrawingsInput
}

input DrawingCreateManyWithoutModelInput {
  create: [DrawingCreateWithoutModelInput!]
  connect: [DrawingWhereUniqueInput!]
}

input DrawingCreateOneWithoutFilesInput {
  create: DrawingCreateWithoutFilesInput
  connect: DrawingWhereUniqueInput
}

input DrawingCreateWithoutFilesInput {
  sortOrder: Int
  model: ModelCreateOneWithoutDrawingsInput
}

input DrawingCreateWithoutModelInput {
  sortOrder: Int
  files: FileCreateManyWithoutDrawingInput
}

"""An edge in a connection."""
type DrawingEdge {
  """The item at the end of the edge."""
  node: Drawing!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DrawingOrderByInput {
  id_ASC
  id_DESC
  sortOrder_ASC
  sortOrder_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DrawingPreviousValues {
  id: ID!
  sortOrder: Int
}

type DrawingSubscriptionPayload {
  mutation: MutationType!
  node: Drawing
  updatedFields: [String!]
  previousValues: DrawingPreviousValues
}

input DrawingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DrawingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DrawingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DrawingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DrawingWhereInput
}

input DrawingUpdateInput {
  sortOrder: Int
  files: FileUpdateManyWithoutDrawingInput
  model: ModelUpdateOneWithoutDrawingsInput
}

input DrawingUpdateManyMutationInput {
  sortOrder: Int
}

input DrawingUpdateManyWithoutModelInput {
  create: [DrawingCreateWithoutModelInput!]
  connect: [DrawingWhereUniqueInput!]
  disconnect: [DrawingWhereUniqueInput!]
  delete: [DrawingWhereUniqueInput!]
  update: [DrawingUpdateWithWhereUniqueWithoutModelInput!]
  upsert: [DrawingUpsertWithWhereUniqueWithoutModelInput!]
}

input DrawingUpdateOneWithoutFilesInput {
  create: DrawingCreateWithoutFilesInput
  connect: DrawingWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DrawingUpdateWithoutFilesDataInput
  upsert: DrawingUpsertWithoutFilesInput
}

input DrawingUpdateWithoutFilesDataInput {
  sortOrder: Int
  model: ModelUpdateOneWithoutDrawingsInput
}

input DrawingUpdateWithoutModelDataInput {
  sortOrder: Int
  files: FileUpdateManyWithoutDrawingInput
}

input DrawingUpdateWithWhereUniqueWithoutModelInput {
  where: DrawingWhereUniqueInput!
  data: DrawingUpdateWithoutModelDataInput!
}

input DrawingUpsertWithoutFilesInput {
  update: DrawingUpdateWithoutFilesDataInput!
  create: DrawingCreateWithoutFilesInput!
}

input DrawingUpsertWithWhereUniqueWithoutModelInput {
  where: DrawingWhereUniqueInput!
  update: DrawingUpdateWithoutModelDataInput!
  create: DrawingCreateWithoutModelInput!
}

input DrawingWhereInput {
  """Logical AND on all given filters."""
  AND: [DrawingWhereInput!]

  """Logical OR on all given filters."""
  OR: [DrawingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DrawingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  sortOrder: Int

  """All values that are not equal to given value."""
  sortOrder_not: Int

  """All values that are contained in given list."""
  sortOrder_in: [Int!]

  """All values that are not contained in given list."""
  sortOrder_not_in: [Int!]

  """All values less than the given value."""
  sortOrder_lt: Int

  """All values less than or equal the given value."""
  sortOrder_lte: Int

  """All values greater than the given value."""
  sortOrder_gt: Int

  """All values greater than or equal the given value."""
  sortOrder_gte: Int
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  model: ModelWhereInput
}

input DrawingWhereUniqueInput {
  id: ID
}

type Employee implements Node {
  id: ID!
  position: String
  person: Person
  org: Org!
}

"""A connection to a list of items."""
type EmployeeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmployeeEdge]!
  aggregate: AggregateEmployee!
}

input EmployeeCreateInput {
  position: String
  person: PersonCreateOneWithoutEmployeesInput
  org: OrgCreateOneWithoutEmployeesInput!
}

input EmployeeCreateManyWithoutOrgInput {
  create: [EmployeeCreateWithoutOrgInput!]
  connect: [EmployeeWhereUniqueInput!]
}

input EmployeeCreateManyWithoutPersonInput {
  create: [EmployeeCreateWithoutPersonInput!]
  connect: [EmployeeWhereUniqueInput!]
}

input EmployeeCreateWithoutOrgInput {
  position: String
  person: PersonCreateOneWithoutEmployeesInput
}

input EmployeeCreateWithoutPersonInput {
  position: String
  org: OrgCreateOneWithoutEmployeesInput!
}

"""An edge in a connection."""
type EmployeeEdge {
  """The item at the end of the edge."""
  node: Employee!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EmployeeOrderByInput {
  id_ASC
  id_DESC
  position_ASC
  position_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EmployeePreviousValues {
  id: ID!
  position: String
}

type EmployeeSubscriptionPayload {
  mutation: MutationType!
  node: Employee
  updatedFields: [String!]
  previousValues: EmployeePreviousValues
}

input EmployeeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployeeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmployeeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmployeeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmployeeWhereInput
}

input EmployeeUpdateInput {
  position: String
  person: PersonUpdateOneWithoutEmployeesInput
  org: OrgUpdateOneRequiredWithoutEmployeesInput
}

input EmployeeUpdateManyMutationInput {
  position: String
}

input EmployeeUpdateManyWithoutOrgInput {
  create: [EmployeeCreateWithoutOrgInput!]
  connect: [EmployeeWhereUniqueInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  delete: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutOrgInput!]
}

input EmployeeUpdateManyWithoutPersonInput {
  create: [EmployeeCreateWithoutPersonInput!]
  connect: [EmployeeWhereUniqueInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  delete: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutPersonInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutPersonInput!]
}

input EmployeeUpdateWithoutOrgDataInput {
  position: String
  person: PersonUpdateOneWithoutEmployeesInput
}

input EmployeeUpdateWithoutPersonDataInput {
  position: String
  org: OrgUpdateOneRequiredWithoutEmployeesInput
}

input EmployeeUpdateWithWhereUniqueWithoutOrgInput {
  where: EmployeeWhereUniqueInput!
  data: EmployeeUpdateWithoutOrgDataInput!
}

input EmployeeUpdateWithWhereUniqueWithoutPersonInput {
  where: EmployeeWhereUniqueInput!
  data: EmployeeUpdateWithoutPersonDataInput!
}

input EmployeeUpsertWithWhereUniqueWithoutOrgInput {
  where: EmployeeWhereUniqueInput!
  update: EmployeeUpdateWithoutOrgDataInput!
  create: EmployeeCreateWithoutOrgInput!
}

input EmployeeUpsertWithWhereUniqueWithoutPersonInput {
  where: EmployeeWhereUniqueInput!
  update: EmployeeUpdateWithoutPersonDataInput!
  create: EmployeeCreateWithoutPersonInput!
}

input EmployeeWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployeeWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmployeeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmployeeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  position: String

  """All values that are not equal to given value."""
  position_not: String

  """All values that are contained in given list."""
  position_in: [String!]

  """All values that are not contained in given list."""
  position_not_in: [String!]

  """All values less than the given value."""
  position_lt: String

  """All values less than or equal the given value."""
  position_lte: String

  """All values greater than the given value."""
  position_gt: String

  """All values greater than or equal the given value."""
  position_gte: String

  """All values containing the given string."""
  position_contains: String

  """All values not containing the given string."""
  position_not_contains: String

  """All values starting with the given string."""
  position_starts_with: String

  """All values not starting with the given string."""
  position_not_starts_with: String

  """All values ending with the given string."""
  position_ends_with: String

  """All values not ending with the given string."""
  position_not_ends_with: String
  person: PersonWhereInput
  org: OrgWhereInput
}

input EmployeeWhereUniqueInput {
  id: ID
}

type Enquiry implements Node {
  id: ID!
  num: Int!
  dateLocal: String
  org: Org
  model: Model
  qty: Int
  htmlNote: String
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  docs(where: DocWhereInput, orderBy: DocOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Doc!]
  status: Status
}

"""A connection to a list of items."""
type EnquiryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EnquiryEdge]!
  aggregate: AggregateEnquiry!
}

input EnquiryCreateInput {
  num: Int!
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgCreateOneWithoutEnquiriesInput
  model: ModelCreateOneWithoutEnquiriesInput
  events: EventCreateManyWithoutEnquiryInput
  orders: OrderCreateManyWithoutEnquiryInput
  docs: DocCreateManyWithoutEnquiryInput
  status: StatusCreateOneInput
}

input EnquiryCreateManyWithoutModelInput {
  create: [EnquiryCreateWithoutModelInput!]
  connect: [EnquiryWhereUniqueInput!]
}

input EnquiryCreateManyWithoutOrgInput {
  create: [EnquiryCreateWithoutOrgInput!]
  connect: [EnquiryWhereUniqueInput!]
}

input EnquiryCreateOneWithoutDocsInput {
  create: EnquiryCreateWithoutDocsInput
  connect: EnquiryWhereUniqueInput
}

input EnquiryCreateOneWithoutEventsInput {
  create: EnquiryCreateWithoutEventsInput
  connect: EnquiryWhereUniqueInput
}

input EnquiryCreateOneWithoutOrdersInput {
  create: EnquiryCreateWithoutOrdersInput
  connect: EnquiryWhereUniqueInput
}

input EnquiryCreateWithoutDocsInput {
  num: Int!
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgCreateOneWithoutEnquiriesInput
  model: ModelCreateOneWithoutEnquiriesInput
  events: EventCreateManyWithoutEnquiryInput
  orders: OrderCreateManyWithoutEnquiryInput
  status: StatusCreateOneInput
}

input EnquiryCreateWithoutEventsInput {
  num: Int!
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgCreateOneWithoutEnquiriesInput
  model: ModelCreateOneWithoutEnquiriesInput
  orders: OrderCreateManyWithoutEnquiryInput
  docs: DocCreateManyWithoutEnquiryInput
  status: StatusCreateOneInput
}

input EnquiryCreateWithoutModelInput {
  num: Int!
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgCreateOneWithoutEnquiriesInput
  events: EventCreateManyWithoutEnquiryInput
  orders: OrderCreateManyWithoutEnquiryInput
  docs: DocCreateManyWithoutEnquiryInput
  status: StatusCreateOneInput
}

input EnquiryCreateWithoutOrdersInput {
  num: Int!
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgCreateOneWithoutEnquiriesInput
  model: ModelCreateOneWithoutEnquiriesInput
  events: EventCreateManyWithoutEnquiryInput
  docs: DocCreateManyWithoutEnquiryInput
  status: StatusCreateOneInput
}

input EnquiryCreateWithoutOrgInput {
  num: Int!
  dateLocal: String
  qty: Int
  htmlNote: String
  model: ModelCreateOneWithoutEnquiriesInput
  events: EventCreateManyWithoutEnquiryInput
  orders: OrderCreateManyWithoutEnquiryInput
  docs: DocCreateManyWithoutEnquiryInput
  status: StatusCreateOneInput
}

"""An edge in a connection."""
type EnquiryEdge {
  """The item at the end of the edge."""
  node: Enquiry!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EnquiryOrderByInput {
  id_ASC
  id_DESC
  num_ASC
  num_DESC
  dateLocal_ASC
  dateLocal_DESC
  qty_ASC
  qty_DESC
  htmlNote_ASC
  htmlNote_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EnquiryPreviousValues {
  id: ID!
  num: Int!
  dateLocal: String
  qty: Int
  htmlNote: String
}

type EnquirySubscriptionPayload {
  mutation: MutationType!
  node: Enquiry
  updatedFields: [String!]
  previousValues: EnquiryPreviousValues
}

input EnquirySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EnquirySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EnquirySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EnquirySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EnquiryWhereInput
}

input EnquiryUpdateInput {
  num: Int
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgUpdateOneWithoutEnquiriesInput
  model: ModelUpdateOneWithoutEnquiriesInput
  events: EventUpdateManyWithoutEnquiryInput
  orders: OrderUpdateManyWithoutEnquiryInput
  docs: DocUpdateManyWithoutEnquiryInput
  status: StatusUpdateOneInput
}

input EnquiryUpdateManyMutationInput {
  num: Int
  dateLocal: String
  qty: Int
  htmlNote: String
}

input EnquiryUpdateManyWithoutModelInput {
  create: [EnquiryCreateWithoutModelInput!]
  connect: [EnquiryWhereUniqueInput!]
  disconnect: [EnquiryWhereUniqueInput!]
  delete: [EnquiryWhereUniqueInput!]
  update: [EnquiryUpdateWithWhereUniqueWithoutModelInput!]
  upsert: [EnquiryUpsertWithWhereUniqueWithoutModelInput!]
}

input EnquiryUpdateManyWithoutOrgInput {
  create: [EnquiryCreateWithoutOrgInput!]
  connect: [EnquiryWhereUniqueInput!]
  disconnect: [EnquiryWhereUniqueInput!]
  delete: [EnquiryWhereUniqueInput!]
  update: [EnquiryUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [EnquiryUpsertWithWhereUniqueWithoutOrgInput!]
}

input EnquiryUpdateOneWithoutDocsInput {
  create: EnquiryCreateWithoutDocsInput
  connect: EnquiryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EnquiryUpdateWithoutDocsDataInput
  upsert: EnquiryUpsertWithoutDocsInput
}

input EnquiryUpdateOneWithoutEventsInput {
  create: EnquiryCreateWithoutEventsInput
  connect: EnquiryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EnquiryUpdateWithoutEventsDataInput
  upsert: EnquiryUpsertWithoutEventsInput
}

input EnquiryUpdateOneWithoutOrdersInput {
  create: EnquiryCreateWithoutOrdersInput
  connect: EnquiryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EnquiryUpdateWithoutOrdersDataInput
  upsert: EnquiryUpsertWithoutOrdersInput
}

input EnquiryUpdateWithoutDocsDataInput {
  num: Int
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgUpdateOneWithoutEnquiriesInput
  model: ModelUpdateOneWithoutEnquiriesInput
  events: EventUpdateManyWithoutEnquiryInput
  orders: OrderUpdateManyWithoutEnquiryInput
  status: StatusUpdateOneInput
}

input EnquiryUpdateWithoutEventsDataInput {
  num: Int
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgUpdateOneWithoutEnquiriesInput
  model: ModelUpdateOneWithoutEnquiriesInput
  orders: OrderUpdateManyWithoutEnquiryInput
  docs: DocUpdateManyWithoutEnquiryInput
  status: StatusUpdateOneInput
}

input EnquiryUpdateWithoutModelDataInput {
  num: Int
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgUpdateOneWithoutEnquiriesInput
  events: EventUpdateManyWithoutEnquiryInput
  orders: OrderUpdateManyWithoutEnquiryInput
  docs: DocUpdateManyWithoutEnquiryInput
  status: StatusUpdateOneInput
}

input EnquiryUpdateWithoutOrdersDataInput {
  num: Int
  dateLocal: String
  qty: Int
  htmlNote: String
  org: OrgUpdateOneWithoutEnquiriesInput
  model: ModelUpdateOneWithoutEnquiriesInput
  events: EventUpdateManyWithoutEnquiryInput
  docs: DocUpdateManyWithoutEnquiryInput
  status: StatusUpdateOneInput
}

input EnquiryUpdateWithoutOrgDataInput {
  num: Int
  dateLocal: String
  qty: Int
  htmlNote: String
  model: ModelUpdateOneWithoutEnquiriesInput
  events: EventUpdateManyWithoutEnquiryInput
  orders: OrderUpdateManyWithoutEnquiryInput
  docs: DocUpdateManyWithoutEnquiryInput
  status: StatusUpdateOneInput
}

input EnquiryUpdateWithWhereUniqueWithoutModelInput {
  where: EnquiryWhereUniqueInput!
  data: EnquiryUpdateWithoutModelDataInput!
}

input EnquiryUpdateWithWhereUniqueWithoutOrgInput {
  where: EnquiryWhereUniqueInput!
  data: EnquiryUpdateWithoutOrgDataInput!
}

input EnquiryUpsertWithoutDocsInput {
  update: EnquiryUpdateWithoutDocsDataInput!
  create: EnquiryCreateWithoutDocsInput!
}

input EnquiryUpsertWithoutEventsInput {
  update: EnquiryUpdateWithoutEventsDataInput!
  create: EnquiryCreateWithoutEventsInput!
}

input EnquiryUpsertWithoutOrdersInput {
  update: EnquiryUpdateWithoutOrdersDataInput!
  create: EnquiryCreateWithoutOrdersInput!
}

input EnquiryUpsertWithWhereUniqueWithoutModelInput {
  where: EnquiryWhereUniqueInput!
  update: EnquiryUpdateWithoutModelDataInput!
  create: EnquiryCreateWithoutModelInput!
}

input EnquiryUpsertWithWhereUniqueWithoutOrgInput {
  where: EnquiryWhereUniqueInput!
  update: EnquiryUpdateWithoutOrgDataInput!
  create: EnquiryCreateWithoutOrgInput!
}

input EnquiryWhereInput {
  """Logical AND on all given filters."""
  AND: [EnquiryWhereInput!]

  """Logical OR on all given filters."""
  OR: [EnquiryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EnquiryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  num: Int

  """All values that are not equal to given value."""
  num_not: Int

  """All values that are contained in given list."""
  num_in: [Int!]

  """All values that are not contained in given list."""
  num_not_in: [Int!]

  """All values less than the given value."""
  num_lt: Int

  """All values less than or equal the given value."""
  num_lte: Int

  """All values greater than the given value."""
  num_gt: Int

  """All values greater than or equal the given value."""
  num_gte: Int
  dateLocal: String

  """All values that are not equal to given value."""
  dateLocal_not: String

  """All values that are contained in given list."""
  dateLocal_in: [String!]

  """All values that are not contained in given list."""
  dateLocal_not_in: [String!]

  """All values less than the given value."""
  dateLocal_lt: String

  """All values less than or equal the given value."""
  dateLocal_lte: String

  """All values greater than the given value."""
  dateLocal_gt: String

  """All values greater than or equal the given value."""
  dateLocal_gte: String

  """All values containing the given string."""
  dateLocal_contains: String

  """All values not containing the given string."""
  dateLocal_not_contains: String

  """All values starting with the given string."""
  dateLocal_starts_with: String

  """All values not starting with the given string."""
  dateLocal_not_starts_with: String

  """All values ending with the given string."""
  dateLocal_ends_with: String

  """All values not ending with the given string."""
  dateLocal_not_ends_with: String
  qty: Int

  """All values that are not equal to given value."""
  qty_not: Int

  """All values that are contained in given list."""
  qty_in: [Int!]

  """All values that are not contained in given list."""
  qty_not_in: [Int!]

  """All values less than the given value."""
  qty_lt: Int

  """All values less than or equal the given value."""
  qty_lte: Int

  """All values greater than the given value."""
  qty_gt: Int

  """All values greater than or equal the given value."""
  qty_gte: Int
  htmlNote: String

  """All values that are not equal to given value."""
  htmlNote_not: String

  """All values that are contained in given list."""
  htmlNote_in: [String!]

  """All values that are not contained in given list."""
  htmlNote_not_in: [String!]

  """All values less than the given value."""
  htmlNote_lt: String

  """All values less than or equal the given value."""
  htmlNote_lte: String

  """All values greater than the given value."""
  htmlNote_gt: String

  """All values greater than or equal the given value."""
  htmlNote_gte: String

  """All values containing the given string."""
  htmlNote_contains: String

  """All values not containing the given string."""
  htmlNote_not_contains: String

  """All values starting with the given string."""
  htmlNote_starts_with: String

  """All values not starting with the given string."""
  htmlNote_not_starts_with: String

  """All values ending with the given string."""
  htmlNote_ends_with: String

  """All values not ending with the given string."""
  htmlNote_not_ends_with: String
  org: OrgWhereInput
  model: ModelWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  docs_every: DocWhereInput
  docs_some: DocWhereInput
  docs_none: DocWhereInput
  status: StatusWhereInput
}

input EnquiryWhereUniqueInput {
  id: ID
}

type Equipment implements Node {
  id: ID!
  name: String
  payments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment!]
}

"""A connection to a list of items."""
type EquipmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EquipmentEdge]!
  aggregate: AggregateEquipment!
}

input EquipmentCreateInput {
  name: String
  payments: PaymentCreateManyWithoutEquipmentInput
}

input EquipmentCreateOneWithoutPaymentsInput {
  create: EquipmentCreateWithoutPaymentsInput
  connect: EquipmentWhereUniqueInput
}

input EquipmentCreateWithoutPaymentsInput {
  name: String
}

"""An edge in a connection."""
type EquipmentEdge {
  """The item at the end of the edge."""
  node: Equipment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EquipmentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EquipmentPreviousValues {
  id: ID!
  name: String
}

type EquipmentSubscriptionPayload {
  mutation: MutationType!
  node: Equipment
  updatedFields: [String!]
  previousValues: EquipmentPreviousValues
}

input EquipmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EquipmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EquipmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EquipmentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EquipmentWhereInput
}

input EquipmentUpdateInput {
  name: String
  payments: PaymentUpdateManyWithoutEquipmentInput
}

input EquipmentUpdateManyMutationInput {
  name: String
}

input EquipmentUpdateOneWithoutPaymentsInput {
  create: EquipmentCreateWithoutPaymentsInput
  connect: EquipmentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EquipmentUpdateWithoutPaymentsDataInput
  upsert: EquipmentUpsertWithoutPaymentsInput
}

input EquipmentUpdateWithoutPaymentsDataInput {
  name: String
}

input EquipmentUpsertWithoutPaymentsInput {
  update: EquipmentUpdateWithoutPaymentsDataInput!
  create: EquipmentCreateWithoutPaymentsInput!
}

input EquipmentWhereInput {
  """Logical AND on all given filters."""
  AND: [EquipmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [EquipmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EquipmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  payments_every: PaymentWhereInput
  payments_some: PaymentWhereInput
  payments_none: PaymentWhereInput
}

input EquipmentWhereUniqueInput {
  id: ID
}

type Event implements Node {
  id: ID!
  user: User
  enquiry: Enquiry
  order: Order
  datetimeLocal: String!
  htmlText: String
  type: EventType
  status: Status
  doc: Doc
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  datetimeLocal: String!
  htmlText: String
  type: EventType
  user: UserCreateOneWithoutEventsInput
  enquiry: EnquiryCreateOneWithoutEventsInput
  order: OrderCreateOneWithoutEventsInput
  status: StatusCreateOneInput
  doc: DocCreateOneInput
}

input EventCreateManyWithoutEnquiryInput {
  create: [EventCreateWithoutEnquiryInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutOrderInput {
  create: [EventCreateWithoutOrderInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutUserInput {
  create: [EventCreateWithoutUserInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutEnquiryInput {
  datetimeLocal: String!
  htmlText: String
  type: EventType
  user: UserCreateOneWithoutEventsInput
  order: OrderCreateOneWithoutEventsInput
  status: StatusCreateOneInput
  doc: DocCreateOneInput
}

input EventCreateWithoutOrderInput {
  datetimeLocal: String!
  htmlText: String
  type: EventType
  user: UserCreateOneWithoutEventsInput
  enquiry: EnquiryCreateOneWithoutEventsInput
  status: StatusCreateOneInput
  doc: DocCreateOneInput
}

input EventCreateWithoutUserInput {
  datetimeLocal: String!
  htmlText: String
  type: EventType
  enquiry: EnquiryCreateOneWithoutEventsInput
  order: OrderCreateOneWithoutEventsInput
  status: StatusCreateOneInput
  doc: DocCreateOneInput
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  datetimeLocal_ASC
  datetimeLocal_DESC
  htmlText_ASC
  htmlText_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  datetimeLocal: String!
  htmlText: String
  type: EventType
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

enum EventType {
  CREATE
  UPDATE
  STATUS
  COMMENT
}

input EventUpdateInput {
  datetimeLocal: String
  htmlText: String
  type: EventType
  user: UserUpdateOneWithoutEventsInput
  enquiry: EnquiryUpdateOneWithoutEventsInput
  order: OrderUpdateOneWithoutEventsInput
  status: StatusUpdateOneInput
  doc: DocUpdateOneInput
}

input EventUpdateManyMutationInput {
  datetimeLocal: String
  htmlText: String
  type: EventType
}

input EventUpdateManyWithoutEnquiryInput {
  create: [EventCreateWithoutEnquiryInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutEnquiryInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutEnquiryInput!]
}

input EventUpdateManyWithoutOrderInput {
  create: [EventCreateWithoutOrderInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutOrderInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutOrderInput!]
}

input EventUpdateManyWithoutUserInput {
  create: [EventCreateWithoutUserInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutUserInput!]
}

input EventUpdateWithoutEnquiryDataInput {
  datetimeLocal: String
  htmlText: String
  type: EventType
  user: UserUpdateOneWithoutEventsInput
  order: OrderUpdateOneWithoutEventsInput
  status: StatusUpdateOneInput
  doc: DocUpdateOneInput
}

input EventUpdateWithoutOrderDataInput {
  datetimeLocal: String
  htmlText: String
  type: EventType
  user: UserUpdateOneWithoutEventsInput
  enquiry: EnquiryUpdateOneWithoutEventsInput
  status: StatusUpdateOneInput
  doc: DocUpdateOneInput
}

input EventUpdateWithoutUserDataInput {
  datetimeLocal: String
  htmlText: String
  type: EventType
  enquiry: EnquiryUpdateOneWithoutEventsInput
  order: OrderUpdateOneWithoutEventsInput
  status: StatusUpdateOneInput
  doc: DocUpdateOneInput
}

input EventUpdateWithWhereUniqueWithoutEnquiryInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutEnquiryDataInput!
}

input EventUpdateWithWhereUniqueWithoutOrderInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutOrderDataInput!
}

input EventUpdateWithWhereUniqueWithoutUserInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutUserDataInput!
}

input EventUpsertWithWhereUniqueWithoutEnquiryInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutEnquiryDataInput!
  create: EventCreateWithoutEnquiryInput!
}

input EventUpsertWithWhereUniqueWithoutOrderInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutOrderDataInput!
  create: EventCreateWithoutOrderInput!
}

input EventUpsertWithWhereUniqueWithoutUserInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutUserDataInput!
  create: EventCreateWithoutUserInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  datetimeLocal: String

  """All values that are not equal to given value."""
  datetimeLocal_not: String

  """All values that are contained in given list."""
  datetimeLocal_in: [String!]

  """All values that are not contained in given list."""
  datetimeLocal_not_in: [String!]

  """All values less than the given value."""
  datetimeLocal_lt: String

  """All values less than or equal the given value."""
  datetimeLocal_lte: String

  """All values greater than the given value."""
  datetimeLocal_gt: String

  """All values greater than or equal the given value."""
  datetimeLocal_gte: String

  """All values containing the given string."""
  datetimeLocal_contains: String

  """All values not containing the given string."""
  datetimeLocal_not_contains: String

  """All values starting with the given string."""
  datetimeLocal_starts_with: String

  """All values not starting with the given string."""
  datetimeLocal_not_starts_with: String

  """All values ending with the given string."""
  datetimeLocal_ends_with: String

  """All values not ending with the given string."""
  datetimeLocal_not_ends_with: String
  htmlText: String

  """All values that are not equal to given value."""
  htmlText_not: String

  """All values that are contained in given list."""
  htmlText_in: [String!]

  """All values that are not contained in given list."""
  htmlText_not_in: [String!]

  """All values less than the given value."""
  htmlText_lt: String

  """All values less than or equal the given value."""
  htmlText_lte: String

  """All values greater than the given value."""
  htmlText_gt: String

  """All values greater than or equal the given value."""
  htmlText_gte: String

  """All values containing the given string."""
  htmlText_contains: String

  """All values not containing the given string."""
  htmlText_not_contains: String

  """All values starting with the given string."""
  htmlText_starts_with: String

  """All values not starting with the given string."""
  htmlText_not_starts_with: String

  """All values ending with the given string."""
  htmlText_ends_with: String

  """All values not ending with the given string."""
  htmlText_not_ends_with: String
  type: EventType

  """All values that are not equal to given value."""
  type_not: EventType

  """All values that are contained in given list."""
  type_in: [EventType!]

  """All values that are not contained in given list."""
  type_not_in: [EventType!]
  user: UserWhereInput
  enquiry: EnquiryWhereInput
  order: OrderWhereInput
  status: StatusWhereInput
  doc: DocWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

type File implements Node {
  id: ID!
  path: String
  filename: String
  mimetype: String
  encoding: String
  size: Int
  width: Int
  height: Int
  imgFor: ImgFor
  drawing: Drawing
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  path: String
  filename: String
  mimetype: String
  encoding: String
  size: Int
  width: Int
  height: Int
  imgFor: ImgFor
  drawing: DrawingCreateOneWithoutFilesInput
}

input FileCreateManyWithoutDrawingInput {
  create: [FileCreateWithoutDrawingInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutDrawingInput {
  path: String
  filename: String
  mimetype: String
  encoding: String
  size: Int
  width: Int
  height: Int
  imgFor: ImgFor
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

type FileLink implements Node {
  id: ID!
  name: String!
  storeId: ID
}

"""A connection to a list of items."""
type FileLinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileLinkEdge]!
  aggregate: AggregateFileLink!
}

input FileLinkCreateInput {
  name: String!
  storeId: ID
}

"""An edge in a connection."""
type FileLinkEdge {
  """The item at the end of the edge."""
  node: FileLink!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileLinkOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  storeId_ASC
  storeId_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FileLinkPreviousValues {
  id: ID!
  name: String!
  storeId: ID
}

type FileLinkSubscriptionPayload {
  mutation: MutationType!
  node: FileLink
  updatedFields: [String!]
  previousValues: FileLinkPreviousValues
}

input FileLinkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileLinkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileLinkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileLinkSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileLinkWhereInput
}

input FileLinkUpdateInput {
  name: String
  storeId: ID
}

input FileLinkUpdateManyMutationInput {
  name: String
  storeId: ID
}

input FileLinkWhereInput {
  """Logical AND on all given filters."""
  AND: [FileLinkWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileLinkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileLinkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  storeId: ID

  """All values that are not equal to given value."""
  storeId_not: ID

  """All values that are contained in given list."""
  storeId_in: [ID!]

  """All values that are not contained in given list."""
  storeId_not_in: [ID!]

  """All values less than the given value."""
  storeId_lt: ID

  """All values less than or equal the given value."""
  storeId_lte: ID

  """All values greater than the given value."""
  storeId_gt: ID

  """All values greater than or equal the given value."""
  storeId_gte: ID

  """All values containing the given string."""
  storeId_contains: ID

  """All values not containing the given string."""
  storeId_not_contains: ID

  """All values starting with the given string."""
  storeId_starts_with: ID

  """All values not starting with the given string."""
  storeId_not_starts_with: ID

  """All values ending with the given string."""
  storeId_ends_with: ID

  """All values not ending with the given string."""
  storeId_not_ends_with: ID
}

input FileLinkWhereUniqueInput {
  id: ID
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  path_ASC
  path_DESC
  filename_ASC
  filename_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
  size_ASC
  size_DESC
  width_ASC
  width_DESC
  height_ASC
  height_DESC
  imgFor_ASC
  imgFor_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FilePreviousValues {
  id: ID!
  path: String
  filename: String
  mimetype: String
  encoding: String
  size: Int
  width: Int
  height: Int
  imgFor: ImgFor
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateInput {
  path: String
  filename: String
  mimetype: String
  encoding: String
  size: Int
  width: Int
  height: Int
  imgFor: ImgFor
  drawing: DrawingUpdateOneWithoutFilesInput
}

input FileUpdateManyMutationInput {
  path: String
  filename: String
  mimetype: String
  encoding: String
  size: Int
  width: Int
  height: Int
  imgFor: ImgFor
}

input FileUpdateManyWithoutDrawingInput {
  create: [FileCreateWithoutDrawingInput!]
  connect: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  delete: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutDrawingInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutDrawingInput!]
}

input FileUpdateWithoutDrawingDataInput {
  path: String
  filename: String
  mimetype: String
  encoding: String
  size: Int
  width: Int
  height: Int
  imgFor: ImgFor
}

input FileUpdateWithWhereUniqueWithoutDrawingInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutDrawingDataInput!
}

input FileUpsertWithWhereUniqueWithoutDrawingInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutDrawingDataInput!
  create: FileCreateWithoutDrawingInput!
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  path: String

  """All values that are not equal to given value."""
  path_not: String

  """All values that are contained in given list."""
  path_in: [String!]

  """All values that are not contained in given list."""
  path_not_in: [String!]

  """All values less than the given value."""
  path_lt: String

  """All values less than or equal the given value."""
  path_lte: String

  """All values greater than the given value."""
  path_gt: String

  """All values greater than or equal the given value."""
  path_gte: String

  """All values containing the given string."""
  path_contains: String

  """All values not containing the given string."""
  path_not_contains: String

  """All values starting with the given string."""
  path_starts_with: String

  """All values not starting with the given string."""
  path_not_starts_with: String

  """All values ending with the given string."""
  path_ends_with: String

  """All values not ending with the given string."""
  path_not_ends_with: String
  filename: String

  """All values that are not equal to given value."""
  filename_not: String

  """All values that are contained in given list."""
  filename_in: [String!]

  """All values that are not contained in given list."""
  filename_not_in: [String!]

  """All values less than the given value."""
  filename_lt: String

  """All values less than or equal the given value."""
  filename_lte: String

  """All values greater than the given value."""
  filename_gt: String

  """All values greater than or equal the given value."""
  filename_gte: String

  """All values containing the given string."""
  filename_contains: String

  """All values not containing the given string."""
  filename_not_contains: String

  """All values starting with the given string."""
  filename_starts_with: String

  """All values not starting with the given string."""
  filename_not_starts_with: String

  """All values ending with the given string."""
  filename_ends_with: String

  """All values not ending with the given string."""
  filename_not_ends_with: String
  mimetype: String

  """All values that are not equal to given value."""
  mimetype_not: String

  """All values that are contained in given list."""
  mimetype_in: [String!]

  """All values that are not contained in given list."""
  mimetype_not_in: [String!]

  """All values less than the given value."""
  mimetype_lt: String

  """All values less than or equal the given value."""
  mimetype_lte: String

  """All values greater than the given value."""
  mimetype_gt: String

  """All values greater than or equal the given value."""
  mimetype_gte: String

  """All values containing the given string."""
  mimetype_contains: String

  """All values not containing the given string."""
  mimetype_not_contains: String

  """All values starting with the given string."""
  mimetype_starts_with: String

  """All values not starting with the given string."""
  mimetype_not_starts_with: String

  """All values ending with the given string."""
  mimetype_ends_with: String

  """All values not ending with the given string."""
  mimetype_not_ends_with: String
  encoding: String

  """All values that are not equal to given value."""
  encoding_not: String

  """All values that are contained in given list."""
  encoding_in: [String!]

  """All values that are not contained in given list."""
  encoding_not_in: [String!]

  """All values less than the given value."""
  encoding_lt: String

  """All values less than or equal the given value."""
  encoding_lte: String

  """All values greater than the given value."""
  encoding_gt: String

  """All values greater than or equal the given value."""
  encoding_gte: String

  """All values containing the given string."""
  encoding_contains: String

  """All values not containing the given string."""
  encoding_not_contains: String

  """All values starting with the given string."""
  encoding_starts_with: String

  """All values not starting with the given string."""
  encoding_not_starts_with: String

  """All values ending with the given string."""
  encoding_ends_with: String

  """All values not ending with the given string."""
  encoding_not_ends_with: String
  size: Int

  """All values that are not equal to given value."""
  size_not: Int

  """All values that are contained in given list."""
  size_in: [Int!]

  """All values that are not contained in given list."""
  size_not_in: [Int!]

  """All values less than the given value."""
  size_lt: Int

  """All values less than or equal the given value."""
  size_lte: Int

  """All values greater than the given value."""
  size_gt: Int

  """All values greater than or equal the given value."""
  size_gte: Int
  width: Int

  """All values that are not equal to given value."""
  width_not: Int

  """All values that are contained in given list."""
  width_in: [Int!]

  """All values that are not contained in given list."""
  width_not_in: [Int!]

  """All values less than the given value."""
  width_lt: Int

  """All values less than or equal the given value."""
  width_lte: Int

  """All values greater than the given value."""
  width_gt: Int

  """All values greater than or equal the given value."""
  width_gte: Int
  height: Int

  """All values that are not equal to given value."""
  height_not: Int

  """All values that are contained in given list."""
  height_in: [Int!]

  """All values that are not contained in given list."""
  height_not_in: [Int!]

  """All values less than the given value."""
  height_lt: Int

  """All values less than or equal the given value."""
  height_lte: Int

  """All values greater than the given value."""
  height_gt: Int

  """All values greater than or equal the given value."""
  height_gte: Int
  imgFor: ImgFor

  """All values that are not equal to given value."""
  imgFor_not: ImgFor

  """All values that are contained in given list."""
  imgFor_in: [ImgFor!]

  """All values that are not contained in given list."""
  imgFor_not_in: [ImgFor!]
  drawing: DrawingWhereInput
}

input FileWhereUniqueInput {
  id: ID
  path: String
}

enum ImgFor {
  ORIGINAL
  FEED_W792
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Model implements Node {
  id: ID!
  article: String
  name: String!
  deals(where: DealWhereInput, orderBy: DealOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deal!]
  drawings(where: DrawingWhereInput, orderBy: DrawingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Drawing!]
  enquiries(where: EnquiryWhereInput, orderBy: EnquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Enquiry!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  prods(where: ProdWhereInput, orderBy: ProdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prod!]
}

"""A connection to a list of items."""
type ModelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ModelEdge]!
  aggregate: AggregateModel!
}

input ModelCreateInput {
  article: String
  name: String!
  deals: DealCreateManyWithoutModelsInput
  drawings: DrawingCreateManyWithoutModelInput
  enquiries: EnquiryCreateManyWithoutModelInput
  orders: OrderCreateManyWithoutModelInput
  prods: ProdCreateManyWithoutModelInput
}

input ModelCreateManyWithoutDealsInput {
  create: [ModelCreateWithoutDealsInput!]
  connect: [ModelWhereUniqueInput!]
}

input ModelCreateOneWithoutDrawingsInput {
  create: ModelCreateWithoutDrawingsInput
  connect: ModelWhereUniqueInput
}

input ModelCreateOneWithoutEnquiriesInput {
  create: ModelCreateWithoutEnquiriesInput
  connect: ModelWhereUniqueInput
}

input ModelCreateOneWithoutOrdersInput {
  create: ModelCreateWithoutOrdersInput
  connect: ModelWhereUniqueInput
}

input ModelCreateOneWithoutProdsInput {
  create: ModelCreateWithoutProdsInput
  connect: ModelWhereUniqueInput
}

input ModelCreateWithoutDealsInput {
  article: String
  name: String!
  drawings: DrawingCreateManyWithoutModelInput
  enquiries: EnquiryCreateManyWithoutModelInput
  orders: OrderCreateManyWithoutModelInput
  prods: ProdCreateManyWithoutModelInput
}

input ModelCreateWithoutDrawingsInput {
  article: String
  name: String!
  deals: DealCreateManyWithoutModelsInput
  enquiries: EnquiryCreateManyWithoutModelInput
  orders: OrderCreateManyWithoutModelInput
  prods: ProdCreateManyWithoutModelInput
}

input ModelCreateWithoutEnquiriesInput {
  article: String
  name: String!
  deals: DealCreateManyWithoutModelsInput
  drawings: DrawingCreateManyWithoutModelInput
  orders: OrderCreateManyWithoutModelInput
  prods: ProdCreateManyWithoutModelInput
}

input ModelCreateWithoutOrdersInput {
  article: String
  name: String!
  deals: DealCreateManyWithoutModelsInput
  drawings: DrawingCreateManyWithoutModelInput
  enquiries: EnquiryCreateManyWithoutModelInput
  prods: ProdCreateManyWithoutModelInput
}

input ModelCreateWithoutProdsInput {
  article: String
  name: String!
  deals: DealCreateManyWithoutModelsInput
  drawings: DrawingCreateManyWithoutModelInput
  enquiries: EnquiryCreateManyWithoutModelInput
  orders: OrderCreateManyWithoutModelInput
}

"""An edge in a connection."""
type ModelEdge {
  """The item at the end of the edge."""
  node: Model!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ModelOrderByInput {
  id_ASC
  id_DESC
  article_ASC
  article_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ModelPreviousValues {
  id: ID!
  article: String
  name: String!
}

type ModelSubscriptionPayload {
  mutation: MutationType!
  node: Model
  updatedFields: [String!]
  previousValues: ModelPreviousValues
}

input ModelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ModelSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ModelSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ModelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ModelWhereInput
}

input ModelUpdateInput {
  article: String
  name: String
  deals: DealUpdateManyWithoutModelsInput
  drawings: DrawingUpdateManyWithoutModelInput
  enquiries: EnquiryUpdateManyWithoutModelInput
  orders: OrderUpdateManyWithoutModelInput
  prods: ProdUpdateManyWithoutModelInput
}

input ModelUpdateManyMutationInput {
  article: String
  name: String
}

input ModelUpdateManyWithoutDealsInput {
  create: [ModelCreateWithoutDealsInput!]
  connect: [ModelWhereUniqueInput!]
  disconnect: [ModelWhereUniqueInput!]
  delete: [ModelWhereUniqueInput!]
  update: [ModelUpdateWithWhereUniqueWithoutDealsInput!]
  upsert: [ModelUpsertWithWhereUniqueWithoutDealsInput!]
}

input ModelUpdateOneRequiredWithoutProdsInput {
  create: ModelCreateWithoutProdsInput
  connect: ModelWhereUniqueInput
  update: ModelUpdateWithoutProdsDataInput
  upsert: ModelUpsertWithoutProdsInput
}

input ModelUpdateOneWithoutDrawingsInput {
  create: ModelCreateWithoutDrawingsInput
  connect: ModelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ModelUpdateWithoutDrawingsDataInput
  upsert: ModelUpsertWithoutDrawingsInput
}

input ModelUpdateOneWithoutEnquiriesInput {
  create: ModelCreateWithoutEnquiriesInput
  connect: ModelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ModelUpdateWithoutEnquiriesDataInput
  upsert: ModelUpsertWithoutEnquiriesInput
}

input ModelUpdateOneWithoutOrdersInput {
  create: ModelCreateWithoutOrdersInput
  connect: ModelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ModelUpdateWithoutOrdersDataInput
  upsert: ModelUpsertWithoutOrdersInput
}

input ModelUpdateWithoutDealsDataInput {
  article: String
  name: String
  drawings: DrawingUpdateManyWithoutModelInput
  enquiries: EnquiryUpdateManyWithoutModelInput
  orders: OrderUpdateManyWithoutModelInput
  prods: ProdUpdateManyWithoutModelInput
}

input ModelUpdateWithoutDrawingsDataInput {
  article: String
  name: String
  deals: DealUpdateManyWithoutModelsInput
  enquiries: EnquiryUpdateManyWithoutModelInput
  orders: OrderUpdateManyWithoutModelInput
  prods: ProdUpdateManyWithoutModelInput
}

input ModelUpdateWithoutEnquiriesDataInput {
  article: String
  name: String
  deals: DealUpdateManyWithoutModelsInput
  drawings: DrawingUpdateManyWithoutModelInput
  orders: OrderUpdateManyWithoutModelInput
  prods: ProdUpdateManyWithoutModelInput
}

input ModelUpdateWithoutOrdersDataInput {
  article: String
  name: String
  deals: DealUpdateManyWithoutModelsInput
  drawings: DrawingUpdateManyWithoutModelInput
  enquiries: EnquiryUpdateManyWithoutModelInput
  prods: ProdUpdateManyWithoutModelInput
}

input ModelUpdateWithoutProdsDataInput {
  article: String
  name: String
  deals: DealUpdateManyWithoutModelsInput
  drawings: DrawingUpdateManyWithoutModelInput
  enquiries: EnquiryUpdateManyWithoutModelInput
  orders: OrderUpdateManyWithoutModelInput
}

input ModelUpdateWithWhereUniqueWithoutDealsInput {
  where: ModelWhereUniqueInput!
  data: ModelUpdateWithoutDealsDataInput!
}

input ModelUpsertWithoutDrawingsInput {
  update: ModelUpdateWithoutDrawingsDataInput!
  create: ModelCreateWithoutDrawingsInput!
}

input ModelUpsertWithoutEnquiriesInput {
  update: ModelUpdateWithoutEnquiriesDataInput!
  create: ModelCreateWithoutEnquiriesInput!
}

input ModelUpsertWithoutOrdersInput {
  update: ModelUpdateWithoutOrdersDataInput!
  create: ModelCreateWithoutOrdersInput!
}

input ModelUpsertWithoutProdsInput {
  update: ModelUpdateWithoutProdsDataInput!
  create: ModelCreateWithoutProdsInput!
}

input ModelUpsertWithWhereUniqueWithoutDealsInput {
  where: ModelWhereUniqueInput!
  update: ModelUpdateWithoutDealsDataInput!
  create: ModelCreateWithoutDealsInput!
}

input ModelWhereInput {
  """Logical AND on all given filters."""
  AND: [ModelWhereInput!]

  """Logical OR on all given filters."""
  OR: [ModelWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ModelWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  article: String

  """All values that are not equal to given value."""
  article_not: String

  """All values that are contained in given list."""
  article_in: [String!]

  """All values that are not contained in given list."""
  article_not_in: [String!]

  """All values less than the given value."""
  article_lt: String

  """All values less than or equal the given value."""
  article_lte: String

  """All values greater than the given value."""
  article_gt: String

  """All values greater than or equal the given value."""
  article_gte: String

  """All values containing the given string."""
  article_contains: String

  """All values not containing the given string."""
  article_not_contains: String

  """All values starting with the given string."""
  article_starts_with: String

  """All values not starting with the given string."""
  article_not_starts_with: String

  """All values ending with the given string."""
  article_ends_with: String

  """All values not ending with the given string."""
  article_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  deals_every: DealWhereInput
  deals_some: DealWhereInput
  deals_none: DealWhereInput
  drawings_every: DrawingWhereInput
  drawings_some: DrawingWhereInput
  drawings_none: DrawingWhereInput
  enquiries_every: EnquiryWhereInput
  enquiries_some: EnquiryWhereInput
  enquiries_none: EnquiryWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  prods_every: ProdWhereInput
  prods_some: ProdWhereInput
  prods_none: ProdWhereInput
}

input ModelWhereUniqueInput {
  id: ID
}

type Mutation {
  createDeal(data: DealCreateInput!): Deal!
  createDept(data: DeptCreateInput!): Dept!
  createDrawing(data: DrawingCreateInput!): Drawing!
  createEmployee(data: EmployeeCreateInput!): Employee!
  createEnquiry(data: EnquiryCreateInput!): Enquiry!
  createEvent(data: EventCreateInput!): Event!
  createEquipment(data: EquipmentCreateInput!): Equipment!
  createFile(data: FileCreateInput!): File!
  createFileLink(data: FileLinkCreateInput!): FileLink!
  createModel(data: ModelCreateInput!): Model!
  createOrder(data: OrderCreateInput!): Order!
  createOrg(data: OrgCreateInput!): Org!
  createServerData(data: ServerDataCreateInput!): ServerData!
  createTel(data: TelCreateInput!): Tel!
  createPayment(data: PaymentCreateInput!): Payment!
  createPerson(data: PersonCreateInput!): Person!
  createProd(data: ProdCreateInput!): Prod!
  createUser(data: UserCreateInput!): User!
  createArticle(data: ArticleCreateInput!): Article!
  createStatus(data: StatusCreateInput!): Status!
  createAccount(data: AccountCreateInput!): Account!
  createDoc(data: DocCreateInput!): Doc!
  createDealStatus(data: DealStatusCreateInput!): DealStatus!
  updateDeal(data: DealUpdateInput!, where: DealWhereUniqueInput!): Deal
  updateDept(data: DeptUpdateInput!, where: DeptWhereUniqueInput!): Dept
  updateDrawing(data: DrawingUpdateInput!, where: DrawingWhereUniqueInput!): Drawing
  updateEmployee(data: EmployeeUpdateInput!, where: EmployeeWhereUniqueInput!): Employee
  updateEnquiry(data: EnquiryUpdateInput!, where: EnquiryWhereUniqueInput!): Enquiry
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateEquipment(data: EquipmentUpdateInput!, where: EquipmentWhereUniqueInput!): Equipment
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateFileLink(data: FileLinkUpdateInput!, where: FileLinkWhereUniqueInput!): FileLink
  updateModel(data: ModelUpdateInput!, where: ModelWhereUniqueInput!): Model
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateOrg(data: OrgUpdateInput!, where: OrgWhereUniqueInput!): Org
  updateServerData(data: ServerDataUpdateInput!, where: ServerDataWhereUniqueInput!): ServerData
  updateTel(data: TelUpdateInput!, where: TelWhereUniqueInput!): Tel
  updatePayment(data: PaymentUpdateInput!, where: PaymentWhereUniqueInput!): Payment
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateProd(data: ProdUpdateInput!, where: ProdWhereUniqueInput!): Prod
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateArticle(data: ArticleUpdateInput!, where: ArticleWhereUniqueInput!): Article
  updateStatus(data: StatusUpdateInput!, where: StatusWhereUniqueInput!): Status
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateDoc(data: DocUpdateInput!, where: DocWhereUniqueInput!): Doc
  updateDealStatus(data: DealStatusUpdateInput!, where: DealStatusWhereUniqueInput!): DealStatus
  deleteDeal(where: DealWhereUniqueInput!): Deal
  deleteDept(where: DeptWhereUniqueInput!): Dept
  deleteDrawing(where: DrawingWhereUniqueInput!): Drawing
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteEnquiry(where: EnquiryWhereUniqueInput!): Enquiry
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEquipment(where: EquipmentWhereUniqueInput!): Equipment
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFileLink(where: FileLinkWhereUniqueInput!): FileLink
  deleteModel(where: ModelWhereUniqueInput!): Model
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrg(where: OrgWhereUniqueInput!): Org
  deleteServerData(where: ServerDataWhereUniqueInput!): ServerData
  deleteTel(where: TelWhereUniqueInput!): Tel
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteProd(where: ProdWhereUniqueInput!): Prod
  deleteUser(where: UserWhereUniqueInput!): User
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteStatus(where: StatusWhereUniqueInput!): Status
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteDoc(where: DocWhereUniqueInput!): Doc
  deleteDealStatus(where: DealStatusWhereUniqueInput!): DealStatus
  upsertDeal(where: DealWhereUniqueInput!, create: DealCreateInput!, update: DealUpdateInput!): Deal!
  upsertDept(where: DeptWhereUniqueInput!, create: DeptCreateInput!, update: DeptUpdateInput!): Dept!
  upsertDrawing(where: DrawingWhereUniqueInput!, create: DrawingCreateInput!, update: DrawingUpdateInput!): Drawing!
  upsertEmployee(where: EmployeeWhereUniqueInput!, create: EmployeeCreateInput!, update: EmployeeUpdateInput!): Employee!
  upsertEnquiry(where: EnquiryWhereUniqueInput!, create: EnquiryCreateInput!, update: EnquiryUpdateInput!): Enquiry!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertEquipment(where: EquipmentWhereUniqueInput!, create: EquipmentCreateInput!, update: EquipmentUpdateInput!): Equipment!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertFileLink(where: FileLinkWhereUniqueInput!, create: FileLinkCreateInput!, update: FileLinkUpdateInput!): FileLink!
  upsertModel(where: ModelWhereUniqueInput!, create: ModelCreateInput!, update: ModelUpdateInput!): Model!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  upsertOrg(where: OrgWhereUniqueInput!, create: OrgCreateInput!, update: OrgUpdateInput!): Org!
  upsertServerData(where: ServerDataWhereUniqueInput!, create: ServerDataCreateInput!, update: ServerDataUpdateInput!): ServerData!
  upsertTel(where: TelWhereUniqueInput!, create: TelCreateInput!, update: TelUpdateInput!): Tel!
  upsertPayment(where: PaymentWhereUniqueInput!, create: PaymentCreateInput!, update: PaymentUpdateInput!): Payment!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  upsertProd(where: ProdWhereUniqueInput!, create: ProdCreateInput!, update: ProdUpdateInput!): Prod!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertArticle(where: ArticleWhereUniqueInput!, create: ArticleCreateInput!, update: ArticleUpdateInput!): Article!
  upsertStatus(where: StatusWhereUniqueInput!, create: StatusCreateInput!, update: StatusUpdateInput!): Status!
  upsertAccount(where: AccountWhereUniqueInput!, create: AccountCreateInput!, update: AccountUpdateInput!): Account!
  upsertDoc(where: DocWhereUniqueInput!, create: DocCreateInput!, update: DocUpdateInput!): Doc!
  upsertDealStatus(where: DealStatusWhereUniqueInput!, create: DealStatusCreateInput!, update: DealStatusUpdateInput!): DealStatus!
  updateManyDeals(data: DealUpdateManyMutationInput!, where: DealWhereInput): BatchPayload!
  updateManyDepts(data: DeptUpdateManyMutationInput!, where: DeptWhereInput): BatchPayload!
  updateManyDrawings(data: DrawingUpdateManyMutationInput!, where: DrawingWhereInput): BatchPayload!
  updateManyEmployees(data: EmployeeUpdateManyMutationInput!, where: EmployeeWhereInput): BatchPayload!
  updateManyEnquiries(data: EnquiryUpdateManyMutationInput!, where: EnquiryWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyEquipments(data: EquipmentUpdateManyMutationInput!, where: EquipmentWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  updateManyFileLinks(data: FileLinkUpdateManyMutationInput!, where: FileLinkWhereInput): BatchPayload!
  updateManyModels(data: ModelUpdateManyMutationInput!, where: ModelWhereInput): BatchPayload!
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  updateManyOrgs(data: OrgUpdateManyMutationInput!, where: OrgWhereInput): BatchPayload!
  updateManyServerDatas(data: ServerDataUpdateManyMutationInput!, where: ServerDataWhereInput): BatchPayload!
  updateManyTels(data: TelUpdateManyMutationInput!, where: TelWhereInput): BatchPayload!
  updateManyPayments(data: PaymentUpdateManyMutationInput!, where: PaymentWhereInput): BatchPayload!
  updateManyPersons(data: PersonUpdateManyMutationInput!, where: PersonWhereInput): BatchPayload!
  updateManyProds(data: ProdUpdateManyMutationInput!, where: ProdWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyArticles(data: ArticleUpdateManyMutationInput!, where: ArticleWhereInput): BatchPayload!
  updateManyStatuses(data: StatusUpdateManyMutationInput!, where: StatusWhereInput): BatchPayload!
  updateManyAccounts(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): BatchPayload!
  updateManyDocs(data: DocUpdateManyMutationInput!, where: DocWhereInput): BatchPayload!
  updateManyDealStatuses(data: DealStatusUpdateManyMutationInput!, where: DealStatusWhereInput): BatchPayload!
  deleteManyDeals(where: DealWhereInput): BatchPayload!
  deleteManyDepts(where: DeptWhereInput): BatchPayload!
  deleteManyDrawings(where: DrawingWhereInput): BatchPayload!
  deleteManyEmployees(where: EmployeeWhereInput): BatchPayload!
  deleteManyEnquiries(where: EnquiryWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyEquipments(where: EquipmentWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManyFileLinks(where: FileLinkWhereInput): BatchPayload!
  deleteManyModels(where: ModelWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyOrgs(where: OrgWhereInput): BatchPayload!
  deleteManyServerDatas(where: ServerDataWhereInput): BatchPayload!
  deleteManyTels(where: TelWhereInput): BatchPayload!
  deleteManyPayments(where: PaymentWhereInput): BatchPayload!
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  deleteManyProds(where: ProdWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyArticles(where: ArticleWhereInput): BatchPayload!
  deleteManyStatuses(where: StatusWhereInput): BatchPayload!
  deleteManyAccounts(where: AccountWhereInput): BatchPayload!
  deleteManyDocs(where: DocWhereInput): BatchPayload!
  deleteManyDealStatuses(where: DealStatusWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Order implements Node {
  id: ID!
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: Enquiry
  org: Org
  model: Model
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  prods(where: ProdWhereInput, orderBy: ProdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prod!]
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryCreateOneWithoutOrdersInput
  org: OrgCreateOneWithoutOrdersInput
  model: ModelCreateOneWithoutOrdersInput
  events: EventCreateManyWithoutOrderInput
  prods: ProdCreateManyWithoutOrderInput
}

input OrderCreateManyWithoutEnquiryInput {
  create: [OrderCreateWithoutEnquiryInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateManyWithoutModelInput {
  create: [OrderCreateWithoutModelInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateManyWithoutOrgInput {
  create: [OrderCreateWithoutOrgInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateOneWithoutEventsInput {
  create: OrderCreateWithoutEventsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateOneWithoutProdsInput {
  create: OrderCreateWithoutProdsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutEnquiryInput {
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  org: OrgCreateOneWithoutOrdersInput
  model: ModelCreateOneWithoutOrdersInput
  events: EventCreateManyWithoutOrderInput
  prods: ProdCreateManyWithoutOrderInput
}

input OrderCreateWithoutEventsInput {
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryCreateOneWithoutOrdersInput
  org: OrgCreateOneWithoutOrdersInput
  model: ModelCreateOneWithoutOrdersInput
  prods: ProdCreateManyWithoutOrderInput
}

input OrderCreateWithoutModelInput {
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryCreateOneWithoutOrdersInput
  org: OrgCreateOneWithoutOrdersInput
  events: EventCreateManyWithoutOrderInput
  prods: ProdCreateManyWithoutOrderInput
}

input OrderCreateWithoutOrgInput {
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryCreateOneWithoutOrdersInput
  model: ModelCreateOneWithoutOrdersInput
  events: EventCreateManyWithoutOrderInput
  prods: ProdCreateManyWithoutOrderInput
}

input OrderCreateWithoutProdsInput {
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryCreateOneWithoutOrdersInput
  org: OrgCreateOneWithoutOrdersInput
  model: ModelCreateOneWithoutOrdersInput
  events: EventCreateManyWithoutOrderInput
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  num_ASC
  num_DESC
  fullnum_ASC
  fullnum_DESC
  dateLocal_ASC
  dateLocal_DESC
  qty_ASC
  qty_DESC
  amount_ASC
  amount_DESC
  htmlNote_ASC
  htmlNote_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderPreviousValues {
  id: ID!
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryUpdateOneWithoutOrdersInput
  org: OrgUpdateOneWithoutOrdersInput
  model: ModelUpdateOneWithoutOrdersInput
  events: EventUpdateManyWithoutOrderInput
  prods: ProdUpdateManyWithoutOrderInput
}

input OrderUpdateManyMutationInput {
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
}

input OrderUpdateManyWithoutEnquiryInput {
  create: [OrderCreateWithoutEnquiryInput!]
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutEnquiryInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutEnquiryInput!]
}

input OrderUpdateManyWithoutModelInput {
  create: [OrderCreateWithoutModelInput!]
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutModelInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutModelInput!]
}

input OrderUpdateManyWithoutOrgInput {
  create: [OrderCreateWithoutOrgInput!]
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutOrgInput!]
}

input OrderUpdateOneWithoutEventsInput {
  create: OrderCreateWithoutEventsInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrderUpdateWithoutEventsDataInput
  upsert: OrderUpsertWithoutEventsInput
}

input OrderUpdateOneWithoutProdsInput {
  create: OrderCreateWithoutProdsInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrderUpdateWithoutProdsDataInput
  upsert: OrderUpsertWithoutProdsInput
}

input OrderUpdateWithoutEnquiryDataInput {
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  org: OrgUpdateOneWithoutOrdersInput
  model: ModelUpdateOneWithoutOrdersInput
  events: EventUpdateManyWithoutOrderInput
  prods: ProdUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutEventsDataInput {
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryUpdateOneWithoutOrdersInput
  org: OrgUpdateOneWithoutOrdersInput
  model: ModelUpdateOneWithoutOrdersInput
  prods: ProdUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutModelDataInput {
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryUpdateOneWithoutOrdersInput
  org: OrgUpdateOneWithoutOrdersInput
  events: EventUpdateManyWithoutOrderInput
  prods: ProdUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutOrgDataInput {
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryUpdateOneWithoutOrdersInput
  model: ModelUpdateOneWithoutOrdersInput
  events: EventUpdateManyWithoutOrderInput
  prods: ProdUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutProdsDataInput {
  num: Int
  fullnum: String
  dateLocal: String
  qty: Int
  amount: Float
  htmlNote: String
  enquiry: EnquiryUpdateOneWithoutOrdersInput
  org: OrgUpdateOneWithoutOrdersInput
  model: ModelUpdateOneWithoutOrdersInput
  events: EventUpdateManyWithoutOrderInput
}

input OrderUpdateWithWhereUniqueWithoutEnquiryInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutEnquiryDataInput!
}

input OrderUpdateWithWhereUniqueWithoutModelInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutModelDataInput!
}

input OrderUpdateWithWhereUniqueWithoutOrgInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutOrgDataInput!
}

input OrderUpsertWithoutEventsInput {
  update: OrderUpdateWithoutEventsDataInput!
  create: OrderCreateWithoutEventsInput!
}

input OrderUpsertWithoutProdsInput {
  update: OrderUpdateWithoutProdsDataInput!
  create: OrderCreateWithoutProdsInput!
}

input OrderUpsertWithWhereUniqueWithoutEnquiryInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutEnquiryDataInput!
  create: OrderCreateWithoutEnquiryInput!
}

input OrderUpsertWithWhereUniqueWithoutModelInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutModelDataInput!
  create: OrderCreateWithoutModelInput!
}

input OrderUpsertWithWhereUniqueWithoutOrgInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutOrgDataInput!
  create: OrderCreateWithoutOrgInput!
}

input OrderWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  num: Int

  """All values that are not equal to given value."""
  num_not: Int

  """All values that are contained in given list."""
  num_in: [Int!]

  """All values that are not contained in given list."""
  num_not_in: [Int!]

  """All values less than the given value."""
  num_lt: Int

  """All values less than or equal the given value."""
  num_lte: Int

  """All values greater than the given value."""
  num_gt: Int

  """All values greater than or equal the given value."""
  num_gte: Int
  fullnum: String

  """All values that are not equal to given value."""
  fullnum_not: String

  """All values that are contained in given list."""
  fullnum_in: [String!]

  """All values that are not contained in given list."""
  fullnum_not_in: [String!]

  """All values less than the given value."""
  fullnum_lt: String

  """All values less than or equal the given value."""
  fullnum_lte: String

  """All values greater than the given value."""
  fullnum_gt: String

  """All values greater than or equal the given value."""
  fullnum_gte: String

  """All values containing the given string."""
  fullnum_contains: String

  """All values not containing the given string."""
  fullnum_not_contains: String

  """All values starting with the given string."""
  fullnum_starts_with: String

  """All values not starting with the given string."""
  fullnum_not_starts_with: String

  """All values ending with the given string."""
  fullnum_ends_with: String

  """All values not ending with the given string."""
  fullnum_not_ends_with: String
  dateLocal: String

  """All values that are not equal to given value."""
  dateLocal_not: String

  """All values that are contained in given list."""
  dateLocal_in: [String!]

  """All values that are not contained in given list."""
  dateLocal_not_in: [String!]

  """All values less than the given value."""
  dateLocal_lt: String

  """All values less than or equal the given value."""
  dateLocal_lte: String

  """All values greater than the given value."""
  dateLocal_gt: String

  """All values greater than or equal the given value."""
  dateLocal_gte: String

  """All values containing the given string."""
  dateLocal_contains: String

  """All values not containing the given string."""
  dateLocal_not_contains: String

  """All values starting with the given string."""
  dateLocal_starts_with: String

  """All values not starting with the given string."""
  dateLocal_not_starts_with: String

  """All values ending with the given string."""
  dateLocal_ends_with: String

  """All values not ending with the given string."""
  dateLocal_not_ends_with: String
  qty: Int

  """All values that are not equal to given value."""
  qty_not: Int

  """All values that are contained in given list."""
  qty_in: [Int!]

  """All values that are not contained in given list."""
  qty_not_in: [Int!]

  """All values less than the given value."""
  qty_lt: Int

  """All values less than or equal the given value."""
  qty_lte: Int

  """All values greater than the given value."""
  qty_gt: Int

  """All values greater than or equal the given value."""
  qty_gte: Int
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  htmlNote: String

  """All values that are not equal to given value."""
  htmlNote_not: String

  """All values that are contained in given list."""
  htmlNote_in: [String!]

  """All values that are not contained in given list."""
  htmlNote_not_in: [String!]

  """All values less than the given value."""
  htmlNote_lt: String

  """All values less than or equal the given value."""
  htmlNote_lte: String

  """All values greater than the given value."""
  htmlNote_gt: String

  """All values greater than or equal the given value."""
  htmlNote_gte: String

  """All values containing the given string."""
  htmlNote_contains: String

  """All values not containing the given string."""
  htmlNote_not_contains: String

  """All values starting with the given string."""
  htmlNote_starts_with: String

  """All values not starting with the given string."""
  htmlNote_not_starts_with: String

  """All values ending with the given string."""
  htmlNote_ends_with: String

  """All values not ending with the given string."""
  htmlNote_not_ends_with: String
  enquiry: EnquiryWhereInput
  org: OrgWhereInput
  model: ModelWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  prods_every: ProdWhereInput
  prods_some: ProdWhereInput
  prods_none: ProdWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

type Org implements Node {
  id: ID!
  inn: String
  moedeloId: String
  amoId: Int
  name: String!
  legalAddress: String
  deals(where: DealWhereInput, orderBy: DealOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deal!]
  employees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee!]
  enquiries(where: EnquiryWhereInput, orderBy: EnquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Enquiry!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  payments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment!]
}

"""A connection to a list of items."""
type OrgConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrgEdge]!
  aggregate: AggregateOrg!
}

input OrgCreateInput {
  inn: String
  moedeloId: String
  amoId: Int
  name: String!
  legalAddress: String
  deals: DealCreateManyWithoutOrgInput
  employees: EmployeeCreateManyWithoutOrgInput
  enquiries: EnquiryCreateManyWithoutOrgInput
  orders: OrderCreateManyWithoutOrgInput
  payments: PaymentCreateManyWithoutOrgInput
}

input OrgCreateOneWithoutDealsInput {
  create: OrgCreateWithoutDealsInput
  connect: OrgWhereUniqueInput
}

input OrgCreateOneWithoutEmployeesInput {
  create: OrgCreateWithoutEmployeesInput
  connect: OrgWhereUniqueInput
}

input OrgCreateOneWithoutEnquiriesInput {
  create: OrgCreateWithoutEnquiriesInput
  connect: OrgWhereUniqueInput
}

input OrgCreateOneWithoutOrdersInput {
  create: OrgCreateWithoutOrdersInput
  connect: OrgWhereUniqueInput
}

input OrgCreateOneWithoutPaymentsInput {
  create: OrgCreateWithoutPaymentsInput
  connect: OrgWhereUniqueInput
}

input OrgCreateWithoutDealsInput {
  inn: String
  moedeloId: String
  amoId: Int
  name: String!
  legalAddress: String
  employees: EmployeeCreateManyWithoutOrgInput
  enquiries: EnquiryCreateManyWithoutOrgInput
  orders: OrderCreateManyWithoutOrgInput
  payments: PaymentCreateManyWithoutOrgInput
}

input OrgCreateWithoutEmployeesInput {
  inn: String
  moedeloId: String
  amoId: Int
  name: String!
  legalAddress: String
  deals: DealCreateManyWithoutOrgInput
  enquiries: EnquiryCreateManyWithoutOrgInput
  orders: OrderCreateManyWithoutOrgInput
  payments: PaymentCreateManyWithoutOrgInput
}

input OrgCreateWithoutEnquiriesInput {
  inn: String
  moedeloId: String
  amoId: Int
  name: String!
  legalAddress: String
  deals: DealCreateManyWithoutOrgInput
  employees: EmployeeCreateManyWithoutOrgInput
  orders: OrderCreateManyWithoutOrgInput
  payments: PaymentCreateManyWithoutOrgInput
}

input OrgCreateWithoutOrdersInput {
  inn: String
  moedeloId: String
  amoId: Int
  name: String!
  legalAddress: String
  deals: DealCreateManyWithoutOrgInput
  employees: EmployeeCreateManyWithoutOrgInput
  enquiries: EnquiryCreateManyWithoutOrgInput
  payments: PaymentCreateManyWithoutOrgInput
}

input OrgCreateWithoutPaymentsInput {
  inn: String
  moedeloId: String
  amoId: Int
  name: String!
  legalAddress: String
  deals: DealCreateManyWithoutOrgInput
  employees: EmployeeCreateManyWithoutOrgInput
  enquiries: EnquiryCreateManyWithoutOrgInput
  orders: OrderCreateManyWithoutOrgInput
}

"""An edge in a connection."""
type OrgEdge {
  """The item at the end of the edge."""
  node: Org!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrgOrderByInput {
  id_ASC
  id_DESC
  inn_ASC
  inn_DESC
  moedeloId_ASC
  moedeloId_DESC
  amoId_ASC
  amoId_DESC
  name_ASC
  name_DESC
  legalAddress_ASC
  legalAddress_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrgPreviousValues {
  id: ID!
  inn: String
  moedeloId: String
  amoId: Int
  name: String!
  legalAddress: String
}

type OrgSubscriptionPayload {
  mutation: MutationType!
  node: Org
  updatedFields: [String!]
  previousValues: OrgPreviousValues
}

input OrgSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrgSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrgSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrgSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrgWhereInput
}

input OrgUpdateInput {
  inn: String
  moedeloId: String
  amoId: Int
  name: String
  legalAddress: String
  deals: DealUpdateManyWithoutOrgInput
  employees: EmployeeUpdateManyWithoutOrgInput
  enquiries: EnquiryUpdateManyWithoutOrgInput
  orders: OrderUpdateManyWithoutOrgInput
  payments: PaymentUpdateManyWithoutOrgInput
}

input OrgUpdateManyMutationInput {
  inn: String
  moedeloId: String
  amoId: Int
  name: String
  legalAddress: String
}

input OrgUpdateOneRequiredWithoutEmployeesInput {
  create: OrgCreateWithoutEmployeesInput
  connect: OrgWhereUniqueInput
  update: OrgUpdateWithoutEmployeesDataInput
  upsert: OrgUpsertWithoutEmployeesInput
}

input OrgUpdateOneWithoutDealsInput {
  create: OrgCreateWithoutDealsInput
  connect: OrgWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrgUpdateWithoutDealsDataInput
  upsert: OrgUpsertWithoutDealsInput
}

input OrgUpdateOneWithoutEnquiriesInput {
  create: OrgCreateWithoutEnquiriesInput
  connect: OrgWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrgUpdateWithoutEnquiriesDataInput
  upsert: OrgUpsertWithoutEnquiriesInput
}

input OrgUpdateOneWithoutOrdersInput {
  create: OrgCreateWithoutOrdersInput
  connect: OrgWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrgUpdateWithoutOrdersDataInput
  upsert: OrgUpsertWithoutOrdersInput
}

input OrgUpdateOneWithoutPaymentsInput {
  create: OrgCreateWithoutPaymentsInput
  connect: OrgWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrgUpdateWithoutPaymentsDataInput
  upsert: OrgUpsertWithoutPaymentsInput
}

input OrgUpdateWithoutDealsDataInput {
  inn: String
  moedeloId: String
  amoId: Int
  name: String
  legalAddress: String
  employees: EmployeeUpdateManyWithoutOrgInput
  enquiries: EnquiryUpdateManyWithoutOrgInput
  orders: OrderUpdateManyWithoutOrgInput
  payments: PaymentUpdateManyWithoutOrgInput
}

input OrgUpdateWithoutEmployeesDataInput {
  inn: String
  moedeloId: String
  amoId: Int
  name: String
  legalAddress: String
  deals: DealUpdateManyWithoutOrgInput
  enquiries: EnquiryUpdateManyWithoutOrgInput
  orders: OrderUpdateManyWithoutOrgInput
  payments: PaymentUpdateManyWithoutOrgInput
}

input OrgUpdateWithoutEnquiriesDataInput {
  inn: String
  moedeloId: String
  amoId: Int
  name: String
  legalAddress: String
  deals: DealUpdateManyWithoutOrgInput
  employees: EmployeeUpdateManyWithoutOrgInput
  orders: OrderUpdateManyWithoutOrgInput
  payments: PaymentUpdateManyWithoutOrgInput
}

input OrgUpdateWithoutOrdersDataInput {
  inn: String
  moedeloId: String
  amoId: Int
  name: String
  legalAddress: String
  deals: DealUpdateManyWithoutOrgInput
  employees: EmployeeUpdateManyWithoutOrgInput
  enquiries: EnquiryUpdateManyWithoutOrgInput
  payments: PaymentUpdateManyWithoutOrgInput
}

input OrgUpdateWithoutPaymentsDataInput {
  inn: String
  moedeloId: String
  amoId: Int
  name: String
  legalAddress: String
  deals: DealUpdateManyWithoutOrgInput
  employees: EmployeeUpdateManyWithoutOrgInput
  enquiries: EnquiryUpdateManyWithoutOrgInput
  orders: OrderUpdateManyWithoutOrgInput
}

input OrgUpsertWithoutDealsInput {
  update: OrgUpdateWithoutDealsDataInput!
  create: OrgCreateWithoutDealsInput!
}

input OrgUpsertWithoutEmployeesInput {
  update: OrgUpdateWithoutEmployeesDataInput!
  create: OrgCreateWithoutEmployeesInput!
}

input OrgUpsertWithoutEnquiriesInput {
  update: OrgUpdateWithoutEnquiriesDataInput!
  create: OrgCreateWithoutEnquiriesInput!
}

input OrgUpsertWithoutOrdersInput {
  update: OrgUpdateWithoutOrdersDataInput!
  create: OrgCreateWithoutOrdersInput!
}

input OrgUpsertWithoutPaymentsInput {
  update: OrgUpdateWithoutPaymentsDataInput!
  create: OrgCreateWithoutPaymentsInput!
}

input OrgWhereInput {
  """Logical AND on all given filters."""
  AND: [OrgWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrgWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrgWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  inn: String

  """All values that are not equal to given value."""
  inn_not: String

  """All values that are contained in given list."""
  inn_in: [String!]

  """All values that are not contained in given list."""
  inn_not_in: [String!]

  """All values less than the given value."""
  inn_lt: String

  """All values less than or equal the given value."""
  inn_lte: String

  """All values greater than the given value."""
  inn_gt: String

  """All values greater than or equal the given value."""
  inn_gte: String

  """All values containing the given string."""
  inn_contains: String

  """All values not containing the given string."""
  inn_not_contains: String

  """All values starting with the given string."""
  inn_starts_with: String

  """All values not starting with the given string."""
  inn_not_starts_with: String

  """All values ending with the given string."""
  inn_ends_with: String

  """All values not ending with the given string."""
  inn_not_ends_with: String
  moedeloId: String

  """All values that are not equal to given value."""
  moedeloId_not: String

  """All values that are contained in given list."""
  moedeloId_in: [String!]

  """All values that are not contained in given list."""
  moedeloId_not_in: [String!]

  """All values less than the given value."""
  moedeloId_lt: String

  """All values less than or equal the given value."""
  moedeloId_lte: String

  """All values greater than the given value."""
  moedeloId_gt: String

  """All values greater than or equal the given value."""
  moedeloId_gte: String

  """All values containing the given string."""
  moedeloId_contains: String

  """All values not containing the given string."""
  moedeloId_not_contains: String

  """All values starting with the given string."""
  moedeloId_starts_with: String

  """All values not starting with the given string."""
  moedeloId_not_starts_with: String

  """All values ending with the given string."""
  moedeloId_ends_with: String

  """All values not ending with the given string."""
  moedeloId_not_ends_with: String
  amoId: Int

  """All values that are not equal to given value."""
  amoId_not: Int

  """All values that are contained in given list."""
  amoId_in: [Int!]

  """All values that are not contained in given list."""
  amoId_not_in: [Int!]

  """All values less than the given value."""
  amoId_lt: Int

  """All values less than or equal the given value."""
  amoId_lte: Int

  """All values greater than the given value."""
  amoId_gt: Int

  """All values greater than or equal the given value."""
  amoId_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  legalAddress: String

  """All values that are not equal to given value."""
  legalAddress_not: String

  """All values that are contained in given list."""
  legalAddress_in: [String!]

  """All values that are not contained in given list."""
  legalAddress_not_in: [String!]

  """All values less than the given value."""
  legalAddress_lt: String

  """All values less than or equal the given value."""
  legalAddress_lte: String

  """All values greater than the given value."""
  legalAddress_gt: String

  """All values greater than or equal the given value."""
  legalAddress_gte: String

  """All values containing the given string."""
  legalAddress_contains: String

  """All values not containing the given string."""
  legalAddress_not_contains: String

  """All values starting with the given string."""
  legalAddress_starts_with: String

  """All values not starting with the given string."""
  legalAddress_not_starts_with: String

  """All values ending with the given string."""
  legalAddress_ends_with: String

  """All values not ending with the given string."""
  legalAddress_not_ends_with: String
  deals_every: DealWhereInput
  deals_some: DealWhereInput
  deals_none: DealWhereInput
  employees_every: EmployeeWhereInput
  employees_some: EmployeeWhereInput
  employees_none: EmployeeWhereInput
  enquiries_every: EnquiryWhereInput
  enquiries_some: EnquiryWhereInput
  enquiries_none: EnquiryWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  payments_every: PaymentWhereInput
  payments_some: PaymentWhereInput
  payments_none: PaymentWhereInput
}

input OrgWhereUniqueInput {
  id: ID
  inn: String
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Payment implements Node {
  id: ID!
  dateLocal: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  amount: Float
  article: Article
  isIncome: Boolean
  purpose: String
  tochkaId: String
  account: Account
  equipment: Equipment
  org: Org
  person: Person
  createdBy: User
  updatedBy: User
}

"""A connection to a list of items."""
type PaymentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentEdge]!
  aggregate: AggregatePayment!
}

input PaymentCreateInput {
  dateLocal: DateTime!
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
  article: ArticleCreateOneInput
  account: AccountCreateOneWithoutPaymentsInput
  equipment: EquipmentCreateOneWithoutPaymentsInput
  org: OrgCreateOneWithoutPaymentsInput
  person: PersonCreateOneWithoutPaymentsInput
  createdBy: UserCreateOneWithoutCreatedPaymentsInput
  updatedBy: UserCreateOneWithoutUpdatedPaymentsInput
}

input PaymentCreateManyWithoutAccountInput {
  create: [PaymentCreateWithoutAccountInput!]
  connect: [PaymentWhereUniqueInput!]
}

input PaymentCreateManyWithoutCreatedByInput {
  create: [PaymentCreateWithoutCreatedByInput!]
  connect: [PaymentWhereUniqueInput!]
}

input PaymentCreateManyWithoutEquipmentInput {
  create: [PaymentCreateWithoutEquipmentInput!]
  connect: [PaymentWhereUniqueInput!]
}

input PaymentCreateManyWithoutOrgInput {
  create: [PaymentCreateWithoutOrgInput!]
  connect: [PaymentWhereUniqueInput!]
}

input PaymentCreateManyWithoutPersonInput {
  create: [PaymentCreateWithoutPersonInput!]
  connect: [PaymentWhereUniqueInput!]
}

input PaymentCreateManyWithoutUpdatedByInput {
  create: [PaymentCreateWithoutUpdatedByInput!]
  connect: [PaymentWhereUniqueInput!]
}

input PaymentCreateWithoutAccountInput {
  dateLocal: DateTime!
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
  article: ArticleCreateOneInput
  equipment: EquipmentCreateOneWithoutPaymentsInput
  org: OrgCreateOneWithoutPaymentsInput
  person: PersonCreateOneWithoutPaymentsInput
  createdBy: UserCreateOneWithoutCreatedPaymentsInput
  updatedBy: UserCreateOneWithoutUpdatedPaymentsInput
}

input PaymentCreateWithoutCreatedByInput {
  dateLocal: DateTime!
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
  article: ArticleCreateOneInput
  account: AccountCreateOneWithoutPaymentsInput
  equipment: EquipmentCreateOneWithoutPaymentsInput
  org: OrgCreateOneWithoutPaymentsInput
  person: PersonCreateOneWithoutPaymentsInput
  updatedBy: UserCreateOneWithoutUpdatedPaymentsInput
}

input PaymentCreateWithoutEquipmentInput {
  dateLocal: DateTime!
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
  article: ArticleCreateOneInput
  account: AccountCreateOneWithoutPaymentsInput
  org: OrgCreateOneWithoutPaymentsInput
  person: PersonCreateOneWithoutPaymentsInput
  createdBy: UserCreateOneWithoutCreatedPaymentsInput
  updatedBy: UserCreateOneWithoutUpdatedPaymentsInput
}

input PaymentCreateWithoutOrgInput {
  dateLocal: DateTime!
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
  article: ArticleCreateOneInput
  account: AccountCreateOneWithoutPaymentsInput
  equipment: EquipmentCreateOneWithoutPaymentsInput
  person: PersonCreateOneWithoutPaymentsInput
  createdBy: UserCreateOneWithoutCreatedPaymentsInput
  updatedBy: UserCreateOneWithoutUpdatedPaymentsInput
}

input PaymentCreateWithoutPersonInput {
  dateLocal: DateTime!
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
  article: ArticleCreateOneInput
  account: AccountCreateOneWithoutPaymentsInput
  equipment: EquipmentCreateOneWithoutPaymentsInput
  org: OrgCreateOneWithoutPaymentsInput
  createdBy: UserCreateOneWithoutCreatedPaymentsInput
  updatedBy: UserCreateOneWithoutUpdatedPaymentsInput
}

input PaymentCreateWithoutUpdatedByInput {
  dateLocal: DateTime!
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
  article: ArticleCreateOneInput
  account: AccountCreateOneWithoutPaymentsInput
  equipment: EquipmentCreateOneWithoutPaymentsInput
  org: OrgCreateOneWithoutPaymentsInput
  person: PersonCreateOneWithoutPaymentsInput
  createdBy: UserCreateOneWithoutCreatedPaymentsInput
}

"""An edge in a connection."""
type PaymentEdge {
  """The item at the end of the edge."""
  node: Payment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PaymentOrderByInput {
  id_ASC
  id_DESC
  dateLocal_ASC
  dateLocal_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  amount_ASC
  amount_DESC
  isIncome_ASC
  isIncome_DESC
  purpose_ASC
  purpose_DESC
  tochkaId_ASC
  tochkaId_DESC
}

type PaymentPreviousValues {
  id: ID!
  dateLocal: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
}

type PaymentSubscriptionPayload {
  mutation: MutationType!
  node: Payment
  updatedFields: [String!]
  previousValues: PaymentPreviousValues
}

input PaymentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaymentWhereInput
}

input PaymentUpdateInput {
  dateLocal: DateTime
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
  article: ArticleUpdateOneInput
  account: AccountUpdateOneWithoutPaymentsInput
  equipment: EquipmentUpdateOneWithoutPaymentsInput
  org: OrgUpdateOneWithoutPaymentsInput
  person: PersonUpdateOneWithoutPaymentsInput
  createdBy: UserUpdateOneWithoutCreatedPaymentsInput
  updatedBy: UserUpdateOneWithoutUpdatedPaymentsInput
}

input PaymentUpdateManyMutationInput {
  dateLocal: DateTime
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
}

input PaymentUpdateManyWithoutAccountInput {
  create: [PaymentCreateWithoutAccountInput!]
  connect: [PaymentWhereUniqueInput!]
  disconnect: [PaymentWhereUniqueInput!]
  delete: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithWhereUniqueWithoutAccountInput!]
  upsert: [PaymentUpsertWithWhereUniqueWithoutAccountInput!]
}

input PaymentUpdateManyWithoutCreatedByInput {
  create: [PaymentCreateWithoutCreatedByInput!]
  connect: [PaymentWhereUniqueInput!]
  disconnect: [PaymentWhereUniqueInput!]
  delete: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [PaymentUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input PaymentUpdateManyWithoutEquipmentInput {
  create: [PaymentCreateWithoutEquipmentInput!]
  connect: [PaymentWhereUniqueInput!]
  disconnect: [PaymentWhereUniqueInput!]
  delete: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithWhereUniqueWithoutEquipmentInput!]
  upsert: [PaymentUpsertWithWhereUniqueWithoutEquipmentInput!]
}

input PaymentUpdateManyWithoutOrgInput {
  create: [PaymentCreateWithoutOrgInput!]
  connect: [PaymentWhereUniqueInput!]
  disconnect: [PaymentWhereUniqueInput!]
  delete: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [PaymentUpsertWithWhereUniqueWithoutOrgInput!]
}

input PaymentUpdateManyWithoutPersonInput {
  create: [PaymentCreateWithoutPersonInput!]
  connect: [PaymentWhereUniqueInput!]
  disconnect: [PaymentWhereUniqueInput!]
  delete: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithWhereUniqueWithoutPersonInput!]
  upsert: [PaymentUpsertWithWhereUniqueWithoutPersonInput!]
}

input PaymentUpdateManyWithoutUpdatedByInput {
  create: [PaymentCreateWithoutUpdatedByInput!]
  connect: [PaymentWhereUniqueInput!]
  disconnect: [PaymentWhereUniqueInput!]
  delete: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithWhereUniqueWithoutUpdatedByInput!]
  upsert: [PaymentUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input PaymentUpdateWithoutAccountDataInput {
  dateLocal: DateTime
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
  article: ArticleUpdateOneInput
  equipment: EquipmentUpdateOneWithoutPaymentsInput
  org: OrgUpdateOneWithoutPaymentsInput
  person: PersonUpdateOneWithoutPaymentsInput
  createdBy: UserUpdateOneWithoutCreatedPaymentsInput
  updatedBy: UserUpdateOneWithoutUpdatedPaymentsInput
}

input PaymentUpdateWithoutCreatedByDataInput {
  dateLocal: DateTime
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
  article: ArticleUpdateOneInput
  account: AccountUpdateOneWithoutPaymentsInput
  equipment: EquipmentUpdateOneWithoutPaymentsInput
  org: OrgUpdateOneWithoutPaymentsInput
  person: PersonUpdateOneWithoutPaymentsInput
  updatedBy: UserUpdateOneWithoutUpdatedPaymentsInput
}

input PaymentUpdateWithoutEquipmentDataInput {
  dateLocal: DateTime
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
  article: ArticleUpdateOneInput
  account: AccountUpdateOneWithoutPaymentsInput
  org: OrgUpdateOneWithoutPaymentsInput
  person: PersonUpdateOneWithoutPaymentsInput
  createdBy: UserUpdateOneWithoutCreatedPaymentsInput
  updatedBy: UserUpdateOneWithoutUpdatedPaymentsInput
}

input PaymentUpdateWithoutOrgDataInput {
  dateLocal: DateTime
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
  article: ArticleUpdateOneInput
  account: AccountUpdateOneWithoutPaymentsInput
  equipment: EquipmentUpdateOneWithoutPaymentsInput
  person: PersonUpdateOneWithoutPaymentsInput
  createdBy: UserUpdateOneWithoutCreatedPaymentsInput
  updatedBy: UserUpdateOneWithoutUpdatedPaymentsInput
}

input PaymentUpdateWithoutPersonDataInput {
  dateLocal: DateTime
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
  article: ArticleUpdateOneInput
  account: AccountUpdateOneWithoutPaymentsInput
  equipment: EquipmentUpdateOneWithoutPaymentsInput
  org: OrgUpdateOneWithoutPaymentsInput
  createdBy: UserUpdateOneWithoutCreatedPaymentsInput
  updatedBy: UserUpdateOneWithoutUpdatedPaymentsInput
}

input PaymentUpdateWithoutUpdatedByDataInput {
  dateLocal: DateTime
  amount: Float
  isIncome: Boolean
  purpose: String
  tochkaId: String
  article: ArticleUpdateOneInput
  account: AccountUpdateOneWithoutPaymentsInput
  equipment: EquipmentUpdateOneWithoutPaymentsInput
  org: OrgUpdateOneWithoutPaymentsInput
  person: PersonUpdateOneWithoutPaymentsInput
  createdBy: UserUpdateOneWithoutCreatedPaymentsInput
}

input PaymentUpdateWithWhereUniqueWithoutAccountInput {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateWithoutAccountDataInput!
}

input PaymentUpdateWithWhereUniqueWithoutCreatedByInput {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateWithoutCreatedByDataInput!
}

input PaymentUpdateWithWhereUniqueWithoutEquipmentInput {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateWithoutEquipmentDataInput!
}

input PaymentUpdateWithWhereUniqueWithoutOrgInput {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateWithoutOrgDataInput!
}

input PaymentUpdateWithWhereUniqueWithoutPersonInput {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateWithoutPersonDataInput!
}

input PaymentUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateWithoutUpdatedByDataInput!
}

input PaymentUpsertWithWhereUniqueWithoutAccountInput {
  where: PaymentWhereUniqueInput!
  update: PaymentUpdateWithoutAccountDataInput!
  create: PaymentCreateWithoutAccountInput!
}

input PaymentUpsertWithWhereUniqueWithoutCreatedByInput {
  where: PaymentWhereUniqueInput!
  update: PaymentUpdateWithoutCreatedByDataInput!
  create: PaymentCreateWithoutCreatedByInput!
}

input PaymentUpsertWithWhereUniqueWithoutEquipmentInput {
  where: PaymentWhereUniqueInput!
  update: PaymentUpdateWithoutEquipmentDataInput!
  create: PaymentCreateWithoutEquipmentInput!
}

input PaymentUpsertWithWhereUniqueWithoutOrgInput {
  where: PaymentWhereUniqueInput!
  update: PaymentUpdateWithoutOrgDataInput!
  create: PaymentCreateWithoutOrgInput!
}

input PaymentUpsertWithWhereUniqueWithoutPersonInput {
  where: PaymentWhereUniqueInput!
  update: PaymentUpdateWithoutPersonDataInput!
  create: PaymentCreateWithoutPersonInput!
}

input PaymentUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: PaymentWhereUniqueInput!
  update: PaymentUpdateWithoutUpdatedByDataInput!
  create: PaymentCreateWithoutUpdatedByInput!
}

input PaymentWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  dateLocal: DateTime

  """All values that are not equal to given value."""
  dateLocal_not: DateTime

  """All values that are contained in given list."""
  dateLocal_in: [DateTime!]

  """All values that are not contained in given list."""
  dateLocal_not_in: [DateTime!]

  """All values less than the given value."""
  dateLocal_lt: DateTime

  """All values less than or equal the given value."""
  dateLocal_lte: DateTime

  """All values greater than the given value."""
  dateLocal_gt: DateTime

  """All values greater than or equal the given value."""
  dateLocal_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  isIncome: Boolean

  """All values that are not equal to given value."""
  isIncome_not: Boolean
  purpose: String

  """All values that are not equal to given value."""
  purpose_not: String

  """All values that are contained in given list."""
  purpose_in: [String!]

  """All values that are not contained in given list."""
  purpose_not_in: [String!]

  """All values less than the given value."""
  purpose_lt: String

  """All values less than or equal the given value."""
  purpose_lte: String

  """All values greater than the given value."""
  purpose_gt: String

  """All values greater than or equal the given value."""
  purpose_gte: String

  """All values containing the given string."""
  purpose_contains: String

  """All values not containing the given string."""
  purpose_not_contains: String

  """All values starting with the given string."""
  purpose_starts_with: String

  """All values not starting with the given string."""
  purpose_not_starts_with: String

  """All values ending with the given string."""
  purpose_ends_with: String

  """All values not ending with the given string."""
  purpose_not_ends_with: String
  tochkaId: String

  """All values that are not equal to given value."""
  tochkaId_not: String

  """All values that are contained in given list."""
  tochkaId_in: [String!]

  """All values that are not contained in given list."""
  tochkaId_not_in: [String!]

  """All values less than the given value."""
  tochkaId_lt: String

  """All values less than or equal the given value."""
  tochkaId_lte: String

  """All values greater than the given value."""
  tochkaId_gt: String

  """All values greater than or equal the given value."""
  tochkaId_gte: String

  """All values containing the given string."""
  tochkaId_contains: String

  """All values not containing the given string."""
  tochkaId_not_contains: String

  """All values starting with the given string."""
  tochkaId_starts_with: String

  """All values not starting with the given string."""
  tochkaId_not_starts_with: String

  """All values ending with the given string."""
  tochkaId_ends_with: String

  """All values not ending with the given string."""
  tochkaId_not_ends_with: String
  article: ArticleWhereInput
  account: AccountWhereInput
  equipment: EquipmentWhereInput
  org: OrgWhereInput
  person: PersonWhereInput
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PaymentWhereUniqueInput {
  id: ID
  dateLocal: DateTime
}

type Person implements Node {
  id: ID!
  amoId: Int
  fName: String
  lName: String
  mName: String
  regName: String
  amoName: String
  regNameChecked: Boolean
  htmlNote: String
  tels(where: TelWhereInput, orderBy: TelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tel!]
  user: User
  employees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee!]
  payments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment!]
}

"""A connection to a list of items."""
type PersonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  amoId: Int
  fName: String
  lName: String
  mName: String
  regName: String
  amoName: String
  regNameChecked: Boolean
  htmlNote: String
  tels: TelCreateManyWithoutPersonInput
  user: UserCreateOneWithoutPersonInput
  employees: EmployeeCreateManyWithoutPersonInput
  payments: PaymentCreateManyWithoutPersonInput
}

input PersonCreateOneWithoutEmployeesInput {
  create: PersonCreateWithoutEmployeesInput
  connect: PersonWhereUniqueInput
}

input PersonCreateOneWithoutPaymentsInput {
  create: PersonCreateWithoutPaymentsInput
  connect: PersonWhereUniqueInput
}

input PersonCreateOneWithoutTelsInput {
  create: PersonCreateWithoutTelsInput
  connect: PersonWhereUniqueInput
}

input PersonCreateOneWithoutUserInput {
  create: PersonCreateWithoutUserInput
  connect: PersonWhereUniqueInput
}

input PersonCreateWithoutEmployeesInput {
  amoId: Int
  fName: String
  lName: String
  mName: String
  regName: String
  amoName: String
  regNameChecked: Boolean
  htmlNote: String
  tels: TelCreateManyWithoutPersonInput
  user: UserCreateOneWithoutPersonInput
  payments: PaymentCreateManyWithoutPersonInput
}

input PersonCreateWithoutPaymentsInput {
  amoId: Int
  fName: String
  lName: String
  mName: String
  regName: String
  amoName: String
  regNameChecked: Boolean
  htmlNote: String
  tels: TelCreateManyWithoutPersonInput
  user: UserCreateOneWithoutPersonInput
  employees: EmployeeCreateManyWithoutPersonInput
}

input PersonCreateWithoutTelsInput {
  amoId: Int
  fName: String
  lName: String
  mName: String
  regName: String
  amoName: String
  regNameChecked: Boolean
  htmlNote: String
  user: UserCreateOneWithoutPersonInput
  employees: EmployeeCreateManyWithoutPersonInput
  payments: PaymentCreateManyWithoutPersonInput
}

input PersonCreateWithoutUserInput {
  amoId: Int
  fName: String
  lName: String
  mName: String
  regName: String
  amoName: String
  regNameChecked: Boolean
  htmlNote: String
  tels: TelCreateManyWithoutPersonInput
  employees: EmployeeCreateManyWithoutPersonInput
  payments: PaymentCreateManyWithoutPersonInput
}

"""An edge in a connection."""
type PersonEdge {
  """The item at the end of the edge."""
  node: Person!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  amoId_ASC
  amoId_DESC
  fName_ASC
  fName_DESC
  lName_ASC
  lName_DESC
  mName_ASC
  mName_DESC
  regName_ASC
  regName_DESC
  amoName_ASC
  amoName_DESC
  regNameChecked_ASC
  regNameChecked_DESC
  htmlNote_ASC
  htmlNote_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PersonPreviousValues {
  id: ID!
  amoId: Int
  fName: String
  lName: String
  mName: String
  regName: String
  amoName: String
  regNameChecked: Boolean
  htmlNote: String
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
}

input PersonUpdateInput {
  amoId: Int
  fName: String
  lName: String
  mName: String
  regName: String
  amoName: String
  regNameChecked: Boolean
  htmlNote: String
  tels: TelUpdateManyWithoutPersonInput
  user: UserUpdateOneWithoutPersonInput
  employees: EmployeeUpdateManyWithoutPersonInput
  payments: PaymentUpdateManyWithoutPersonInput
}

input PersonUpdateManyMutationInput {
  amoId: Int
  fName: String
  lName: String
  mName: String
  regName: String
  amoName: String
  regNameChecked: Boolean
  htmlNote: String
}

input PersonUpdateOneWithoutEmployeesInput {
  create: PersonCreateWithoutEmployeesInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PersonUpdateWithoutEmployeesDataInput
  upsert: PersonUpsertWithoutEmployeesInput
}

input PersonUpdateOneWithoutPaymentsInput {
  create: PersonCreateWithoutPaymentsInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PersonUpdateWithoutPaymentsDataInput
  upsert: PersonUpsertWithoutPaymentsInput
}

input PersonUpdateOneWithoutTelsInput {
  create: PersonCreateWithoutTelsInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PersonUpdateWithoutTelsDataInput
  upsert: PersonUpsertWithoutTelsInput
}

input PersonUpdateOneWithoutUserInput {
  create: PersonCreateWithoutUserInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PersonUpdateWithoutUserDataInput
  upsert: PersonUpsertWithoutUserInput
}

input PersonUpdateWithoutEmployeesDataInput {
  amoId: Int
  fName: String
  lName: String
  mName: String
  regName: String
  amoName: String
  regNameChecked: Boolean
  htmlNote: String
  tels: TelUpdateManyWithoutPersonInput
  user: UserUpdateOneWithoutPersonInput
  payments: PaymentUpdateManyWithoutPersonInput
}

input PersonUpdateWithoutPaymentsDataInput {
  amoId: Int
  fName: String
  lName: String
  mName: String
  regName: String
  amoName: String
  regNameChecked: Boolean
  htmlNote: String
  tels: TelUpdateManyWithoutPersonInput
  user: UserUpdateOneWithoutPersonInput
  employees: EmployeeUpdateManyWithoutPersonInput
}

input PersonUpdateWithoutTelsDataInput {
  amoId: Int
  fName: String
  lName: String
  mName: String
  regName: String
  amoName: String
  regNameChecked: Boolean
  htmlNote: String
  user: UserUpdateOneWithoutPersonInput
  employees: EmployeeUpdateManyWithoutPersonInput
  payments: PaymentUpdateManyWithoutPersonInput
}

input PersonUpdateWithoutUserDataInput {
  amoId: Int
  fName: String
  lName: String
  mName: String
  regName: String
  amoName: String
  regNameChecked: Boolean
  htmlNote: String
  tels: TelUpdateManyWithoutPersonInput
  employees: EmployeeUpdateManyWithoutPersonInput
  payments: PaymentUpdateManyWithoutPersonInput
}

input PersonUpsertWithoutEmployeesInput {
  update: PersonUpdateWithoutEmployeesDataInput!
  create: PersonCreateWithoutEmployeesInput!
}

input PersonUpsertWithoutPaymentsInput {
  update: PersonUpdateWithoutPaymentsDataInput!
  create: PersonCreateWithoutPaymentsInput!
}

input PersonUpsertWithoutTelsInput {
  update: PersonUpdateWithoutTelsDataInput!
  create: PersonCreateWithoutTelsInput!
}

input PersonUpsertWithoutUserInput {
  update: PersonUpdateWithoutUserDataInput!
  create: PersonCreateWithoutUserInput!
}

input PersonWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amoId: Int

  """All values that are not equal to given value."""
  amoId_not: Int

  """All values that are contained in given list."""
  amoId_in: [Int!]

  """All values that are not contained in given list."""
  amoId_not_in: [Int!]

  """All values less than the given value."""
  amoId_lt: Int

  """All values less than or equal the given value."""
  amoId_lte: Int

  """All values greater than the given value."""
  amoId_gt: Int

  """All values greater than or equal the given value."""
  amoId_gte: Int
  fName: String

  """All values that are not equal to given value."""
  fName_not: String

  """All values that are contained in given list."""
  fName_in: [String!]

  """All values that are not contained in given list."""
  fName_not_in: [String!]

  """All values less than the given value."""
  fName_lt: String

  """All values less than or equal the given value."""
  fName_lte: String

  """All values greater than the given value."""
  fName_gt: String

  """All values greater than or equal the given value."""
  fName_gte: String

  """All values containing the given string."""
  fName_contains: String

  """All values not containing the given string."""
  fName_not_contains: String

  """All values starting with the given string."""
  fName_starts_with: String

  """All values not starting with the given string."""
  fName_not_starts_with: String

  """All values ending with the given string."""
  fName_ends_with: String

  """All values not ending with the given string."""
  fName_not_ends_with: String
  lName: String

  """All values that are not equal to given value."""
  lName_not: String

  """All values that are contained in given list."""
  lName_in: [String!]

  """All values that are not contained in given list."""
  lName_not_in: [String!]

  """All values less than the given value."""
  lName_lt: String

  """All values less than or equal the given value."""
  lName_lte: String

  """All values greater than the given value."""
  lName_gt: String

  """All values greater than or equal the given value."""
  lName_gte: String

  """All values containing the given string."""
  lName_contains: String

  """All values not containing the given string."""
  lName_not_contains: String

  """All values starting with the given string."""
  lName_starts_with: String

  """All values not starting with the given string."""
  lName_not_starts_with: String

  """All values ending with the given string."""
  lName_ends_with: String

  """All values not ending with the given string."""
  lName_not_ends_with: String
  mName: String

  """All values that are not equal to given value."""
  mName_not: String

  """All values that are contained in given list."""
  mName_in: [String!]

  """All values that are not contained in given list."""
  mName_not_in: [String!]

  """All values less than the given value."""
  mName_lt: String

  """All values less than or equal the given value."""
  mName_lte: String

  """All values greater than the given value."""
  mName_gt: String

  """All values greater than or equal the given value."""
  mName_gte: String

  """All values containing the given string."""
  mName_contains: String

  """All values not containing the given string."""
  mName_not_contains: String

  """All values starting with the given string."""
  mName_starts_with: String

  """All values not starting with the given string."""
  mName_not_starts_with: String

  """All values ending with the given string."""
  mName_ends_with: String

  """All values not ending with the given string."""
  mName_not_ends_with: String
  regName: String

  """All values that are not equal to given value."""
  regName_not: String

  """All values that are contained in given list."""
  regName_in: [String!]

  """All values that are not contained in given list."""
  regName_not_in: [String!]

  """All values less than the given value."""
  regName_lt: String

  """All values less than or equal the given value."""
  regName_lte: String

  """All values greater than the given value."""
  regName_gt: String

  """All values greater than or equal the given value."""
  regName_gte: String

  """All values containing the given string."""
  regName_contains: String

  """All values not containing the given string."""
  regName_not_contains: String

  """All values starting with the given string."""
  regName_starts_with: String

  """All values not starting with the given string."""
  regName_not_starts_with: String

  """All values ending with the given string."""
  regName_ends_with: String

  """All values not ending with the given string."""
  regName_not_ends_with: String
  amoName: String

  """All values that are not equal to given value."""
  amoName_not: String

  """All values that are contained in given list."""
  amoName_in: [String!]

  """All values that are not contained in given list."""
  amoName_not_in: [String!]

  """All values less than the given value."""
  amoName_lt: String

  """All values less than or equal the given value."""
  amoName_lte: String

  """All values greater than the given value."""
  amoName_gt: String

  """All values greater than or equal the given value."""
  amoName_gte: String

  """All values containing the given string."""
  amoName_contains: String

  """All values not containing the given string."""
  amoName_not_contains: String

  """All values starting with the given string."""
  amoName_starts_with: String

  """All values not starting with the given string."""
  amoName_not_starts_with: String

  """All values ending with the given string."""
  amoName_ends_with: String

  """All values not ending with the given string."""
  amoName_not_ends_with: String
  regNameChecked: Boolean

  """All values that are not equal to given value."""
  regNameChecked_not: Boolean
  htmlNote: String

  """All values that are not equal to given value."""
  htmlNote_not: String

  """All values that are contained in given list."""
  htmlNote_in: [String!]

  """All values that are not contained in given list."""
  htmlNote_not_in: [String!]

  """All values less than the given value."""
  htmlNote_lt: String

  """All values less than or equal the given value."""
  htmlNote_lte: String

  """All values greater than the given value."""
  htmlNote_gt: String

  """All values greater than or equal the given value."""
  htmlNote_gte: String

  """All values containing the given string."""
  htmlNote_contains: String

  """All values not containing the given string."""
  htmlNote_not_contains: String

  """All values starting with the given string."""
  htmlNote_starts_with: String

  """All values not starting with the given string."""
  htmlNote_not_starts_with: String

  """All values ending with the given string."""
  htmlNote_ends_with: String

  """All values not ending with the given string."""
  htmlNote_not_ends_with: String
  tels_every: TelWhereInput
  tels_some: TelWhereInput
  tels_none: TelWhereInput
  user: UserWhereInput
  employees_every: EmployeeWhereInput
  employees_some: EmployeeWhereInput
  employees_none: EmployeeWhereInput
  payments_every: PaymentWhereInput
  payments_some: PaymentWhereInput
  payments_none: PaymentWhereInput
}

input PersonWhereUniqueInput {
  id: ID
  amoId: Int
}

type Prod implements Node {
  id: ID!
  dept: Dept!
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  model: Model!
  order: Order
  htmlNote: String
  number: Int
  progress: Float
  year: Int
}

"""A connection to a list of items."""
type ProdConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProdEdge]!
  aggregate: AggregateProd!
}

input ProdCreateInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  dept: DeptCreateOneWithoutProdsInput!
  model: ModelCreateOneWithoutProdsInput!
  order: OrderCreateOneWithoutProdsInput
}

input ProdCreateManyWithoutDeptInput {
  create: [ProdCreateWithoutDeptInput!]
  connect: [ProdWhereUniqueInput!]
}

input ProdCreateManyWithoutModelInput {
  create: [ProdCreateWithoutModelInput!]
  connect: [ProdWhereUniqueInput!]
}

input ProdCreateManyWithoutOrderInput {
  create: [ProdCreateWithoutOrderInput!]
  connect: [ProdWhereUniqueInput!]
}

input ProdCreateWithoutDeptInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  model: ModelCreateOneWithoutProdsInput!
  order: OrderCreateOneWithoutProdsInput
}

input ProdCreateWithoutModelInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  dept: DeptCreateOneWithoutProdsInput!
  order: OrderCreateOneWithoutProdsInput
}

input ProdCreateWithoutOrderInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  dept: DeptCreateOneWithoutProdsInput!
  model: ModelCreateOneWithoutProdsInput!
}

"""An edge in a connection."""
type ProdEdge {
  """The item at the end of the edge."""
  node: Prod!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProdOrderByInput {
  id_ASC
  id_DESC
  fullnumber_ASC
  fullnumber_DESC
  hasDefect_ASC
  hasDefect_DESC
  isSpoiled_ASC
  isSpoiled_DESC
  melt_ASC
  melt_DESC
  meltShift_ASC
  meltShift_DESC
  htmlNote_ASC
  htmlNote_DESC
  number_ASC
  number_DESC
  progress_ASC
  progress_DESC
  year_ASC
  year_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProdPreviousValues {
  id: ID!
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
}

type ProdSubscriptionPayload {
  mutation: MutationType!
  node: Prod
  updatedFields: [String!]
  previousValues: ProdPreviousValues
}

input ProdSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProdSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProdSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProdSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProdWhereInput
}

input ProdUpdateInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  dept: DeptUpdateOneRequiredWithoutProdsInput
  model: ModelUpdateOneRequiredWithoutProdsInput
  order: OrderUpdateOneWithoutProdsInput
}

input ProdUpdateManyMutationInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
}

input ProdUpdateManyWithoutDeptInput {
  create: [ProdCreateWithoutDeptInput!]
  connect: [ProdWhereUniqueInput!]
  disconnect: [ProdWhereUniqueInput!]
  delete: [ProdWhereUniqueInput!]
  update: [ProdUpdateWithWhereUniqueWithoutDeptInput!]
  upsert: [ProdUpsertWithWhereUniqueWithoutDeptInput!]
}

input ProdUpdateManyWithoutModelInput {
  create: [ProdCreateWithoutModelInput!]
  connect: [ProdWhereUniqueInput!]
  disconnect: [ProdWhereUniqueInput!]
  delete: [ProdWhereUniqueInput!]
  update: [ProdUpdateWithWhereUniqueWithoutModelInput!]
  upsert: [ProdUpsertWithWhereUniqueWithoutModelInput!]
}

input ProdUpdateManyWithoutOrderInput {
  create: [ProdCreateWithoutOrderInput!]
  connect: [ProdWhereUniqueInput!]
  disconnect: [ProdWhereUniqueInput!]
  delete: [ProdWhereUniqueInput!]
  update: [ProdUpdateWithWhereUniqueWithoutOrderInput!]
  upsert: [ProdUpsertWithWhereUniqueWithoutOrderInput!]
}

input ProdUpdateWithoutDeptDataInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  model: ModelUpdateOneRequiredWithoutProdsInput
  order: OrderUpdateOneWithoutProdsInput
}

input ProdUpdateWithoutModelDataInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  dept: DeptUpdateOneRequiredWithoutProdsInput
  order: OrderUpdateOneWithoutProdsInput
}

input ProdUpdateWithoutOrderDataInput {
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  htmlNote: String
  number: Int
  progress: Float
  year: Int
  dept: DeptUpdateOneRequiredWithoutProdsInput
  model: ModelUpdateOneRequiredWithoutProdsInput
}

input ProdUpdateWithWhereUniqueWithoutDeptInput {
  where: ProdWhereUniqueInput!
  data: ProdUpdateWithoutDeptDataInput!
}

input ProdUpdateWithWhereUniqueWithoutModelInput {
  where: ProdWhereUniqueInput!
  data: ProdUpdateWithoutModelDataInput!
}

input ProdUpdateWithWhereUniqueWithoutOrderInput {
  where: ProdWhereUniqueInput!
  data: ProdUpdateWithoutOrderDataInput!
}

input ProdUpsertWithWhereUniqueWithoutDeptInput {
  where: ProdWhereUniqueInput!
  update: ProdUpdateWithoutDeptDataInput!
  create: ProdCreateWithoutDeptInput!
}

input ProdUpsertWithWhereUniqueWithoutModelInput {
  where: ProdWhereUniqueInput!
  update: ProdUpdateWithoutModelDataInput!
  create: ProdCreateWithoutModelInput!
}

input ProdUpsertWithWhereUniqueWithoutOrderInput {
  where: ProdWhereUniqueInput!
  update: ProdUpdateWithoutOrderDataInput!
  create: ProdCreateWithoutOrderInput!
}

input ProdWhereInput {
  """Logical AND on all given filters."""
  AND: [ProdWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProdWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProdWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  fullnumber: String

  """All values that are not equal to given value."""
  fullnumber_not: String

  """All values that are contained in given list."""
  fullnumber_in: [String!]

  """All values that are not contained in given list."""
  fullnumber_not_in: [String!]

  """All values less than the given value."""
  fullnumber_lt: String

  """All values less than or equal the given value."""
  fullnumber_lte: String

  """All values greater than the given value."""
  fullnumber_gt: String

  """All values greater than or equal the given value."""
  fullnumber_gte: String

  """All values containing the given string."""
  fullnumber_contains: String

  """All values not containing the given string."""
  fullnumber_not_contains: String

  """All values starting with the given string."""
  fullnumber_starts_with: String

  """All values not starting with the given string."""
  fullnumber_not_starts_with: String

  """All values ending with the given string."""
  fullnumber_ends_with: String

  """All values not ending with the given string."""
  fullnumber_not_ends_with: String
  hasDefect: Boolean

  """All values that are not equal to given value."""
  hasDefect_not: Boolean
  isSpoiled: Boolean

  """All values that are not equal to given value."""
  isSpoiled_not: Boolean
  melt: Int

  """All values that are not equal to given value."""
  melt_not: Int

  """All values that are contained in given list."""
  melt_in: [Int!]

  """All values that are not contained in given list."""
  melt_not_in: [Int!]

  """All values less than the given value."""
  melt_lt: Int

  """All values less than or equal the given value."""
  melt_lte: Int

  """All values greater than the given value."""
  melt_gt: Int

  """All values greater than or equal the given value."""
  melt_gte: Int
  meltShift: Int

  """All values that are not equal to given value."""
  meltShift_not: Int

  """All values that are contained in given list."""
  meltShift_in: [Int!]

  """All values that are not contained in given list."""
  meltShift_not_in: [Int!]

  """All values less than the given value."""
  meltShift_lt: Int

  """All values less than or equal the given value."""
  meltShift_lte: Int

  """All values greater than the given value."""
  meltShift_gt: Int

  """All values greater than or equal the given value."""
  meltShift_gte: Int
  htmlNote: String

  """All values that are not equal to given value."""
  htmlNote_not: String

  """All values that are contained in given list."""
  htmlNote_in: [String!]

  """All values that are not contained in given list."""
  htmlNote_not_in: [String!]

  """All values less than the given value."""
  htmlNote_lt: String

  """All values less than or equal the given value."""
  htmlNote_lte: String

  """All values greater than the given value."""
  htmlNote_gt: String

  """All values greater than or equal the given value."""
  htmlNote_gte: String

  """All values containing the given string."""
  htmlNote_contains: String

  """All values not containing the given string."""
  htmlNote_not_contains: String

  """All values starting with the given string."""
  htmlNote_starts_with: String

  """All values not starting with the given string."""
  htmlNote_not_starts_with: String

  """All values ending with the given string."""
  htmlNote_ends_with: String

  """All values not ending with the given string."""
  htmlNote_not_ends_with: String
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  progress: Float

  """All values that are not equal to given value."""
  progress_not: Float

  """All values that are contained in given list."""
  progress_in: [Float!]

  """All values that are not contained in given list."""
  progress_not_in: [Float!]

  """All values less than the given value."""
  progress_lt: Float

  """All values less than or equal the given value."""
  progress_lte: Float

  """All values greater than the given value."""
  progress_gt: Float

  """All values greater than or equal the given value."""
  progress_gte: Float
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  dept: DeptWhereInput
  model: ModelWhereInput
  order: OrderWhereInput
}

input ProdWhereUniqueInput {
  id: ID
}

type Query {
  deals(where: DealWhereInput, orderBy: DealOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deal]!
  depts(where: DeptWhereInput, orderBy: DeptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dept]!
  drawings(where: DrawingWhereInput, orderBy: DrawingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Drawing]!
  employees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee]!
  enquiries(where: EnquiryWhereInput, orderBy: EnquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Enquiry]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  equipments(where: EquipmentWhereInput, orderBy: EquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Equipment]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  fileLinks(where: FileLinkWhereInput, orderBy: FileLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FileLink]!
  models(where: ModelWhereInput, orderBy: ModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Model]!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  orgs(where: OrgWhereInput, orderBy: OrgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Org]!
  serverDatas(where: ServerDataWhereInput, orderBy: ServerDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ServerData]!
  tels(where: TelWhereInput, orderBy: TelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tel]!
  payments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment]!
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  prods(where: ProdWhereInput, orderBy: ProdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prod]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  articles(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Article]!
  statuses(where: StatusWhereInput, orderBy: StatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Status]!
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account]!
  docs(where: DocWhereInput, orderBy: DocOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Doc]!
  dealStatuses(where: DealStatusWhereInput, orderBy: DealStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DealStatus]!
  deal(where: DealWhereUniqueInput!): Deal
  dept(where: DeptWhereUniqueInput!): Dept
  drawing(where: DrawingWhereUniqueInput!): Drawing
  employee(where: EmployeeWhereUniqueInput!): Employee
  enquiry(where: EnquiryWhereUniqueInput!): Enquiry
  event(where: EventWhereUniqueInput!): Event
  equipment(where: EquipmentWhereUniqueInput!): Equipment
  file(where: FileWhereUniqueInput!): File
  fileLink(where: FileLinkWhereUniqueInput!): FileLink
  model(where: ModelWhereUniqueInput!): Model
  order(where: OrderWhereUniqueInput!): Order
  org(where: OrgWhereUniqueInput!): Org
  serverData(where: ServerDataWhereUniqueInput!): ServerData
  tel(where: TelWhereUniqueInput!): Tel
  payment(where: PaymentWhereUniqueInput!): Payment
  person(where: PersonWhereUniqueInput!): Person
  prod(where: ProdWhereUniqueInput!): Prod
  user(where: UserWhereUniqueInput!): User
  article(where: ArticleWhereUniqueInput!): Article
  status(where: StatusWhereUniqueInput!): Status
  account(where: AccountWhereUniqueInput!): Account
  doc(where: DocWhereUniqueInput!): Doc
  dealStatus(where: DealStatusWhereUniqueInput!): DealStatus
  dealsConnection(where: DealWhereInput, orderBy: DealOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DealConnection!
  deptsConnection(where: DeptWhereInput, orderBy: DeptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeptConnection!
  drawingsConnection(where: DrawingWhereInput, orderBy: DrawingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DrawingConnection!
  employeesConnection(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployeeConnection!
  enquiriesConnection(where: EnquiryWhereInput, orderBy: EnquiryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EnquiryConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  equipmentsConnection(where: EquipmentWhereInput, orderBy: EquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EquipmentConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  fileLinksConnection(where: FileLinkWhereInput, orderBy: FileLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileLinkConnection!
  modelsConnection(where: ModelWhereInput, orderBy: ModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ModelConnection!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  orgsConnection(where: OrgWhereInput, orderBy: OrgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrgConnection!
  serverDatasConnection(where: ServerDataWhereInput, orderBy: ServerDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServerDataConnection!
  telsConnection(where: TelWhereInput, orderBy: TelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TelConnection!
  paymentsConnection(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentConnection!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  prodsConnection(where: ProdWhereInput, orderBy: ProdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProdConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  articlesConnection(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArticleConnection!
  statusesConnection(where: StatusWhereInput, orderBy: StatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StatusConnection!
  accountsConnection(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccountConnection!
  docsConnection(where: DocWhereInput, orderBy: DocOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DocConnection!
  dealStatusesConnection(where: DealStatusWhereInput, orderBy: DealStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DealStatusConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type ServerData implements Node {
  id: ID!
  amoExpiresAt: Int
  amoCookie: String
}

"""A connection to a list of items."""
type ServerDataConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ServerDataEdge]!
  aggregate: AggregateServerData!
}

input ServerDataCreateInput {
  amoExpiresAt: Int
  amoCookie: String
}

"""An edge in a connection."""
type ServerDataEdge {
  """The item at the end of the edge."""
  node: ServerData!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ServerDataOrderByInput {
  id_ASC
  id_DESC
  amoExpiresAt_ASC
  amoExpiresAt_DESC
  amoCookie_ASC
  amoCookie_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ServerDataPreviousValues {
  id: ID!
  amoExpiresAt: Int
  amoCookie: String
}

type ServerDataSubscriptionPayload {
  mutation: MutationType!
  node: ServerData
  updatedFields: [String!]
  previousValues: ServerDataPreviousValues
}

input ServerDataSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ServerDataSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ServerDataSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ServerDataSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ServerDataWhereInput
}

input ServerDataUpdateInput {
  amoExpiresAt: Int
  amoCookie: String
}

input ServerDataUpdateManyMutationInput {
  amoExpiresAt: Int
  amoCookie: String
}

input ServerDataWhereInput {
  """Logical AND on all given filters."""
  AND: [ServerDataWhereInput!]

  """Logical OR on all given filters."""
  OR: [ServerDataWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ServerDataWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amoExpiresAt: Int

  """All values that are not equal to given value."""
  amoExpiresAt_not: Int

  """All values that are contained in given list."""
  amoExpiresAt_in: [Int!]

  """All values that are not contained in given list."""
  amoExpiresAt_not_in: [Int!]

  """All values less than the given value."""
  amoExpiresAt_lt: Int

  """All values less than or equal the given value."""
  amoExpiresAt_lte: Int

  """All values greater than the given value."""
  amoExpiresAt_gt: Int

  """All values greater than or equal the given value."""
  amoExpiresAt_gte: Int
  amoCookie: String

  """All values that are not equal to given value."""
  amoCookie_not: String

  """All values that are contained in given list."""
  amoCookie_in: [String!]

  """All values that are not contained in given list."""
  amoCookie_not_in: [String!]

  """All values less than the given value."""
  amoCookie_lt: String

  """All values less than or equal the given value."""
  amoCookie_lte: String

  """All values greater than the given value."""
  amoCookie_gt: String

  """All values greater than or equal the given value."""
  amoCookie_gte: String

  """All values containing the given string."""
  amoCookie_contains: String

  """All values not containing the given string."""
  amoCookie_not_contains: String

  """All values starting with the given string."""
  amoCookie_starts_with: String

  """All values not starting with the given string."""
  amoCookie_not_starts_with: String

  """All values ending with the given string."""
  amoCookie_ends_with: String

  """All values not ending with the given string."""
  amoCookie_not_ends_with: String
}

input ServerDataWhereUniqueInput {
  id: ID
}

type Status implements Node {
  id: ID!
  name: String!
  stage: Int
  prev(where: StatusWhereInput, orderBy: StatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Status!]
  next(where: StatusWhereInput, orderBy: StatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Status!]
}

"""A connection to a list of items."""
type StatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StatusEdge]!
  aggregate: AggregateStatus!
}

input StatusCreateInput {
  name: String!
  stage: Int
  prev: StatusCreateManyWithoutNextInput
  next: StatusCreateManyWithoutPrevInput
}

input StatusCreateManyWithoutNextInput {
  create: [StatusCreateWithoutNextInput!]
  connect: [StatusWhereUniqueInput!]
}

input StatusCreateManyWithoutPrevInput {
  create: [StatusCreateWithoutPrevInput!]
  connect: [StatusWhereUniqueInput!]
}

input StatusCreateOneInput {
  create: StatusCreateInput
  connect: StatusWhereUniqueInput
}

input StatusCreateWithoutNextInput {
  name: String!
  stage: Int
  prev: StatusCreateManyWithoutNextInput
}

input StatusCreateWithoutPrevInput {
  name: String!
  stage: Int
  next: StatusCreateManyWithoutPrevInput
}

"""An edge in a connection."""
type StatusEdge {
  """The item at the end of the edge."""
  node: Status!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StatusOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  stage_ASC
  stage_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StatusPreviousValues {
  id: ID!
  name: String!
  stage: Int
}

type StatusSubscriptionPayload {
  mutation: MutationType!
  node: Status
  updatedFields: [String!]
  previousValues: StatusPreviousValues
}

input StatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StatusWhereInput
}

input StatusUpdateDataInput {
  name: String
  stage: Int
  prev: StatusUpdateManyWithoutNextInput
  next: StatusUpdateManyWithoutPrevInput
}

input StatusUpdateInput {
  name: String
  stage: Int
  prev: StatusUpdateManyWithoutNextInput
  next: StatusUpdateManyWithoutPrevInput
}

input StatusUpdateManyMutationInput {
  name: String
  stage: Int
}

input StatusUpdateManyWithoutNextInput {
  create: [StatusCreateWithoutNextInput!]
  connect: [StatusWhereUniqueInput!]
  disconnect: [StatusWhereUniqueInput!]
  delete: [StatusWhereUniqueInput!]
  update: [StatusUpdateWithWhereUniqueWithoutNextInput!]
  upsert: [StatusUpsertWithWhereUniqueWithoutNextInput!]
}

input StatusUpdateManyWithoutPrevInput {
  create: [StatusCreateWithoutPrevInput!]
  connect: [StatusWhereUniqueInput!]
  disconnect: [StatusWhereUniqueInput!]
  delete: [StatusWhereUniqueInput!]
  update: [StatusUpdateWithWhereUniqueWithoutPrevInput!]
  upsert: [StatusUpsertWithWhereUniqueWithoutPrevInput!]
}

input StatusUpdateOneInput {
  create: StatusCreateInput
  connect: StatusWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StatusUpdateDataInput
  upsert: StatusUpsertNestedInput
}

input StatusUpdateWithoutNextDataInput {
  name: String
  stage: Int
  prev: StatusUpdateManyWithoutNextInput
}

input StatusUpdateWithoutPrevDataInput {
  name: String
  stage: Int
  next: StatusUpdateManyWithoutPrevInput
}

input StatusUpdateWithWhereUniqueWithoutNextInput {
  where: StatusWhereUniqueInput!
  data: StatusUpdateWithoutNextDataInput!
}

input StatusUpdateWithWhereUniqueWithoutPrevInput {
  where: StatusWhereUniqueInput!
  data: StatusUpdateWithoutPrevDataInput!
}

input StatusUpsertNestedInput {
  update: StatusUpdateDataInput!
  create: StatusCreateInput!
}

input StatusUpsertWithWhereUniqueWithoutNextInput {
  where: StatusWhereUniqueInput!
  update: StatusUpdateWithoutNextDataInput!
  create: StatusCreateWithoutNextInput!
}

input StatusUpsertWithWhereUniqueWithoutPrevInput {
  where: StatusWhereUniqueInput!
  update: StatusUpdateWithoutPrevDataInput!
  create: StatusCreateWithoutPrevInput!
}

input StatusWhereInput {
  """Logical AND on all given filters."""
  AND: [StatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  stage: Int

  """All values that are not equal to given value."""
  stage_not: Int

  """All values that are contained in given list."""
  stage_in: [Int!]

  """All values that are not contained in given list."""
  stage_not_in: [Int!]

  """All values less than the given value."""
  stage_lt: Int

  """All values less than or equal the given value."""
  stage_lte: Int

  """All values greater than the given value."""
  stage_gt: Int

  """All values greater than or equal the given value."""
  stage_gte: Int
  prev_every: StatusWhereInput
  prev_some: StatusWhereInput
  prev_none: StatusWhereInput
  next_every: StatusWhereInput
  next_some: StatusWhereInput
  next_none: StatusWhereInput
}

input StatusWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  deal(where: DealSubscriptionWhereInput): DealSubscriptionPayload
  dept(where: DeptSubscriptionWhereInput): DeptSubscriptionPayload
  drawing(where: DrawingSubscriptionWhereInput): DrawingSubscriptionPayload
  employee(where: EmployeeSubscriptionWhereInput): EmployeeSubscriptionPayload
  enquiry(where: EnquirySubscriptionWhereInput): EnquirySubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  equipment(where: EquipmentSubscriptionWhereInput): EquipmentSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  fileLink(where: FileLinkSubscriptionWhereInput): FileLinkSubscriptionPayload
  model(where: ModelSubscriptionWhereInput): ModelSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  org(where: OrgSubscriptionWhereInput): OrgSubscriptionPayload
  serverData(where: ServerDataSubscriptionWhereInput): ServerDataSubscriptionPayload
  tel(where: TelSubscriptionWhereInput): TelSubscriptionPayload
  payment(where: PaymentSubscriptionWhereInput): PaymentSubscriptionPayload
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  prod(where: ProdSubscriptionWhereInput): ProdSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  article(where: ArticleSubscriptionWhereInput): ArticleSubscriptionPayload
  status(where: StatusSubscriptionWhereInput): StatusSubscriptionPayload
  account(where: AccountSubscriptionWhereInput): AccountSubscriptionPayload
  doc(where: DocSubscriptionWhereInput): DocSubscriptionPayload
  dealStatus(where: DealStatusSubscriptionWhereInput): DealStatusSubscriptionPayload
}

type Tel implements Node {
  id: ID!
  number: String!
  type: TelType
  country: String
  note: String
  default: Boolean
  person: Person
}

"""A connection to a list of items."""
type TelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TelEdge]!
  aggregate: AggregateTel!
}

input TelCreateInput {
  number: String!
  type: TelType
  country: String
  note: String
  default: Boolean
  person: PersonCreateOneWithoutTelsInput
}

input TelCreateManyWithoutPersonInput {
  create: [TelCreateWithoutPersonInput!]
  connect: [TelWhereUniqueInput!]
}

input TelCreateWithoutPersonInput {
  number: String!
  type: TelType
  country: String
  note: String
  default: Boolean
}

"""An edge in a connection."""
type TelEdge {
  """The item at the end of the edge."""
  node: Tel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TelOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  type_ASC
  type_DESC
  country_ASC
  country_DESC
  note_ASC
  note_DESC
  default_ASC
  default_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TelPreviousValues {
  id: ID!
  number: String!
  type: TelType
  country: String
  note: String
  default: Boolean
}

type TelSubscriptionPayload {
  mutation: MutationType!
  node: Tel
  updatedFields: [String!]
  previousValues: TelPreviousValues
}

input TelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TelSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TelSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TelWhereInput
}

enum TelType {
  WORK
  MOBILE
  OTHER
}

input TelUpdateInput {
  number: String
  type: TelType
  country: String
  note: String
  default: Boolean
  person: PersonUpdateOneWithoutTelsInput
}

input TelUpdateManyMutationInput {
  number: String
  type: TelType
  country: String
  note: String
  default: Boolean
}

input TelUpdateManyWithoutPersonInput {
  create: [TelCreateWithoutPersonInput!]
  connect: [TelWhereUniqueInput!]
  disconnect: [TelWhereUniqueInput!]
  delete: [TelWhereUniqueInput!]
  update: [TelUpdateWithWhereUniqueWithoutPersonInput!]
  upsert: [TelUpsertWithWhereUniqueWithoutPersonInput!]
}

input TelUpdateWithoutPersonDataInput {
  number: String
  type: TelType
  country: String
  note: String
  default: Boolean
}

input TelUpdateWithWhereUniqueWithoutPersonInput {
  where: TelWhereUniqueInput!
  data: TelUpdateWithoutPersonDataInput!
}

input TelUpsertWithWhereUniqueWithoutPersonInput {
  where: TelWhereUniqueInput!
  update: TelUpdateWithoutPersonDataInput!
  create: TelCreateWithoutPersonInput!
}

input TelWhereInput {
  """Logical AND on all given filters."""
  AND: [TelWhereInput!]

  """Logical OR on all given filters."""
  OR: [TelWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TelWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  number: String

  """All values that are not equal to given value."""
  number_not: String

  """All values that are contained in given list."""
  number_in: [String!]

  """All values that are not contained in given list."""
  number_not_in: [String!]

  """All values less than the given value."""
  number_lt: String

  """All values less than or equal the given value."""
  number_lte: String

  """All values greater than the given value."""
  number_gt: String

  """All values greater than or equal the given value."""
  number_gte: String

  """All values containing the given string."""
  number_contains: String

  """All values not containing the given string."""
  number_not_contains: String

  """All values starting with the given string."""
  number_starts_with: String

  """All values not starting with the given string."""
  number_not_starts_with: String

  """All values ending with the given string."""
  number_ends_with: String

  """All values not ending with the given string."""
  number_not_ends_with: String
  type: TelType

  """All values that are not equal to given value."""
  type_not: TelType

  """All values that are contained in given list."""
  type_in: [TelType!]

  """All values that are not contained in given list."""
  type_not_in: [TelType!]
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  default: Boolean

  """All values that are not equal to given value."""
  default_not: Boolean
  person: PersonWhereInput
}

input TelWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  email: String!
  confirmed: Boolean
  password: String!
  role: UserRole
  person: Person
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  account: Account
  createdPayments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment!]
  updatedPayments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  confirmed: Boolean
  password: String!
  role: UserRole
  person: PersonCreateOneWithoutUserInput
  events: EventCreateManyWithoutUserInput
  account: AccountCreateOneInput
  createdPayments: PaymentCreateManyWithoutCreatedByInput
  updatedPayments: PaymentCreateManyWithoutUpdatedByInput
}

input UserCreateOneWithoutCreatedPaymentsInput {
  create: UserCreateWithoutCreatedPaymentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPersonInput {
  create: UserCreateWithoutPersonInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUpdatedPaymentsInput {
  create: UserCreateWithoutUpdatedPaymentsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCreatedPaymentsInput {
  email: String!
  confirmed: Boolean
  password: String!
  role: UserRole
  person: PersonCreateOneWithoutUserInput
  events: EventCreateManyWithoutUserInput
  account: AccountCreateOneInput
  updatedPayments: PaymentCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutEventsInput {
  email: String!
  confirmed: Boolean
  password: String!
  role: UserRole
  person: PersonCreateOneWithoutUserInput
  account: AccountCreateOneInput
  createdPayments: PaymentCreateManyWithoutCreatedByInput
  updatedPayments: PaymentCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutPersonInput {
  email: String!
  confirmed: Boolean
  password: String!
  role: UserRole
  events: EventCreateManyWithoutUserInput
  account: AccountCreateOneInput
  createdPayments: PaymentCreateManyWithoutCreatedByInput
  updatedPayments: PaymentCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutUpdatedPaymentsInput {
  email: String!
  confirmed: Boolean
  password: String!
  role: UserRole
  person: PersonCreateOneWithoutUserInput
  events: EventCreateManyWithoutUserInput
  account: AccountCreateOneInput
  createdPayments: PaymentCreateManyWithoutCreatedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  confirmed_ASC
  confirmed_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  confirmed: Boolean
  password: String!
  role: UserRole
}

enum UserRole {
  INACTIVE
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  confirmed: Boolean
  password: String
  role: UserRole
  person: PersonUpdateOneWithoutUserInput
  events: EventUpdateManyWithoutUserInput
  account: AccountUpdateOneInput
  createdPayments: PaymentUpdateManyWithoutCreatedByInput
  updatedPayments: PaymentUpdateManyWithoutUpdatedByInput
}

input UserUpdateManyMutationInput {
  email: String
  confirmed: Boolean
  password: String
  role: UserRole
}

input UserUpdateOneWithoutCreatedPaymentsInput {
  create: UserCreateWithoutCreatedPaymentsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCreatedPaymentsDataInput
  upsert: UserUpsertWithoutCreatedPaymentsInput
}

input UserUpdateOneWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutEventsDataInput
  upsert: UserUpsertWithoutEventsInput
}

input UserUpdateOneWithoutPersonInput {
  create: UserCreateWithoutPersonInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPersonDataInput
  upsert: UserUpsertWithoutPersonInput
}

input UserUpdateOneWithoutUpdatedPaymentsInput {
  create: UserCreateWithoutUpdatedPaymentsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutUpdatedPaymentsDataInput
  upsert: UserUpsertWithoutUpdatedPaymentsInput
}

input UserUpdateWithoutCreatedPaymentsDataInput {
  email: String
  confirmed: Boolean
  password: String
  role: UserRole
  person: PersonUpdateOneWithoutUserInput
  events: EventUpdateManyWithoutUserInput
  account: AccountUpdateOneInput
  updatedPayments: PaymentUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutEventsDataInput {
  email: String
  confirmed: Boolean
  password: String
  role: UserRole
  person: PersonUpdateOneWithoutUserInput
  account: AccountUpdateOneInput
  createdPayments: PaymentUpdateManyWithoutCreatedByInput
  updatedPayments: PaymentUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutPersonDataInput {
  email: String
  confirmed: Boolean
  password: String
  role: UserRole
  events: EventUpdateManyWithoutUserInput
  account: AccountUpdateOneInput
  createdPayments: PaymentUpdateManyWithoutCreatedByInput
  updatedPayments: PaymentUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutUpdatedPaymentsDataInput {
  email: String
  confirmed: Boolean
  password: String
  role: UserRole
  person: PersonUpdateOneWithoutUserInput
  events: EventUpdateManyWithoutUserInput
  account: AccountUpdateOneInput
  createdPayments: PaymentUpdateManyWithoutCreatedByInput
}

input UserUpsertWithoutCreatedPaymentsInput {
  update: UserUpdateWithoutCreatedPaymentsDataInput!
  create: UserCreateWithoutCreatedPaymentsInput!
}

input UserUpsertWithoutEventsInput {
  update: UserUpdateWithoutEventsDataInput!
  create: UserCreateWithoutEventsInput!
}

input UserUpsertWithoutPersonInput {
  update: UserUpdateWithoutPersonDataInput!
  create: UserCreateWithoutPersonInput!
}

input UserUpsertWithoutUpdatedPaymentsInput {
  update: UserUpdateWithoutUpdatedPaymentsDataInput!
  create: UserCreateWithoutUpdatedPaymentsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  confirmed: Boolean

  """All values that are not equal to given value."""
  confirmed_not: Boolean
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  role: UserRole

  """All values that are not equal to given value."""
  role_not: UserRole

  """All values that are contained in given list."""
  role_in: [UserRole!]

  """All values that are not contained in given list."""
  role_not_in: [UserRole!]
  person: PersonWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  account: AccountWhereInput
  createdPayments_every: PaymentWhereInput
  createdPayments_some: PaymentWhereInput
  createdPayments_none: PaymentWhereInput
  updatedPayments_every: PaymentWhereInput
  updatedPayments_some: PaymentWhereInput
  updatedPayments_none: PaymentWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
