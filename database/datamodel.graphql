type Account {				# payment account including bank accounts and cashboxes
	id: ID! @unique
	name: String
	number: String
	payments: [Payment!]!
}

type Article {					# payment articles
	id: ID! @unique
	name: String
	rusName: String
	isIncome: Boolean
	isLoan: Boolean
	relations: [String!]!	#serves to show related form fields
}

type Batch {
	id: ID! @unique
	qty: Int
	deal: Deal @relation(name: "DealBatches")
	model: Model
	procs: [Proc!]! @relation(name: "BatchesProcs" onDelete: CASCADE)
	workpiece: Workpiece @relation(name: "BatchWorkpiece"  onDelete: CASCADE)
}

type Deal {
	id: ID! @unique
	amoId: Int @unique
	date: DateTime
	name: String
	batches: [Batch!]! @relation(name: "DealBatches" onDelete: CASCADE)
	org: Org
	status: DealStatus
}

type DealStatus {
	id: ID! @unique
	amoId: Int @unique
	name: String
	color: String
	sort: Int
}

type Dept {
  id: ID! @unique
  type: DeptType!
  name: String!
  prods: [Prod!]! @relation(name: "DeptProds")
}

type Doc {
	id: ID! @unique
	dateLocal: String
	amount: Float
	nds: Boolean
	num: String
	type: DocType
	enquiry: Enquiry @relation(name: "EnquiryDocs")
	org: Org
}

type Drawing {
	id: ID! @unique
	name: String
	sortOrder: Int						# display order of model's drawings collection
	files: [File!]! @relation(name: "DrawingFiles" onDelete: CASCADE)
	model: Model @relation(name: "ModelDrawings")
	workpiece: Workpiece @relation(name: "WorkpieceDrawing")
}

type Employee {
	id: ID! @unique
	position: String
	person: Person
	org: Org!
}

type Enquiry {
	id: ID! @unique
	num: Int!
	dateLocal: String
	org: Org @relation(name: "OrgEnquiries")
	model: Model @relation(name: "EnquiryModel")
	qty: Int
	htmlNote: String
	events: [Event!]! @relation(name: "EventOnEnquiry" onDelete: CASCADE)
	orders: [Order!]!  @relation(name: "EnquiryOrders")
	docs: [Doc!]! @relation(name: "EnquiryDocs" onDelete: CASCADE)
	status: Status
}

type Event {
	id: ID! @unique
	user: User @relation(name: "EventByUser")
	enquiry: Enquiry @relation(name: "EventOnEnquiry")
	order: Order @relation(name: "OrderEvents")
	datetimeLocal: String!
	htmlText: String
	type: EventType
	status: Status
	doc: Doc @relation(name: "EventDoc" onDelete: CASCADE)
}

type Equipment {
  id: ID! @unique
	name: String
	payments: [Payment!]!
}

type File {
	id: ID! @unique
	path: String @unique
	filename: String
	mimetype: String
	encoding: String
	size: Int       			# file size in bytes. Int can represent numbers up to 2,147,483,647
	width: Int						# used for images
	height: Int						# used for images
	imgFor: ImgFor				# used in frontend to pick the right image size
	drawing: Drawing @relation(name: "DrawingFiles")
}

type FileLink {
	id: ID! @unique
	name: String!
	storeId: ID
}

type Model {
	id: ID! @unique
	article: String
	name: String!
	batches: [Batch!]!
  drawings: [Drawing!]! @relation(name: "ModelDrawings" onDelete: CASCADE)
	enquiries: [Enquiry!]! @relation(name: "EnquiryModel")
	orders: [Order!]! @relation(name: "ModelOrders")
	procs: [Proc!]!
  prods: [Prod!]! @relation(name: "ModelProds")
}

type Op {
	id: ID! @unique
	dealLabor: Float
	opType: OpType!
	description: String
	info: String
	warning: String
	proc: Proc! @relation(name: "ProcOps")
}

type OpType {
	id: ID! @unique
	name: String!
	ops: [Op!]!
}

type Order {
	id: ID! @unique
	num: Int # represents sequential number of this org orders
	fullnum: String # in format <enquiry.num>-<num>
	dateLocal: String
	qty: Int
	amount: Float
	htmlNote: String
	enquiry: Enquiry @relation(name: "EnquiryOrders")
	org: Org @relation(name: "OrgOrders")
	model: Model @relation(name: "ModelOrders")
	events: [Event!]! @relation(name: "OrderEvents" onDelete: CASCADE)
	prods: [Prod!]! @relation(name: "OrderProds")
}

type Org {
	id: ID! @unique
	inn: String @unique
	moedeloId: String
	amoId: Int
	legalAddress: String
	name: String!
	ulName: String
	deals: [Deal!]!
	docs: [Doc!]!
	employees: [Employee!]!
	enquiries: [Enquiry!]! @relation(name: "OrgEnquiries")
	orders: [Order!]! @relation(name: "OrgOrders")
	payments: [Payment!]!
}

type Proc {					# technical process
	id: ID! @unique
	name: String!
	batches: [Batch!]! @relation(name: "BatchesProcs")
	model: Model!
	ops: [Op!]! @relation(name: "ProcOps" onDelete: CASCADE)
}

type ServerData {
	id: ID! @unique
	amoExpiresAt: Int
	amoCookie: String
}

type Status {
	id: ID! @unique
	name: String! @unique
	stage: Int
	prev: [Status!]! @relation(name: "StatusLink")
	next: [Status!]! @relation(name: "StatusLink")
}

type Tel {
	id: ID! @unique
	number: String!
	type: TelType
	country: String
	note: String
	default: Boolean
	person: Person @relation(name: "PersonTels")
}

type Payment {
	id: ID! @unique
	dateLocal: DateTime! @unique
	createdAt: DateTime!
	updatedAt: DateTime!
	amount: Float
	article: Article
	isIncome: Boolean		# only to specify bank payments
	purpose: String
	tochkaId: String
	account: Account
	equipment: Equipment
	org: Org
	person: Person
	createdBy: User @relation(name: "PaymentsCreatedByUser")
	updatedBy: User @relation(name: "PaymentsUpdatedByUser")
}

type Person {
	id: ID! @unique
	amoId: Int @unique
	fName: String
	lName: String
	mName: String
	regName: String
	amoName: String
	regNameChecked: Boolean
	htmlNote: String
	tels: [Tel!]! @relation(name: "PersonTels", onDelete: CASCADE)
	user: User @relation(name: "PersonUser")
	employees: [Employee!]!
	payments: [Payment!]!
}

type Prod {
  id: ID! @unique
  dept: Dept! @relation(name: "DeptProds")
  fullnumber: String
  hasDefect: Boolean
  isSpoiled: Boolean
  melt: Int
  meltShift: Int
  model: Model! @relation(name: "ModelProds")
  order: Order @relation(name: "OrderProds")
  htmlNote: String
  number: Int
  progress: Float
  year: Int
}

type User {
	id: ID! @unique
	email: String! @unique
	confirmed: Boolean
	password: String!
	role: UserRole
	person: Person @relation(name: "PersonUser")
	events: [Event!]! @relation(name: "EventByUser")
	account: Account				# default payment account
	createdPayments: [Payment!]! @relation(name: "PaymentsCreatedByUser")
	updatedPayments: [Payment!]! @relation(name: "PaymentsUpdatedByUser")
}

type Workpiece {
	id: ID! @unique
	hardness: String
	name: String
	material: String
	batch: Batch @relation(name: "BatchWorkpiece")
	drawing: Drawing @relation(name: "WorkpieceDrawing" onDelete: CASCADE)
}

enum TelType {
  WORK
  MOBILE
  OTHER
}

enum DeptType {
  OWNED
  CLIENT
  PARTNER
  TRANSPORT
}

enum EventType {
	CREATE
	UPDATE
	STATUS
	COMMENT
}

enum DocType {
	CO
	CONTRACT
}

enum UserRole {
	INACTIVE
}

enum ImgFor {
	ORIGINAL
	FEED_W792
}